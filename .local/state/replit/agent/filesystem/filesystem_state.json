{"file_contents":{"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/song-video-lyrics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { getLyrics } from \"../lib/lyrist\";\nimport { useTheme } from \"next-themes\";\nimport { Card } from \"@/components/ui/card\";\nimport { Music2, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SongVideoLyricsProps {\n  artist: string;\n  title: string;\n}\n\nexport function SongVideoLyrics({ artist, title }: SongVideoLyricsProps) {\n  const [lyrics, setLyrics] = useState<string>(\"\");\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<boolean>(false);\n  const [dismissed, setDismissed] = useState<boolean>(false);\n  const { theme } = useTheme();\n\n  useEffect(() => {\n    if (!artist || !title) return;\n    \n    setLoading(true);\n    setError(false);\n    setDismissed(false);\n    \n    getLyrics(artist, title)\n      .then((result) => {\n        if (result.lyrics && result.lyrics.trim()) {\n          setLyrics(result.lyrics);\n        } else {\n          setError(true);\n        }\n      })\n      .catch(() => {\n        setError(true);\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  }, [artist, title]);\n\n  if (dismissed || (!loading && error)) {\n    return null;\n  }\n\n  if (!loading && !lyrics) {\n    return null;\n  }\n\n  return (\n    <Card className=\"mb-6 p-6 glass-elevated border-violet-400/20 relative\">\n      <Button\n        variant=\"ghost\"\n        size=\"icon\"\n        className=\"absolute top-2 right-2 h-8 w-8 text-muted-foreground hover:text-foreground\"\n        onClick={() => setDismissed(true)}\n      >\n        <X className=\"h-4 w-4\" />\n      </Button>\n      \n      <div className=\"flex items-center gap-2 mb-4\">\n        <Music2 className=\"h-5 w-5 text-violet-500\" />\n        <h3 className=\"text-lg font-semibold bg-gradient-to-r from-violet-600 to-blue-600 dark:from-violet-400 dark:to-blue-400 bg-clip-text text-transparent\">\n          Lyrics\n        </h3>\n      </div>\n      \n      {loading ? (\n        <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n          <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n          <span>Loading lyrics...</span>\n        </div>\n      ) : (\n        <div className=\"max-h-96 overflow-y-auto\">\n          <pre className=\"whitespace-pre-wrap text-sm leading-relaxed text-foreground/90 font-mono\">\n            {lyrics}\n          </pre>\n        </div>\n      )}\n    </Card>\n  );\n}\n","size_bytes":2439},"server/lib/youtube.ts":{"content":"// Reference: youtube blueprint integration\nimport { google } from 'googleapis';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings?.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('YouTube connection not available - X_REPLIT_TOKEN not found');\n  }\n\n  if (!hostname) {\n    throw new Error('YouTube connection not available - REPLIT_CONNECTORS_HOSTNAME not found');\n  }\n\n  try {\n    const response = await fetch(\n      'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=youtube',\n      {\n        headers: {\n          'Accept': 'application/json',\n          'X_REPLIT_TOKEN': xReplitToken\n        }\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch YouTube connection: ${response.status}`);\n    }\n\n    const data = await response.json();\n    connectionSettings = data.items?.[0];\n\n    if (!connectionSettings) {\n      throw new Error('YouTube connection not configured. Please set up the YouTube connector in Replit.');\n    }\n\n    const accessToken = connectionSettings.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n    if (!accessToken) {\n      throw new Error('YouTube access token not available. Please reconnect the YouTube connector.');\n    }\n    \n    return accessToken;\n  } catch (error) {\n    console.error('YouTube connection error:', error);\n    throw error;\n  }\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableYouTubeClient() {\n  const accessToken = await getAccessToken();\n  \n  // Create an OAuth2 client and set the credentials\n  const oauth2Client = new google.auth.OAuth2();\n  oauth2Client.setCredentials({\n    access_token: accessToken\n  });\n  \n  return google.youtube({ \n    version: 'v3', \n    auth: oauth2Client \n  });\n}\n\nexport interface YouTubeSearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n}\n\nexport async function searchYouTube(query: string, maxResults: number = 20): Promise<YouTubeSearchResult[]> {\n  try {\n    const youtube = await getUncachableYouTubeClient();\n    \n    // Search for music videos only\n    const searchResponse = await youtube.search.list({\n      part: ['snippet'],\n      q: query,\n      type: ['video'],\n      videoCategoryId: '10', // Music category\n      maxResults,\n      order: 'relevance',\n    });\n\n    if (!searchResponse.data.items) {\n      return [];\n    }\n\n    const videoIds = searchResponse.data.items\n      .map(item => item.id?.videoId)\n      .filter(Boolean) as string[];\n\n    if (videoIds.length === 0) {\n      return [];\n    }\n\n    // Get video details for duration and statistics\n    const videosResponse = await youtube.videos.list({\n      part: ['snippet', 'contentDetails', 'statistics'],\n      id: videoIds,\n    });\n\n    const results: YouTubeSearchResult[] = [];\n\n    for (const video of videosResponse.data.items || []) {\n      if (!video.id) continue;\n\n      const duration = parseDuration(video.contentDetails?.duration || 'PT0S');\n      const snippet = video.snippet;\n      \n      results.push({\n        id: video.id,\n        title: snippet?.title || 'Unknown',\n        artist: snippet?.channelTitle || 'Unknown Artist',\n        thumbnail: snippet?.thumbnails?.high?.url || snippet?.thumbnails?.default?.url || '',\n        duration,\n        url: `https://www.youtube.com/watch?v=${video.id}`,\n        embedUrl: `https://www.youtube.com/embed/${video.id}`,\n        publishedAt: snippet?.publishedAt || new Date().toISOString(),\n        viewCount: parseInt(video.statistics?.viewCount || '0'),\n        description: snippet?.description || '',\n      });\n    }\n\n    return results;\n  } catch (error) {\n    console.error('YouTube search error:', error);\n    // Return empty array instead of throwing - allows other sources to work\n    return [];\n  }\n}\n\nfunction parseDuration(duration: string): string {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return '0:00';\n\n  const hours = parseInt(match[1] || '0');\n  const minutes = parseInt(match[2] || '0');\n  const seconds = parseInt(match[3] || '0');\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\n","size_bytes":4968},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"api/index.ts":{"content":"import type { VercelRequest, VercelResponse } from '@vercel/node';\nimport express from 'express';\nimport { registerRoutes } from '../server/routes';\n\nlet app: express.Express | null = null;\n\nasync function getApp() {\n  if (!app) {\n    app = express();\n    app.use(express.json());\n    app.use(express.urlencoded({ extended: false }));\n    \n    // Register API routes only\n    await registerRoutes(app);\n  }\n  return app;\n}\n\nexport default async function handler(req: VercelRequest, res: VercelResponse) {\n  try {\n    const app = await getApp();\n    \n    // Ensure headers aren't sent yet\n    if (res.headersSent) {\n      return;\n    }\n    \n    // Set CORS headers for API requests\n    res.setHeader('Access-Control-Allow-Credentials', 'true');\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    res.setHeader('Access-Control-Allow-Methods', 'GET,POST,PUT,DELETE,OPTIONS');\n    res.setHeader('Access-Control-Allow-Headers', 'X-Requested-With,Content-Type,Accept');\n    \n    // Handle preflight requests\n    if (req.method === 'OPTIONS') {\n      res.status(200).end();\n      return;\n    }\n    \n    // Convert Vercel request to Express request format\n    const expressReq = req as any;\n    const expressRes = res as any;\n    \n    // Let Express handle the request\n    app(expressReq, expressRes);\n  } catch (error) {\n    console.error('Vercel function error:', error);\n    if (!res.headersSent) {\n      res.status(500).json({ error: 'Internal server error' });\n    }\n  }\n}\n","size_bytes":1478},"client/src/pages/search.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useLocation, useSearch } from \"wouter\";\nimport { Search as SearchIcon, SlidersHorizontal, Music, Moon, Sun, Menu, ExternalLink, Info } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { SearchResult } from \"@shared/schema\";\nimport { FilterPanel } from \"@/components/filter-panel\";\nimport { VibeMatchModal } from \"@/components/vibe-match-modal\";\nimport { SongVideoLyrics } from \"@/components/song-video-lyrics\";\n\n\nexport default function SearchPage() {\n\n  const [, setLocation] = useLocation();\n  const searchParams = new URLSearchParams(useSearch());\n  const initialQuery = searchParams.get(\"q\") || \"\";\n  const urlAiMode = searchParams.get(\"aiMode\") === \"true\";\n\n  const [searchQuery, setSearchQuery] = useState(initialQuery);\n  const [activeQuery, setActiveQuery] = useState(initialQuery);\n  const [showFilters, setShowFilters] = useState(false);\n  const [showVibeMatch, setShowVibeMatch] = useState(false);\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sortBy, setSortBy] = useState<\"relevance\" | \"newest\" | \"popularity\" | \"publicDomain\">(\"popularity\");\n  const [platform, setPlatform] = useState<\"all\" | \"jamendo\">(\"all\");\n  const { theme, setTheme } = useTheme();\n  const [aiMode, setAiMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      // Check URL first, then fall back to localStorage\n      const params = new URLSearchParams(window.location.search);\n      if (params.has('aiMode')) {\n        return params.get('aiMode') === 'true';\n      }\n      return localStorage.getItem('aiMode') === 'true';\n    }\n    return false;\n  });\n  // Sync aiMode to localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('aiMode', aiMode ? 'true' : 'false');\n    }\n  }, [aiMode]);\n  const [isSearching, setIsSearching] = useState(false);\n\n  // Check if query starts with \"/\"\n  const isWebSearch = activeQuery.startsWith('/');\n  const cleanQuery = isWebSearch ? activeQuery.slice(1).trim() : activeQuery;\n\n  const { data: results, isLoading } = useQuery<SearchResult[]>({\n    queryKey: [`/api/search?q=${encodeURIComponent(cleanQuery)}&sortBy=${sortBy}&platform=${platform}&aiMode=${aiMode}`],\n    enabled: !!cleanQuery && !isWebSearch,\n  });\n\n  const { data: webResults, isLoading: isWebLoading } = useQuery<any[]>({\n    queryKey: [`/api/web-search?q=${encodeURIComponent(cleanQuery)}`],\n    enabled: !!cleanQuery && isWebSearch,\n  });\n\n  useEffect(() => {\n    setSearchQuery(initialQuery);\n    setActiveQuery(initialQuery);\n    setIsSearching(false);\n  }, [initialQuery]);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setIsSearching(true);\n      setActiveQuery(searchQuery.trim());\n      // Preserve aiMode in URL when searching from search page\n      const params = new URLSearchParams({ q: searchQuery.trim() });\n      if (aiMode) {\n        params.set('aiMode', 'true');\n      }\n      setLocation(`/search?${params.toString()}`);\n      setIsSearching(false);\n    }\n  };\n\n  // Removed handlePlayTrack\n\n  return (\n\n  <>\n\n\n    {/* Menu button - hides beneath sidebar when open */}\n\n\n    {/* Responsive container for logo and search bar */}\n    <div className=\"max-w-3xl w-full mx-auto px-4 pt-8 pb-4 flex flex-col items-center\">\n      {/* Logo/Brand just above search bar */}\n      <div className=\"w-full flex flex-col items-center mb-2 sm:mb-4\">\n        <h1\n          className=\"text-4xl sm:text-5xl md:text-6xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent cursor-pointer select-none hover:scale-105 transition-transform duration-200\"\n          onClick={() => setLocation('/')}\n        >\n          Mate.\n        </h1>\n      </div>\n      {/* Search bar and controls */}\n      <div className=\"w-full flex flex-col sm:flex-row items-center gap-3 sm:gap-4\">\n        <form onSubmit={handleSearch} className=\"flex-1 w-full max-w-2xl\">\n          <div className=\"glass backdrop-blur-xl rounded-full px-6 py-2 flex items-center gap-2\">\n            <SearchIcon className=\"w-4 h-4 text-muted-foreground\" />\n            <Input\n              type=\"search\"\n              value={searchQuery}\n              onChange={(e) => setSearchQuery(e.target.value)}\n              placeholder=\"Search for songs... (Use / for web search)\"\n              className=\"flex-1 bg-transparent border-0 focus-visible:ring-0 text-sm\"\n              data-testid=\"input-search-page\"\n            />\n            {/* AI toggle icon */}\n            <Button\n              type=\"button\"\n              size=\"sm\"\n              variant=\"ghost\"\n              className={`backdrop-blur-md bg-white/10 border border-white/10 px-4 py-1 rounded-full font-bold text-base select-none focus:outline-none focus:ring-2 focus:ring-violet-400 transition-all duration-200 shadow-md ${aiMode ? \"text-white animate-glow bg-gradient-to-r from-violet-500 to-blue-500 shadow-lg\" : \"text-violet-400\"}`}\n              style={{\n                boxShadow: aiMode ? \"0 0 12px 2px var(--theme-accent, #8b5cf6)\" : undefined,\n                filter: \"blur(0px)\",\n                color: theme === 'light' && !aiMode ? '#4c1d95' : undefined // dark violet for light mode\n              }}\n              onClick={() => setAiMode((v) => !v)}\n              title={aiMode ? \"AI mode on\" : \"Enable AI mode\"}\n              tabIndex={0}\n            >\n              AI\n            </Button>\n            {searchQuery.trim() && (\n              <Button\n                type=\"submit\"\n                size=\"sm\"\n                disabled={isSearching || isLoading}\n                className={`glass backdrop-blur-xl bg-gradient-to-r from-violet-500/80 to-blue-500/80 hover:from-violet-600/80 hover:to-blue-600/80 animate-fade-in ${isSearching || isLoading ? 'opacity-70 cursor-not-allowed' : ''}`}\n                style={{ color: theme === 'light' ? '#4c1d95' : undefined }}\n              >\n                {isSearching || isLoading ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                    <span>Searching...</span>\n                  </div>\n                ) : (\n                  'Search'\n                )}\n              </Button>\n            )}\n          </div>\n        </form>\n        <div className=\"flex items-center gap-2 mt-2 sm:mt-0\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setShowFilters(!showFilters)}\n            className=\"text-violet-400\"\n            data-testid=\"button-filters\"\n          >\n            <SlidersHorizontal className=\"w-5 h-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setShowVibeMatch(true)}\n            className=\"text-violet-400\"\n            data-testid=\"button-vibe-match-search\"\n          >\n            <Music className=\"w-5 h-5\" />\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n            className=\"text-violet-400\"\n          >\n            {theme === \"dark\" ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </Button>\n        </div>\n      </div>\n    </div>\n\n    {/* Loading progress bar */}\n    {(isSearching || isLoading) && (\n      <div className=\"w-full h-1 bg-transparent overflow-hidden\">\n        <div className=\"h-full bg-gradient-to-r from-blue-500 via-violet-500 to-blue-500 animate-loading-bar\"></div>\n      </div>\n    )}\n\n      {/* Main content */}\n      <main className=\"flex-1 max-w-7xl w-full mx-auto px-6 py-8 pb-32\">\n        {/* Guide for / search prefix */}\n        {!activeQuery && (\n          <div className=\"mb-6 px-4 py-3 rounded-lg glass-elevated border border-blue-400/40 bg-gradient-to-r from-blue-500/10 to-violet-500/10\">\n            <div className=\"flex items-start gap-3\">\n              <Info className=\"w-5 h-5 text-blue-500 flex-shrink-0 mt-0.5\" />\n              <div>\n                <p className=\"text-sm font-semibold text-blue-700 dark:text-blue-300 mb-1\">Pro Tip: Web Search</p>\n                <p className=\"text-sm text-blue-600/80 dark:text-blue-400/80\">\n                  Start your search with <code className=\"px-1.5 py-0.5 rounded bg-blue-500/20 font-mono text-xs\">/</code> to search for music-related articles and information from the web.\n                </p>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* AI mode indicator - Only shows when AI mode is ON and a search has been made */}\n        {aiMode && activeQuery && !isWebSearch && (\n          <div className=\"mb-6 px-4 py-2 rounded-lg glass-elevated border border-violet-400/40 bg-gradient-to-r from-violet-500/10 to-blue-500/10\">\n            <div className=\"flex items-center gap-2\">\n              <div className=\"w-2 h-2 rounded-full bg-violet-500 animate-pulse\"></div>\n              <p className=\"text-sm text-violet-700 dark:text-violet-300\">AI mode is active - showing curated results</p>\n            </div>\n          </div>\n        )}\n        \n        {/* Song Details & Lyrics Section */}\n        {activeQuery && !isWebSearch && (\n          <SongVideoLyrics artist={cleanQuery.split(\" - \")[0] || cleanQuery} title={cleanQuery.split(\" - \")[1] || \"\"} />\n        )}\n        \n        {/* Web search results */}\n        {isWebSearch && webResults && webResults.length > 0 && (\n          <div className=\"mb-8\">\n            <h3 className=\"text-lg font-semibold mb-4 flex items-center gap-2\">\n              <ExternalLink className=\"w-5 h-5 text-violet-500\" />\n              <span className=\"bg-gradient-to-r from-violet-600 to-blue-600 dark:from-violet-400 dark:to-blue-400 bg-clip-text text-transparent\">\n                Related Information\n              </span>\n            </h3>\n            <div className=\"space-y-4\">\n              {webResults.map((result: any, idx: number) => (\n                <div key={idx} className=\"group\">\n                  <a \n                    href={result.url} \n                    target=\"_blank\" \n                    rel=\"noopener noreferrer\"\n                    className=\"text-lg font-medium text-blue-600 dark:text-blue-400 hover:underline group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors\"\n                  >\n                    {result.title}\n                  </a>\n                  <div className=\"text-sm text-green-700 dark:text-green-500 mt-1\">\n                    {result.url}\n                  </div>\n                  {result.description && (\n                    <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                      {result.description}\n                    </p>\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"my-6 border-t border-border\"></div>\n          </div>\n        )}\n        \n        {isWebLoading ? (\n          <div className=\"flex flex-col items-center justify-center py-12\">\n            <div className=\"w-8 h-8 border-4 border-violet-500/30 border-t-violet-500 rounded-full animate-spin mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Searching the web...</p>\n          </div>\n        ) : isWebSearch && (!webResults || webResults.length === 0) && cleanQuery ? (\n          <div className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-violet-500/20 to-blue-500/20 flex items-center justify-center mb-4\">\n              <ExternalLink className=\"w-8 h-8 text-violet-500\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No web results found</h3>\n            <p className=\"text-muted-foreground text-center max-w-md\">\n              Try a different search query\n            </p>\n          </div>\n        ) : null}\n\n        {isLoading ? (\n          <div className=\"flex flex-col items-center justify-center py-12\">\n            <div className=\"w-8 h-8 border-4 border-violet-500/30 border-t-violet-500 rounded-full animate-spin mb-4\" />\n            <p className=\"text-sm text-muted-foreground\">Searching music...</p>\n          </div>\n        ) : results && results.length > 0 ? (\n          <div className=\"space-y-6\">\n            {results.map((result) => (\n              <div \n                key={result.id} \n                className=\"group\"\n              >\n                <div className=\"flex items-start gap-4\">\n                  {result.thumbnail && (\n                    <img \n                      src={result.thumbnail} \n                      alt={result.title}\n                      className=\"w-20 h-20 rounded-lg object-cover flex-shrink-0 group-hover:scale-105 transition-transform duration-200\"\n                    />\n                  )}\n                  <div className=\"flex-1 min-w-0\">\n                    <div className=\"flex items-start gap-2 mb-1\">\n                      <a \n                        href={result.url} \n                        target=\"_blank\" \n                        rel=\"noopener noreferrer\"\n                        className=\"text-xl font-medium text-blue-600 dark:text-blue-400 hover:underline line-clamp-1 group-hover:text-blue-700 dark:group-hover:text-blue-300 transition-colors\"\n                      >\n                        {result.title}\n                      </a>\n                    </div>\n                    \n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-1\">\n                      <span className=\"font-medium text-foreground/70\">{result.artist}</span>\n                      {result.duration && (\n                        <>\n                          <span>•</span>\n                          <span>{result.duration}</span>\n                        </>\n                      )}\n                      <span>•</span>\n                      <span className=\"capitalize\">{result.platform}</span>\n                    </div>\n                    \n                    {result.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2 mt-1\">\n                        {result.description}\n                      </p>\n                    )}\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : activeQuery ? (\n          <div className=\"flex flex-col items-center justify-center py-16\">\n            <div className=\"w-16 h-16 rounded-full bg-gradient-to-br from-violet-500/20 to-blue-500/20 flex items-center justify-center mb-4\">\n              <Music className=\"w-8 h-8 text-violet-500\" />\n            </div>\n            <h3 className=\"text-xl font-semibold mb-2\">No results found</h3>\n            <p className=\"text-muted-foreground text-center max-w-md\">\n              Try different keywords or use Vibe Match to find similar songs\n            </p>\n          </div>\n        ) : null}\n      </main>\n\n      {/* Filter panel */}\n      <FilterPanel\n        open={showFilters}\n        onOpenChange={setShowFilters}\n        sortBy={sortBy}\n        setSortBy={setSortBy}\n        platform={platform}\n        setPlatform={setPlatform}\n      />\n\n      {/* Vibe match modal */}\n      <VibeMatchModal\n        open={showVibeMatch}\n        onOpenChange={setShowVibeMatch}\n      />\n    </>\n  );\n}\n","size_bytes":15586},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./server/db/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL || \"postgresql://placeholder\",\n  },\n});\n","size_bytes":251},"server/lib/itunes.ts":{"content":"import axios from 'axios';\nimport { SearchResult } from '@shared/schema';\n\nexport async function searchItunes(query: string, maxResults: number = 20): Promise<SearchResult[]> {\n  const url = 'https://itunes.apple.com/search';\n  const response = await axios.get(url, {\n    params: {\n      term: query,\n      media: 'music',\n      limit: maxResults,\n    },\n  });\n  return (response.data.results || []).map((item: any) => ({\n    id: item.trackId ? String(item.trackId) : item.collectionId ? String(item.collectionId) : item.artistId ? String(item.artistId) : item.trackName,\n    title: item.trackName || item.collectionName || item.artistName,\n    artist: item.artistName,\n    thumbnail: item.artworkUrl100 || '',\n    duration: item.trackTimeMillis ? `${Math.floor(item.trackTimeMillis / 60000)}:${((item.trackTimeMillis % 60000) / 1000).toFixed(0).padStart(2, '0')}` : '',\n    url: item.trackViewUrl || item.collectionViewUrl || item.artistViewUrl || '',\n    platform: 'itunes',\n    description: item.collectionName || '',\n    publishedAt: item.releaseDate || '',\n    viewCount: undefined,\n    embedUrl: undefined,\n    streamUrl: undefined,\n    downloadUrl: undefined,\n    aiScore: undefined,\n  }));\n}\n","size_bytes":1200},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\n\nexport default defineConfig(({ mode }) => {\n  const isProd = mode === \"production\";\n\n  return {\n    root: \"client\",  // <-- client folder\n    plugins: [react()],\n    base: isProd ? \"/\" : \"/\",\n    build: {\n      outDir: \"../dist/public\", // build output relative to project root\n      emptyOutDir: true,\n      sourcemap: false,\n      target: \"es2020\"\n    },\n    resolve: {\n      alias: {\n        \"@\": path.resolve(__dirname, \"client/src\")\n      }\n    },\n    server: {\n      host: true,\n      port: 5173\n    }\n  };\n});\n","size_bytes":622},"server/db/index.d1.ts":{"content":"import { drizzle } from 'drizzle-orm/d1';\nimport * as schema from './schema.d1';\n\nexport function getDB(d1Database: D1Database) {\n  return drizzle(d1Database, { schema });\n}\n\nexport * from './schema.d1';\n","size_bytes":204},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"functions/api/lib/jango.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface JangoResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchJango(query: string, maxResults: number = 20): Promise<JangoResult[]> {\n  try {\n    // Jango station search\n    const url = `https://www.jango.com/api/search?q=${encodeURIComponent(query)}&type=artist`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const stations = data.artists || data.results || [];\n\n    const results: JangoResult[] = stations.slice(0, maxResults).map((station: any) => {\n      const artist = station.name || station.artist_name || 'Unknown Artist';\n      const title = `${artist} Radio`;\n      \n      return {\n        id: station.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: station.image || station.artwork_url || 'https://www.jango.com/images/logo.png',\n        duration: 'Live Stream',\n        url: `https://www.jango.com/music/${encodeURIComponent(artist)}`,\n        embedUrl: station.stream_url || '',\n        publishedAt: new Date().toISOString(),\n        viewCount: station.plays || 0,\n        description: `Listen to ${artist} radio on Jango`,\n        platform: 'jango',\n        aiScore: calculateAIScore(artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Jango search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (artistLower.includes(queryLower)) score += 50;\n  if (artistLower === queryLower) score += 100;\n  \n  const artistWords = artistLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => artistWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2266},"functions/api/lib/jamendo.ts":{"content":"import axios from 'axios';\n\nconst JAMENDO_CLIENT_ID = process.env.JAMENDO_CLIENT_ID || 'ecc95144';\n\nexport interface JamendoTrack {\n  id: string;\n  name: string;\n  artist_name: string;\n  album_name: string;\n  duration: number;\n  image: string;\n  audio: string;\n  audiodownload: string;\n  shareurl: string;\n  releasedate: string;\n  popularity: number;\n}\n\nexport interface SearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  downloadUrl?: string;\n  aiScore?: number;\n}\n\nexport async function searchJamendo(query: string, maxResults: number = 20): Promise<SearchResult[]> {\n  try {\n    const response = await axios.get('https://api.jamendo.com/v3.0/tracks/', {\n      params: {\n        client_id: JAMENDO_CLIENT_ID,\n        format: 'json',\n        namesearch: query,\n        limit: maxResults * 2,\n        include: 'musicinfo',\n        audioformat: 'mp32',\n        imagesize: 300,\n      }\n    });\n\n    const tracks: JamendoTrack[] = response.data.results || [];\n    \n    const results = tracks.map(track => ({\n      id: track.id,\n      title: track.name,\n      artist: track.artist_name,\n      thumbnail: track.image || `https://api.jamendo.com/v3.0/albums/artwork/?id=${track.id}&size=300`,\n      duration: formatDuration(track.duration),\n      url: track.shareurl,\n      embedUrl: track.audio,\n      publishedAt: track.releasedate,\n      viewCount: Math.floor(track.popularity * 1000),\n      description: `${track.album_name || 'Single'} by ${track.artist_name}`,\n      platform: 'jamendo',\n      downloadUrl: track.audiodownload,\n      aiScore: calculateAIScore(track, query),\n    }));\n\n    return results\n      .sort((a, b) => (b.aiScore || 0) - (a.aiScore || 0))\n      .slice(0, maxResults);\n  } catch (error) {\n    console.error('Jamendo search error:', error);\n    throw new Error('Failed to search Jamendo');\n  }\n}\n\nfunction calculateAIScore(track: JamendoTrack, query: string): number {\n  let score = track.popularity || 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = track.name.toLowerCase();\n  const artistLower = track.artist_name.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nexport async function getTrendingTracks(limit: number = 20): Promise<SearchResult[]> {\n  try {\n    const response = await axios.get('https://api.jamendo.com/v3.0/tracks/', {\n      params: {\n        client_id: JAMENDO_CLIENT_ID,\n        format: 'json',\n        order: 'popularity_total',\n        limit,\n        include: 'musicinfo',\n        audioformat: 'mp32',\n        imagesize: 300,\n      }\n    });\n\n    const tracks: JamendoTrack[] = response.data.results || [];\n    \n    return tracks.map(track => ({\n      id: track.id,\n      title: track.name,\n      artist: track.artist_name,\n      thumbnail: track.image,\n      duration: formatDuration(track.duration),\n      url: track.shareurl,\n      embedUrl: track.audio,\n      publishedAt: track.releasedate,\n      viewCount: Math.floor(track.popularity * 1000),\n      description: `${track.album_name || 'Single'} by ${track.artist_name}`,\n      platform: 'jamendo',\n      downloadUrl: track.audiodownload,\n    }));\n  } catch (error) {\n    console.error('Jamendo trending error:', error);\n    return [];\n  }\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":3930},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"replit.md":{"content":"# Mate - Music Search Engine\n\n## Overview\n\nMate is an AI-powered music search engine that provides a rich music discovery experience through multi-platform search, AI-driven vibe matching, and a modern glassmorphic UI. The application functions as a Google-like search experience for music, enhanced with AI insights and a visually stunning dark mode interface.\n\nThe platform aggregates music from multiple sources including YouTube, SoundCloud, Jamendo, Internet Archive, Mixcloud, and various other music platforms. It features an AI mode that filters and ranks results based on relevance, web search capabilities for music information, and a library management system for playlists and liked songs.\n\n## Recent Changes\n\n### October 18, 2025 - Cloudflare Pages Conversion Complete\n- Converted entire application to work on Cloudflare Pages with zero hosting costs\n- Migrated Express backend to Cloudflare Pages Functions using Hono framework\n- Converted PostgreSQL database to Cloudflare D1 (SQLite-based)\n- All features fully functional: music search, AI mode, web search, library management\n- Created comprehensive deployment guide (CLOUDFLARE_DEPLOY.md)\n- Added database seeding for default user\n- Application now supports three deployment platforms: Cloudflare, Replit, Vercel\n- Cloudflare deployment offers global edge performance with sub-50ms response times\n\n### October 18, 2025 - GitHub Import Setup Complete\n- Successfully extracted project from GitHub import zip file\n- Installed Node.js 20 and all npm dependencies (633 packages)\n- Configured PostgreSQL database using existing DATABASE_URL\n- Pushed database schema to PostgreSQL using Drizzle ORM\n- Set up development workflow running on port 5000\n- Configured autoscale deployment for production publishing\n- Verified frontend loading correctly with glassmorphism UI\n- Application is fully functional and ready to use\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework Stack:**\n- React 18 with TypeScript for type safety\n- Vite as the build tool and development server\n- Wouter for lightweight client-side routing\n- TanStack Query (React Query) for server state management\n- Radix UI primitives for accessible component foundations\n- Tailwind CSS with custom design system for styling\n\n**Design System:**\n- Dark-first design with glassmorphism aesthetic\n- Violet-blue gradient accent colors (270°/240° hues)\n- Custom theme system using CSS variables and shadcn/ui component library\n- Font stack: Inter (body), Poppins (display), JetBrains Mono (code/timestamps)\n- Responsive breakpoints with mobile-first approach\n\n**State Management:**\n- React Query for API data caching and synchronization\n- Local state with React hooks for UI interactions\n- localStorage for persisting user preferences (AI mode, theme)\n- Session-based authentication state\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js for HTTP server and API routes\n- TypeScript for type-safe server code\n- Session-based authentication with express-session\n- PostgreSQL session store using connect-pg-simple\n\n**API Design:**\n- RESTful endpoints under `/api/*` prefix\n- Music search aggregation from multiple sources (parallel API calls)\n- AI-powered search result ranking and filtering\n- Web search integration via DuckDuckGo API\n- Library management (playlists, liked songs) endpoints\n\n**Music Source Integrations:**\n- YouTube (via Google APIs with OAuth)\n- SoundCloud (public API with multiple client IDs for reliability)\n- Jamendo (open music platform)\n- Internet Archive (public domain audio)\n- Mixcloud (DJ mixes and radio shows)\n- iTunes (Apple Music metadata)\n- RapidAPI (Deezer, Spotify data)\n- Additional platforms: StreamSquid, AccuRadio, Jango, Freefy, Nonoki, PlaylistSound\n\n**AI Features:**\n- Free AI APIs for suggestions and vibe matching (fallback chain)\n- Primary: Custom AI API (ai-wtsg.onrender.com)\n- Fallback: Multiple free GPT APIs\n- Puter.js integration for client-side AI chat\n- OpenAI GPT-5 support (optional, requires API key)\n- AI scoring system for result relevance matching\n\n### Data Storage\n\n**Database:**\n- PostgreSQL as primary data store\n- Drizzle ORM for type-safe database queries\n- Schema includes: users, sessions, songs, playlists, playlist_songs, liked_songs\n\n**Session Management:**\n- Database-backed sessions (sessions table)\n- 7-day session TTL with automatic cleanup\n- Secure cookie configuration (httpOnly, secure flags)\n\n**Data Models:**\n- Users: Stores profile information and OAuth data\n- Songs: Cached metadata from various music platforms\n- Playlists: User-created collections with songs\n- Liked Songs: User favorites tracking\n\n### Authentication & Authorization\n\n**Authentication Methods:**\n- Optional Replit OIDC authentication (for Replit deployments)\n- Passport.js with OpenID Connect strategy\n- Environment-based auth activation (REPLIT_ENV flag)\n- Fallback to no-auth mode when credentials absent\n\n**Session Security:**\n- SESSION_SECRET for cookie signing\n- Secure cookie transmission (HTTPS only in production)\n- CSRF protection through same-site cookies\n\n### Build & Deployment\n\n**Development Workflow:**\n- Vite dev server on port 5000\n- Hot module replacement (HMR) via WebSocket\n- TypeScript compilation with incremental builds\n- Database migrations via Drizzle Kit\n\n**Production Build:**\n- Vite builds static assets to `dist/public`\n- Express server serves built frontend\n- API routes handled by serverless functions (Vercel) or Express\n\n**Deployment Targets:**\n- Replit: Autoscale deployment with DATABASE_URL from environment\n- Vercel: Serverless functions with static site hosting\n- Build output: `dist/public` for static assets, `api/index.ts` for serverless\n\n## External Dependencies\n\n### Required Services\n\n**Database:**\n- PostgreSQL (version 12+)\n- Can be Replit Postgres, Vercel Postgres, Neon, Supabase, or any PostgreSQL provider\n- Connection via DATABASE_URL environment variable\n\n### Optional API Keys\n\n**Music Search (at least one recommended):**\n- YouTube Data API v3 (YOUTUBE_API_KEY) - Best coverage\n- SoundCloud API (SOUNDCLOUD_CLIENT_ID) - Alternative source\n- RapidAPI (RAPIDAPI_KEY) - Deezer/Spotify integration\n- Jamendo (JAMENDO_CLIENT_ID) - Defaults to public client ID\n\n**AI Features (optional):**\n- OpenAI API (OPENAI_API_KEY) - For GPT-5 vibe matching\n- Falls back to free AI APIs if not provided\n\n**Authentication (Replit only):**\n- ISSUER_URL - OIDC issuer endpoint\n- REPL_ID - Replit app identifier\n- CLIENT_ID - OAuth client credentials\n- REPLIT_DOMAINS - Allowed authentication domains\n\n### Third-Party Services\n\n**Music APIs:**\n- YouTube Data API v3 (Google Cloud)\n- SoundCloud Public API\n- Jamendo Music API\n- Internet Archive Advanced Search\n- Mixcloud API\n- iTunes Search API\n- DuckDuckGo Instant Answer API\n\n**AI Services:**\n- Free AI APIs (ai-wtsg.onrender.com, free-unoficial-gpt4o-mini-api)\n- Puter.js (client-side AI via puter.com)\n- OpenAI API (optional premium feature)\n\n**Lyrics Services:**\n- lyrics.ovh API\n- some-random-api.com (lyrics endpoint)\n\n**Infrastructure:**\n- Vercel (deployment platform)\n- Replit (development and hosting platform)\n- Google Fonts (Inter, Poppins, JetBrains Mono)","size_bytes":7224},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"functions/api/[[path]].ts":{"content":"import { Hono } from 'hono';\nimport { cors } from 'hono/cors';\n\ntype Env = {\n  DB: D1Database;\n  YOUTUBE_API_KEY?: string;\n  SOUNDCLOUD_CLIENT_ID?: string;\n  OPENAI_API_KEY?: string;\n};\n\nconst app = new Hono<{ Bindings: Env }>();\n\napp.use('/*', cors());\n\napp.get('/api/web-search', async (c) => {\n  try {\n    const query = c.req.query('q');\n    \n    if (!query || typeof query !== 'string' || !query.trim()) {\n      return c.json({ error: 'Missing or invalid query' }, 400);\n    }\n\n    const searchUrl = `https://api.duckduckgo.com/?q=${encodeURIComponent(query + ' music')}&format=json&no_html=1&skip_disambig=1`;\n    \n    try {\n      const response = await fetch(searchUrl);\n      const data: any = await response.json();\n      \n      const results = [];\n      \n      if (data.Abstract && data.AbstractURL) {\n        results.push({\n          title: data.Heading || query,\n          url: data.AbstractURL,\n          description: data.Abstract\n        });\n      }\n      \n      if (data.RelatedTopics && Array.isArray(data.RelatedTopics)) {\n        for (const topic of data.RelatedTopics.slice(0, 5)) {\n          if (topic.Text && topic.FirstURL) {\n            results.push({\n              title: topic.Text.split(' - ')[0] || topic.Text,\n              url: topic.FirstURL,\n              description: topic.Text\n            });\n          }\n        }\n      }\n      \n      if (results.length === 0) {\n        results.push({\n          title: `${query} - Music Search`,\n          url: `https://www.google.com/search?q=${encodeURIComponent(query + ' music')}`,\n          description: `Search for music-related information about \"${query}\"`\n        });\n      }\n      \n      return c.json(results);\n    } catch (apiError) {\n      console.error('[WEB-SEARCH] API Error:', apiError);\n      return c.json([{\n        title: `${query} - Music Search`,\n        url: `https://www.google.com/search?q=${encodeURIComponent(query + ' music')}`,\n        description: `Search for music-related information about \"${query}\"`\n      }]);\n    }\n  } catch (e) {\n    console.error('[WEB-SEARCH] Error:', e);\n    return c.json({ error: 'Web search failed' }, 500);\n  }\n});\n\napp.get('/api/search', async (c) => {\n  try {\n    const query = c.req.query('q');\n    const sortBy = c.req.query('sortBy') || 'relevance';\n    const platformFilter = c.req.query('platform') || 'all';\n    const aiMode = c.req.query('aiMode') === 'true';\n    \n    if (!query || typeof query !== 'string' || !query.trim()) {\n      return c.json({ error: 'Missing or invalid query' }, 400);\n    }\n\n    const [searchJamendo, searchSoundCloud, searchYouTube, searchInternetArchive, searchMixcloud] = await Promise.all([\n      import('./lib/jamendo').then(m => m.searchJamendo),\n      import('./lib/soundcloud').then(m => m.searchSoundCloud),\n      import('./lib/youtube').then(m => m.searchYouTube),\n      import('./lib/internet-archive').then(m => m.searchInternetArchive),\n      import('./lib/mixcloud').then(m => m.searchMixcloud),\n    ]);\n\n    const [jamendo, soundcloud, youtube, internetArchive, mixcloud] = await Promise.all([\n      searchJamendo(query, 12, c.env).catch((err: any) => { console.error('Jamendo error:', err.message); return []; }),\n      searchSoundCloud(query, 12, c.env).catch((err: any) => { console.error('SoundCloud error:', err.message); return []; }),\n      searchYouTube(query, 12, c.env).catch((err: any) => { console.error('YouTube error:', err.message); return []; }),\n      searchInternetArchive(query, 12).catch((err: any) => { console.error('Internet Archive error:', err.message); return []; }),\n      searchMixcloud(query, 12).catch((err: any) => { console.error('Mixcloud error:', err.message); return []; }),\n    ]);\n    \n    let results = [\n      ...jamendo,\n      ...soundcloud,\n      ...youtube,\n      ...internetArchive,\n      ...mixcloud,\n    ].map(r => {\n      const rec: any = r;\n      return {\n        ...r,\n        platform: rec.platform || rec.source || 'unknown',\n        description: rec.description || '',\n        aiScore: rec.aiScore || 0,\n      };\n    });\n\n    console.log(`[SEARCH] Query: \"${query}\", Results before filtering: ${results.length}, AI Mode: ${aiMode}`);\n\n    let filtered = results.filter((r: any) => {\n      const url = (r.url || '').toLowerCase();\n      const isMusicSite = url.includes('jamendo.com') || url.includes('youtube.com') || url.includes('youtu.be') || url.includes('soundcloud.com') || url.includes('archive.org') || url.includes('mixcloud.com');\n      const isPublic = isMusicSite && !url.includes('login') && !url.includes('signin');\n      return isPublic;\n    });\n\n    if (platformFilter !== 'all') {\n      filtered = filtered.filter((r: any) => r.platform === platformFilter);\n    }\n\n    console.log(`[SEARCH] After filtering: ${filtered.length} results, Platform: ${platformFilter}, SortBy: ${sortBy}`);\n\n    if (aiMode) {\n      filtered.sort((a: any, b: any) => (b.aiScore || 0) - (a.aiScore || 0));\n      filtered = filtered.slice(0, 3);\n      filtered = filtered.sort(() => Math.random() - 0.5);\n      console.log(`[SEARCH] AI Mode: Returning top 3 results in random order with AI scores:`, filtered.map((r: any) => ({ title: r.title, score: r.aiScore })));\n    } else {\n      if (sortBy === 'newest') {\n        filtered.sort((a: any, b: any) => {\n          const dateA = new Date(a.publishedAt || 0).getTime();\n          const dateB = new Date(b.publishedAt || 0).getTime();\n          return dateB - dateA;\n        });\n      } else if (sortBy === 'popularity') {\n        filtered.sort((a: any, b: any) => {\n          const viewsA = a.viewCount || 0;\n          const viewsB = b.viewCount || 0;\n          return viewsB - viewsA;\n        });\n      } else if (sortBy === 'publicDomain') {\n        filtered = filtered.filter((r: any) => r.platform === 'jamendo');\n      } else {\n        filtered.sort((a: any, b: any) => (b.aiScore || 0) - (a.aiScore || 0));\n      }\n    }\n\n    return c.json(filtered);\n  } catch (e) {\n    console.error('[SEARCH] Error:', e);\n    return c.json({ error: 'Search failed' }, 500);\n  }\n});\n\napp.get('/api/song-info', async (c) => {\n  try {\n    const query = c.req.query('q');\n    \n    if (!query) {\n      return c.json({ error: \"Query parameter is required\" }, 400);\n    }\n\n    const queryParts = query.split(/[-–—]/);\n    let artist = \"\";\n    let track = \"\";\n    let thumbnail = \"\";\n    let duration = \"\";\n    let platform = \"\";\n    let lyrics: string | null = null;\n    \n    if (queryParts.length >= 2) {\n      artist = queryParts[0].trim();\n      track = queryParts[1].trim();\n    } else {\n      track = query.trim();\n    }\n\n    const { searchYouTube } = await import('./lib/youtube');\n    try {\n      const youtubeResults = await searchYouTube(query, 1, c.env);\n      if (youtubeResults.length > 0) {\n        const firstResult = youtubeResults[0];\n        if (!artist) artist = firstResult.artist || \"\";\n        if (!track && firstResult.title) track = firstResult.title;\n        thumbnail = firstResult.thumbnail || \"\";\n        duration = firstResult.duration || \"\";\n        platform = firstResult.platform || \"YouTube\";\n      }\n    } catch (error) {\n      console.log(\"YouTube fetch failed, continuing with lyrics only:\", error);\n    }\n\n    if (artist && track) {\n      try {\n        const lyricsUrl = `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(track)}`;\n        const response = await fetch(lyricsUrl);\n        if (response.ok) {\n          const data: any = await response.json();\n          if (data.lyrics) {\n            lyrics = data.lyrics;\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching lyrics from lyrics.ovh:\", error);\n      }\n    }\n    \n    if (!lyrics) {\n      try {\n        const searchUrl = `https://some-random-api.com/others/lyrics?title=${encodeURIComponent(query)}`;\n        const response = await fetch(searchUrl);\n        if (response.ok) {\n          const data: any = await response.json();\n          if (data.lyrics && data.title && data.author) {\n            if (!artist) artist = data.author;\n            if (!track) track = data.title;\n            lyrics = data.lyrics;\n          }\n        }\n      } catch (error) {\n        console.error(\"Error fetching from some-random-api:\", error);\n      }\n    }\n\n    return c.json({\n      artist: artist || \"Unknown Artist\",\n      track: track || query,\n      thumbnail,\n      duration,\n      platform,\n      lyrics: lyrics || \"Lyrics not available for this song.\",\n    });\n  } catch (error) {\n    console.error(\"Error in song-info route:\", error);\n    return c.json({ error: \"Internal server error\" }, 500);\n  }\n});\n\napp.post(\"/api/ai/suggestions\", async (c) => {\n  try {\n    const { userHistory } = await c.req.json();\n    const { getMusicSuggestions } = await import(\"./lib/ai-suggestions\");\n    const suggestions = await getMusicSuggestions(userHistory || []);\n    return c.json({ suggestions });\n  } catch (e) {\n    return c.json({ error: \"AI suggestion error\" }, 500);\n  }\n});\n\napp.post(\"/api/ai/search-suggestions\", async (c) => {\n  try {\n    const { currentInput, userHistory } = await c.req.json();\n    const { getSearchSuggestions } = await import(\"./lib/ai-suggestions\");\n    const suggestions = await getSearchSuggestions(currentInput || \"\", userHistory || []);\n    return c.json({ suggestions });\n  } catch (e) {\n    return c.json({ error: \"AI search suggestion error\" }, 500);\n  }\n});\n\napp.post(\"/api/ai/command\", async (c) => {\n  try {\n    const { command } = await c.req.json();\n    if (!command || typeof command !== \"string\") {\n      return c.json({ error: \"Missing command\" }, 400);\n    }\n    const { freegptChat } = await import(\"./lib/freegpt\");\n    const prompt = `You are a world-class AI assistant for a music app. You answer ANY question about the music industry, including:\\n\\n- Artist news, biographies, and life stories (past and present)\\n- Music history, genres, and movements (from the 19th century to today)\\n- Songs, albums, and their stories\\n- Record labels, producers, and the business of music\\n- Lyrics, songwriting, and composition\\n- Music technology, instruments, and production\\n- Music awards, charts, and records\\n- Anything factual, creative, or newsworthy about music\\n\\nIf the user asks about anything outside the music world, politely refuse and say you only answer music-related questions. If the user asks for music, search, play, or playlist actions, suggest an action in JSON: { action: '...' }.\\n\\nUser: ${command}`;\n    const reply = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a world-class AI assistant for a music app. You answer ANY question about the music industry, including artist news, biographies, music history, genres, songs, albums, record labels, lyrics, and more. If the user asks about anything outside the music world, politely refuse and say you only answer music-related questions.\" },\n        { role: \"user\", content: prompt },\n      ],\n      max_tokens: 400,\n    });\n    return c.json({ reply });\n  } catch (e) {\n    return c.json({ error: \"AI error\" }, 500);\n  }\n});\n\napp.post(\"/api/vibe-match\", async (c) => {\n  try {\n    const { query } = await c.req.json();\n    if (!query || typeof query !== 'string' || !query.trim()) {\n      return c.json({ error: 'Missing or invalid query' }, 400);\n    }\n    const { freegptChat } = await import(\"./lib/freegpt\");\n    const prompt = `You are a music vibe and trend expert. Given the user's search query, suggest:\\n- 3-5 musical vibes that match the query\\n- 5 trending or similar songs (title and artist)\\n\\nReply in JSON:\\n{\\n  \"vibes\": [\"vibe1\", \"vibe2\", ...],\\n  \"trendingSongs\": [{\"title\": \"...\", \"artist\": \"...\"}, ...]\\n}\\n\\nQuery: ${query}`;\n    const text = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a music vibe and trend expert. Suggest vibes and trending songs for a search query.\" },\n        { role: \"user\", content: prompt },\n      ],\n      max_tokens: 400,\n    });\n    let result = { vibes: [], trendingSongs: [] };\n    try {\n      result = JSON.parse(text);\n    } catch (err) {\n      console.error('Vibe match JSON parse error:', err, text);\n    }\n    return c.json(result);\n  } catch (error) {\n    console.error(\"Vibe match error:\", error);\n    return c.json({ error: \"Vibe matching failed\" }, 500);\n  }\n});\n\nexport const onRequest = app.fetch;\n","size_bytes":12357},"client/src/hooks/useAuth.ts":{"content":"import { useQuery } from \"@tanstack/react-query\";\n\n\n","size_bytes":52},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"functions/api/lib/streamsquid.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface StreamSquidResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchStreamSquid(query: string, maxResults: number = 20): Promise<StreamSquidResult[]> {\n  try {\n    // StreamSquid search - using their public search\n    const url = `https://streamsquid.com/api/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.results || data.tracks || [];\n\n    const results: StreamSquidResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.user?.name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.artwork_url || track.thumbnail || track.image || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.permalink_url || track.url || `https://streamsquid.com/track/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.created_at || new Date().toISOString(),\n        viewCount: track.playback_count || track.plays || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'streamsquid',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('StreamSquid search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2776},"wrangler.toml":{"content":"name = \"mate-music-search\"\ncompatibility_date = \"2025-01-15\"\npages_build_output_dir = \"dist/public\"\n\n[vars]\nNODE_ENV = \"production\"\n\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"mate-music-db\"\ndatabase_id = \"placeholder\"\n\n[env.production]\nvars = { NODE_ENV = \"production\" }\n\n[env.preview]\nvars = { NODE_ENV = \"preview\" }\n","size_bytes":325},"README.md":{"content":"# Mate - Music Search Engine\n\n## Project Overview\nMate is an AI-powered music search engine designed to provide a rich and interactive music discovery experience. It features multi-platform search, AI-driven vibe matching, and a beautiful modern user interface with glassmorphism effects.\n\n**Purpose:** A Google-like search experience for music, enriched with AI insights and stunning UI.\n\n**Current State:** Fully operational development environment on Replit with database configured and server running on port 5000.\n\n## Deployment Options\n\nThis application supports multiple deployment platforms:\n\n### 🌐 Cloudflare Pages (Recommended)\n- **Zero additional hosting costs** - Runs entirely on Cloudflare's free tier\n- **Global edge network** - Ultra-fast performance worldwide\n- **Static site + serverless functions** - All features work perfectly\n- **Cloudflare D1 database** - Built-in SQLite database\n- **See:** [CLOUDFLARE_DEPLOY.md](./CLOUDFLARE_DEPLOY.md) for complete deployment guide\n\n### 🔧 Replit\n- **Quick development** - One-click deploy with built-in database\n- **PostgreSQL included** - No external database needed\n- **Already configured** - Ready to run out of the box\n\n### ⚡ Vercel\n- **Serverless deployment** - Vercel Functions for API routes\n- **External database** - Requires PostgreSQL (Neon, Vercel Postgres, etc.)\n- **See:** [VERCEL_SETUP_GUIDE.md](./VERCEL_SETUP_GUIDE.md) for details\n\n## Recent Changes\n\n### October 18, 2025 - Cloudflare Pages Support Added\n- ✅ Converted Express backend to Cloudflare Pages Functions using Hono framework\n- ✅ Migrated PostgreSQL schema to Cloudflare D1 (SQLite)\n- ✅ Created Cloudflare-compatible API routes for all features\n- ✅ All functionality works: music search, AI mode, library management\n- ✅ Added comprehensive deployment guide ([CLOUDFLARE_DEPLOY.md](./CLOUDFLARE_DEPLOY.md))\n- ✅ Zero additional hosting costs - runs entirely on Cloudflare free tier\n- ✅ Global edge performance with sub-50ms response times\n\n### October 17, 2025 - GitHub Import Setup for Replit & Vercel\n- ✅ Successfully extracted and configured GitHub import in Replit environment\n- ✅ Installed Node.js 20 and all npm dependencies (633 packages)\n- ✅ Configured PostgreSQL database using existing DATABASE_URL\n- ✅ Pushed database schema to PostgreSQL using Drizzle ORM\n- ✅ Configured development workflow running on port 5000\n- ✅ Set up autoscale deployment configuration for Replit deployments\n- ✅ Verified frontend loading with glassmorphism UI and violet/blue theme\n- ✅ All core features operational: music search, AI mode, web search, library management\n\n**Database Configuration:**\n- Database setup is **universal** - works seamlessly on both Replit and Vercel\n- Uses `DATABASE_URL` environment variable (automatically provided by Replit)\n- For Vercel: Simply set DATABASE_URL to your PostgreSQL provider (Neon, Vercel Postgres, etc.)\n- Schema is automatically applied with `npm run db:push` - no manual recreation needed\n- See [VERCEL_SETUP_GUIDE.md](./VERCEL_SETUP_GUIDE.md) for Vercel deployment instructions\n\n**AI Features on Vercel:**\n- AI suggestions use free external APIs that may be **unreliable on Vercel**\n- For production: Set `OPENAI_API_KEY` environment variable\n- Core music search works independently of AI features\n\n**Known Issues:**\n- PostCSS warning about missing 'from' option is harmless (Vite internal warning)\n\n### Previous - AI Mode Fix & New Music Sources\n- Fixed AI mode to filter top 3 most accurate results based on search query matching\n- AI mode now displays results in random order (not sorted by score)\n- Added AI scoring to all music sources (Jamendo, Internet Archive, Mixcloud)\n- Improved search speed with parallel API calls\n- Made YouTube and SoundCloud APIs fail gracefully when keys are missing\n- Created integration libraries for: StreamSquid, AccuRadio, Jango, Freefy, Nonoki, PlaylistSound (ready to integrate)\n- Updated search to pass aiMode parameter from both home and search pages\n\n### October 16, 2025 - Replit Environment Setup\n- Extracted project from GitHub import zip archive\n- Installed Node.js 20 and all npm dependencies\n- Configured PostgreSQL database with Drizzle ORM\n- Fixed Vite configuration issue with async config resolution in server/vite.ts\n- Set up development workflow running on port 5000\n- Configured deployment settings for autoscale deployment\n- Updated .gitignore to properly track Replit configuration files\n\n### October 9, 2025 - Web Search and SoundCloud Improvements\n- Removed inbuilt music player (users now click song links to play on original platforms)\n- Removed iTunes from search aggregation\n- Fixed SoundCloud integration with multiple fallback client IDs\n- Added web search with \"/\" prefix using DuckDuckGo API\n- Updated AI mode indicator and guidance text\n- Improved search results with clean card-based layout\n\n## Project Architecture\n\n### Technology Stack\n- **Frontend:** React 18 + TypeScript + Vite\n- **Styling:** Tailwind CSS with custom glassmorphism design\n- **Animations:** Framer Motion\n- **Backend:** Express.js + TypeScript\n- **Database:** PostgreSQL with Drizzle ORM\n- **State Management:** TanStack React Query\n- **Routing:** Wouter\n\n### Directory Structure\n```\n/\n├── client/              # React frontend application\n│   ├── src/\n│   │   ├── components/  # React components including UI components\n│   │   ├── hooks/       # Custom React hooks\n│   │   ├── lib/         # Utility libraries and helpers\n│   │   ├── pages/       # Page components (home, search, about, contact)\n│   │   ├── App.tsx      # Main app component\n│   │   └── main.tsx     # Entry point\n│   └── index.html       # HTML template\n├── server/              # Express backend\n│   ├── db/              # Database schema and configuration\n│   ├── lib/             # Backend utilities and API integrations\n│   ├── routes/          # API route handlers\n│   ├── index.ts         # Server entry point\n│   ├── routes.ts        # Route registration\n│   └── vite.ts          # Vite middleware setup\n├── shared/              # Shared TypeScript types and schemas\n├── attached_assets/     # Static assets (images)\n└── api/                 # Vercel API routes (for deployment)\n```\n\n### Key Features\n1. **Multi-Platform Search:** Jamendo (free), Internet Archive (free), Mixcloud (free), YouTube (API key), SoundCloud (API key)\n2. **AI Vibe Match:** Identifies musical vibes from humming using OpenAI GPT-5 and Whisper API\n3. **Advanced Filtering:** Sort by relevance, newest, popularity, or public domain\n4. **Web Search:** Use \"/\" prefix to search for music-related articles\n5. **Library Management:** Playlists, liked songs, saved songs with CRUD operations\n6. **Lyrics Display:** Multiple API fallbacks for fetching and displaying lyrics\n7. **AI Mode:** Google-like featured snippets alongside music results\n\n### Design System\n- **Primary Colors:** Violet (270° 60% 55%) and Blue (240° 70% 50%)\n- **Background:** Deep violet-blue (230° 35% 8%)\n- **Typography:** Inter (body), Poppins (display), JetBrains Mono (mono)\n- **Effects:** Glassmorphism with backdrop-blur, gradient animations\n\n## External Dependencies & APIs\n\n### Required API Keys (Configure in Replit Secrets)\n- `YOUTUBE_API_KEY` - YouTube Data API v3 for music search\n- `OPENAI_API_KEY` - OpenAI GPT-5 & Whisper API for AI vibe matching\n- `SOUNDCLOUD_CLIENT_ID` - SoundCloud API for search and playback\n\n### Third-Party Services\n- **Puter.js:** Free, unlimited AI access for frontend AI capabilities (GPT-5-nano)\n- **lyrics.ovh API:** Primary API for fetching song lyrics\n- **some-random-api.com:** Fallback API for lyrics\n- **DuckDuckGo API:** Web search functionality with \"/\" prefix\n- **https://ai-wtsg.onrender.com/chat/:** External AI API for dynamic music queries\n- **https://free-unoficial-gpt4o-mini-api-g70n.onrender.com/chat/:** Free GPT-4o Mini endpoint\n\n### Database Schema\n- **users:** User authentication and profile data\n- **songs:** Song metadata (platform-agnostic storage)\n- **playlists:** User-created playlists\n- **playlist_songs:** Many-to-many relationship between playlists and songs\n- **liked_songs:** User's liked songs\n- **saved_songs:** User's saved songs for later\n- **sessions:** Express session storage\n\n## Development\n\n### Running Locally\nThe project is configured to run automatically via the \"Server\" workflow:\n```bash\nnpm run dev\n```\nThis starts the Express server with Vite middleware on port 5000.\n\n### Database Management\n```bash\n# Push schema changes to database\nnpm run db:push\n\n# Run TypeScript type checking\nnpm run check\n```\n\n### Building for Production\n```bash\nnpm run build\n```\n\n## Deployment\n\n### Deployment Configuration\n- **Type:** Autoscale (stateless web application)\n- **Build Command:** `npm run build`\n- **Run Command:** `npm run start`\n- **Port:** 5000 (configured in server/index.ts)\n\n### Environment Variables\n- `DATABASE_URL` - PostgreSQL connection string (auto-configured by Replit)\n- `NODE_ENV` - Set to \"development\" or \"production\"\n- API keys for external services (see Required API Keys section)\n\n## User Preferences\n- Prefer simple language and clear, concise explanations\n- Iterative development with small, testable changes\n- Ask before making major architectural changes or introducing new dependencies\n- Do not modify `shared/schema.ts` without explicit approval\n\n## Notes\n- The Vite configuration properly sets `allowedHosts: true` for Replit's proxy environment\n- Frontend binds to `0.0.0.0:5000` to work with Replit's preview system\n- HMR is configured with WSS protocol and port 443 for secure hot reloading\n- The server uses `reusePort: true` for better performance\n- Vite config resolution was fixed to handle async config functions properly\n","size_bytes":9868},"server/db/index.ts":{"content":"import { drizzle } from \"drizzle-orm/postgres-js\";\nimport postgres from \"postgres\";\nimport * as schema from \"./schema\";\n\nlet db: ReturnType<typeof drizzle<typeof schema>> | null = null;\n\nexport function getDb() {\n  if (!db) {\n    if (!process.env.DATABASE_URL) {\n      throw new Error(\"DATABASE_URL environment variable is not set\");\n    }\n    const client = postgres(process.env.DATABASE_URL);\n    db = drizzle(client, { schema });\n  }\n  return db;\n}\n\nexport { schema };\n","size_bytes":472},"server/lib/freefy.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface FreefyResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchFreefy(query: string, maxResults: number = 20): Promise<FreefyResult[]> {\n  try {\n    // Freefy.app search\n    const url = `https://api.freefy.app/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.tracks || data.results || [];\n\n    const results: FreefyResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.artist_name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.cover || track.thumbnail || track.image || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.url || `https://freefy.app/track/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.release_date || new Date().toISOString(),\n        viewCount: track.plays || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'freefy',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Freefy search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2657},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/vibe-match-modal.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { X, Mic, StopCircle, Sparkles } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { VibeMatchResult } from \"@shared/schema\";\nimport { useLocation } from \"wouter\";\n\ninterface VibeMatchModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function VibeMatchModal({ open, onOpenChange }: VibeMatchModalProps) {\n  const [, setLocation] = useLocation();\n  const [isRecording, setIsRecording] = useState(false);\n  const [audioLevel, setAudioLevel] = useState(0);\n  const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n  const audioChunksRef = useRef<Blob[]>([]);\n  const canvasRef = useRef<HTMLCanvasElement>(null);\n  const animationFrameRef = useRef<number>();\n  const analyserRef = useRef<AnalyserNode | null>(null);\n\n  const vibeMatchMutation = useMutation<VibeMatchResult, Error, string>({\n    mutationFn: async (audioData: string) => {\n      return await apiRequest(\"POST\", \"/api/vibe-match\", { audioData }) as Promise<VibeMatchResult>;\n    },\n  });\n\n  const startRecording = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n      const mediaRecorder = new MediaRecorder(stream);\n      mediaRecorderRef.current = mediaRecorder;\n      audioChunksRef.current = [];\n\n      // Set up audio visualization\n      const audioContext = new AudioContext();\n      const source = audioContext.createMediaStreamSource(stream);\n      const analyser = audioContext.createAnalyser();\n      analyser.fftSize = 256;\n      source.connect(analyser);\n      analyserRef.current = analyser;\n\n      mediaRecorder.ondataavailable = (event) => {\n        audioChunksRef.current.push(event.data);\n      };\n\n      mediaRecorder.onstop = async () => {\n        const audioBlob = new Blob(audioChunksRef.current, { type: \"audio/webm\" });\n        const reader = new FileReader();\n        reader.readAsDataURL(audioBlob);\n        reader.onloadend = () => {\n          const base64Audio = (reader.result as string).split(\",\")[1];\n          vibeMatchMutation.mutate(base64Audio);\n        };\n        \n        stream.getTracks().forEach(track => track.stop());\n      };\n\n      mediaRecorder.start();\n      setIsRecording(true);\n      visualize();\n    } catch (error) {\n      console.error(\"Error accessing microphone:\", error);\n    }\n  };\n\n  const stopRecording = () => {\n    if (mediaRecorderRef.current && isRecording) {\n      mediaRecorderRef.current.stop();\n      setIsRecording(false);\n      if (animationFrameRef.current) {\n        cancelAnimationFrame(animationFrameRef.current);\n      }\n    }\n  };\n\n  const visualize = () => {\n    if (!analyserRef.current || !canvasRef.current) return;\n\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext(\"2d\");\n    if (!ctx) return;\n\n    const analyser = analyserRef.current;\n    const bufferLength = analyser.frequencyBinCount;\n    const dataArray = new Uint8Array(bufferLength);\n\n    const draw = () => {\n      animationFrameRef.current = requestAnimationFrame(draw);\n      analyser.getByteFrequencyData(dataArray);\n\n      ctx.fillStyle = \"rgba(0, 0, 0, 0.1)\";\n      ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n      const barWidth = (canvas.width / bufferLength) * 2.5;\n      let x = 0;\n\n      for (let i = 0; i < bufferLength; i++) {\n        const barHeight = (dataArray[i] / 255) * canvas.height;\n        \n        const gradient = ctx.createLinearGradient(0, canvas.height - barHeight, 0, canvas.height);\n        gradient.addColorStop(0, \"rgb(139, 92, 246)\");\n        gradient.addColorStop(1, \"rgb(59, 130, 246)\");\n        \n        ctx.fillStyle = gradient;\n        ctx.fillRect(x, canvas.height - barHeight, barWidth, barHeight);\n\n        x += barWidth + 1;\n      }\n\n      const avgLevel = dataArray.reduce((a, b) => a + b) / bufferLength;\n      setAudioLevel(avgLevel / 255);\n    };\n\n    draw();\n  };\n\n  const handleSearchVibe = (searchTerm: string) => {\n    onOpenChange(false);\n    setLocation(`/search?q=${encodeURIComponent(searchTerm)}`);\n  };\n\n  useEffect(() => {\n    if (!open) {\n      stopRecording();\n      vibeMatchMutation.reset();\n    }\n  }, [open]);\n\n  if (!open) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/80 backdrop-blur-md z-50 transition-opacity\"\n        onClick={() => onOpenChange(false)}\n      />\n\n      {/* Modal */}\n      <div className=\"fixed inset-0 z-50 flex items-center justify-center p-6 pointer-events-none\">\n        <div className=\"glass-elevated rounded-2xl max-w-2xl w-full p-8 pointer-events-auto animate-in fade-in zoom-in-95 duration-300\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-8\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-10 h-10 rounded-full bg-gradient-to-r from-violet-500 to-blue-500 flex items-center justify-center\">\n                <Sparkles className=\"w-5 h-5 text-white\" />\n              </div>\n              <div>\n                <h2 className=\"text-2xl font-display font-semibold\">Vibe Match</h2>\n                <p className=\"text-sm text-muted-foreground\">Hum a tune and find similar songs</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-vibe-match\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Visualization */}\n          <div className=\"relative mb-8\">\n            <canvas\n              ref={canvasRef}\n              width={600}\n              height={200}\n              className=\"w-full h-48 rounded-xl bg-black/20\"\n            />\n            {!isRecording && !vibeMatchMutation.data && (\n              <div className=\"absolute inset-0 flex items-center justify-center\">\n                <p className=\"text-muted-foreground\">Click the microphone to start</p>\n              </div>\n            )}\n          </div>\n\n          {/* Recording control */}\n          <div className=\"flex justify-center mb-8\">\n            {!isRecording ? (\n              <Button\n                size=\"lg\"\n                onClick={startRecording}\n                disabled={vibeMatchMutation.isPending}\n                className={`w-20 h-20 rounded-full bg-gradient-to-r from-violet-500 to-blue-500 hover:from-violet-600 hover:to-blue-600 ${\n                  vibeMatchMutation.isPending ? \"animate-pulse\" : \"\"\n                }`}\n                data-testid=\"button-start-recording\"\n              >\n                <Mic className=\"w-8 h-8\" />\n              </Button>\n            ) : (\n              <Button\n                size=\"lg\"\n                onClick={stopRecording}\n                className={`w-20 h-20 rounded-full bg-red-500 hover:bg-red-600 ${\n                  audioLevel > 0.3 ? \"animate-pulse-glow\" : \"\"\n                }`}\n                data-testid=\"button-stop-recording\"\n              >\n                <StopCircle className=\"w-8 h-8\" />\n              </Button>\n            )}\n          </div>\n\n          {/* Results */}\n          {vibeMatchMutation.isPending && (\n            <div className=\"text-center space-y-2\">\n              <div className=\"w-8 h-8 border-4 border-violet-500 border-t-transparent rounded-full animate-spin mx-auto\" />\n              <p className=\"text-sm text-muted-foreground\">Analyzing your vibe...</p>\n            </div>\n          )}\n\n          {vibeMatchMutation.data && (\n            <div className=\"space-y-6 animate-in fade-in slide-in-from-bottom-4 duration-300\">\n              {/* Detected vibes */}\n              {vibeMatchMutation.data.vibes.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-display font-medium\">Detected Vibes</h3>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {vibeMatchMutation.data.vibes.slice(0, 5).map((vibe, index) => (\n                      <Badge\n                        key={index}\n                        variant=\"secondary\"\n                        className=\"bg-violet-500/20 text-violet-300 border-violet-500/30 px-3 py-1\"\n                        data-testid={`badge-vibe-${index}`}\n                      >\n                        {vibe.name} ({Math.round(vibe.confidence * 100)}%)\n                      </Badge>\n                    ))}\n                  </div>\n                </div>\n              )}\n\n              {/* Search suggestions */}\n              {vibeMatchMutation.data.suggestedSearchTerms.length > 0 && (\n                <div className=\"space-y-3\">\n                  <h3 className=\"font-display font-medium\">Try Searching For</h3>\n                  <div className=\"grid grid-cols-2 gap-2\">\n                    {vibeMatchMutation.data.suggestedSearchTerms.slice(0, 4).map((term, index) => (\n                      <Button\n                        key={index}\n                        variant=\"outline\"\n                        onClick={() => handleSearchVibe(term)}\n                        className=\"justify-start glass hover:bg-violet-500/20\"\n                        data-testid={`button-search-suggestion-${index}`}\n                      >\n                        {term}\n                      </Button>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n\n          {vibeMatchMutation.isError && (\n            <div className=\"text-center text-destructive\">\n              <p>Failed to analyze vibe. Please try again.</p>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":9813},"server/lib/accuradio.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface AccuRadioResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchAccuRadio(query: string, maxResults: number = 20): Promise<AccuRadioResult[]> {\n  try {\n    // AccuRadio channel/station search\n    const url = `https://www.accuradio.com/api/search?query=${encodeURIComponent(query)}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const channels = data.channels || data.results || [];\n\n    const results: AccuRadioResult[] = channels.slice(0, maxResults).map((channel: any) => {\n      const title = channel.name || channel.title || 'Unknown Channel';\n      const artist = 'AccuRadio';\n      \n      return {\n        id: channel.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: channel.image_url || channel.thumbnail || 'https://www.accuradio.com/images/logo.png',\n        duration: 'Live Stream',\n        url: channel.url || `https://www.accuradio.com/${channel.id}`,\n        embedUrl: channel.stream_url || channel.url || '',\n        publishedAt: new Date().toISOString(),\n        viewCount: channel.listeners || 0,\n        description: channel.description || `${title} - Online radio station`,\n        platform: 'accuradio',\n        aiScore: calculateAIScore(title, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('AccuRadio search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (titleLower === queryLower) score += 100;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2321},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"drizzle.config.d1.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nexport default defineConfig({\n  out: \"./migrations/d1\",\n  schema: \"./server/db/schema.d1.ts\",\n  dialect: \"sqlite\",\n  driver: \"d1-http\",\n});\n","size_bytes":185},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\n// Only require REPLIT_DOMAINS if running on Replit\nif (process.env.REPLIT_ENV === \"true\" && !process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000;\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};\n","size_bytes":4300},"server/storage.ts":{"content":"import { users, type User, type UpsertUser } from \"./db/schema\";\nimport { getDb } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  upsertUser(user: UpsertUser): Promise<User>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const db = getDb();\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const db = getDb();\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":876},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"functions/api/lib/nonoki.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface NonokiResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchNonoki(query: string, maxResults: number = 20): Promise<NonokiResult[]> {\n  try {\n    // Nonoki.com search\n    const url = `https://nonoki.com/api/search?query=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.songs || data.results || [];\n\n    const results: NonokiResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.artist_name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.thumbnail || track.image || track.cover_url || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.url || `https://nonoki.com/song/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.published_at || new Date().toISOString(),\n        viewCount: track.play_count || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'nonoki',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Nonoki search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2668},"functions/api/lib/ai-suggestions.ts":{"content":"import { freegptChat } from \"./freegpt\";\n\nexport async function getMusicSuggestions(userHistory: any[]): Promise<any[]> {\n  try {\n    // Compose a prompt based on user history\n    const prompt = `You are a music recommendation AI. Based on the following user actions (searches, plays, likes), suggest 3 music cards (title, description, query) that would be relevant and interesting.\\nUser history: ${JSON.stringify(userHistory)}\\nReply as a JSON array.`;\n    const text = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a music recommendation AI. Suggest 3 music cards based on user history.\" },\n        { role: \"user\", content: prompt }\n      ],\n      max_tokens: 300,\n      temperature: 0.7,\n    });\n    try {\n      const arr = JSON.parse(text);\n      if (Array.isArray(arr)) return arr;\n    } catch (err) {\n      console.error('AI suggestion JSON parse error:', err, text);\n    }\n    return [];\n  } catch (err) {\n    console.error('AI suggestion error:', err);\n    return [];\n  }\n}\n\nexport async function getSearchSuggestions(currentInput: string, userHistory: any[]): Promise<string[]> {\n  try {\n    const prompt = `You are a smart search suggestion AI for a music app. Given the user's current input and history, suggest 3 full-sentence search queries they might want to try.\\nCurrent input: \"${currentInput}\"\\nUser history: ${JSON.stringify(userHistory)}\\nReply as a JSON array of strings.`;\n    const text = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a search suggestion AI for a music app.\" },\n        { role: \"user\", content: prompt }\n      ],\n      max_tokens: 150,\n      temperature: 0.7,\n    });\n    try {\n      const arr = JSON.parse(text);\n      if (Array.isArray(arr)) return arr;\n    } catch (err) {\n      console.error('AI search suggestion JSON parse error:', err, text);\n    }\n    return [];\n  } catch (err) {\n    console.error('AI search suggestion error:', err);\n    return [];\n  }\n}\n","size_bytes":1978},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { useEffect } from \"react\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"next-themes\";\nimport Home from \"@/pages/home\";\nimport SearchPage from \"@/pages/search\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/search\" component={SearchPage} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider attribute=\"class\" defaultTheme=\"dark\" enableSystem>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1152},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"server/lib/mixcloud.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface MixcloudResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchMixcloud(query: string, maxResults: number = 20): Promise<MixcloudResult[]> {\n  try {\n    // Mixcloud API endpoint\n    const url = `https://api.mixcloud.com/search/?q=${encodeURIComponent(query)}&type=cloudcast&limit=${maxResults}`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`Mixcloud API error: ${response.status}`);\n    }\n\n    const data: any = await response.json();\n    const cloudcasts = data?.data || [];\n\n    const results: MixcloudResult[] = cloudcasts.map((cast: any) => {\n      const durationSeconds = cast.audio_length || 0;\n      const minutes = Math.floor(durationSeconds / 60);\n      const seconds = durationSeconds % 60;\n      const duration = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n      const title = cast.name || 'Unknown';\n      const artist = cast.user?.name || cast.user?.username || 'Unknown Artist';\n\n      return {\n        id: cast.key || cast.slug,\n        title: title,\n        artist: artist,\n        thumbnail: cast.pictures?.large || cast.pictures?.medium || cast.pictures?.thumbnail || '',\n        duration: duration,\n        url: cast.url || `https://www.mixcloud.com${cast.key}`,\n        embedUrl: `https://www.mixcloud.com/widget/iframe/?hide_cover=1&feed=${encodeURIComponent(cast.key || '')}`,\n        publishedAt: cast.created_time || new Date().toISOString(),\n        viewCount: cast.play_count || 0,\n        description: cast.description || `${title} by ${artist}`,\n        platform: 'mixcloud',\n        aiScore: calculateAIScore(title, artist, query, cast.play_count || 0)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Mixcloud search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string, playCount: number): number {\n  let score = Math.min(playCount / 1000, 20); // Normalize play count to max 20 points\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2793},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 98%;\n\n  --foreground: 240 15% 15%;\n\n  --border: 240 8% 88%;\n\n  --card: 240 5% 96%;\n\n  --card-foreground: 240 15% 15%;\n\n  --card-border: 240 8% 90%;\n\n  --sidebar: 240 6% 94%;\n\n  --sidebar-foreground: 240 15% 15%;\n\n  --sidebar-border: 240 8% 86%;\n\n  --sidebar-primary: 270 60% 45%;\n\n  --sidebar-primary-foreground: 270 60% 98%;\n\n  --sidebar-accent: 240 10% 88%;\n\n  --sidebar-accent-foreground: 240 15% 20%;\n\n  --sidebar-ring: 270 60% 55%;\n\n  --popover: 240 8% 92%;\n\n  --popover-foreground: 240 15% 15%;\n\n  --popover-border: 240 8% 84%;\n\n  --primary: 270 60% 45%;\n\n  --primary-foreground: 270 60% 98%;\n\n  --secondary: 240 10% 86%;\n\n  --secondary-foreground: 240 15% 20%;\n\n  --muted: 240 12% 90%;\n\n  --muted-foreground: 240 15% 40%;\n\n  --accent: 240 15% 88%;\n\n  --accent-foreground: 240 15% 20%;\n\n  --destructive: 0 70% 45%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 15% 75%;\n  --ring: 270 60% 55%;\n  --chart-1: 270 60% 45%;\n  --chart-2: 240 70% 50%;\n  --chart-3: 150 60% 45%;\n  --chart-4: 40 90% 50%;\n  --chart-5: 200 65% 48%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', monospace;\n  --font-display: Poppins, sans-serif;\n  --radius: .5rem;\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 60% 10% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 60% 10% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 60% 10% / 0.06), 0px 1px 2px -1px hsl(240 60% 10% / 0.04);\n  --shadow: 0px 4px 6px -1px hsl(240 60% 10% / 0.08), 0px 2px 4px -2px hsl(240 60% 10% / 0.06);\n  --shadow-md: 0px 6px 8px -2px hsl(240 60% 10% / 0.10), 0px 4px 6px -2px hsl(240 60% 10% / 0.08);\n  --shadow-lg: 0px 10px 15px -3px hsl(240 60% 10% / 0.12), 0px 4px 6px -4px hsl(240 60% 10% / 0.08);\n  --shadow-xl: 0px 20px 25px -5px hsl(240 60% 10% / 0.14), 0px 8px 10px -6px hsl(240 60% 10% / 0.10);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 60% 10% / 0.18);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 230 35% 8%;\n\n  --foreground: 0 0% 95%;\n\n  --border: 235 30% 18%;\n\n  --card: 235 30% 12%;\n\n  --card-foreground: 0 0% 95%;\n\n  --card-border: 235 28% 16%;\n\n  --sidebar: 235 32% 10%;\n\n  --sidebar-foreground: 0 0% 95%;\n\n  --sidebar-border: 235 30% 14%;\n\n  --sidebar-primary: 270 60% 55%;\n\n  --sidebar-primary-foreground: 270 60% 98%;\n\n  --sidebar-accent: 240 30% 16%;\n\n  --sidebar-accent-foreground: 0 0% 95%;\n\n  --sidebar-ring: 270 60% 55%;\n\n  --popover: 240 35% 14%;\n\n  --popover-foreground: 0 0% 95%;\n\n  --popover-border: 240 32% 18%;\n\n  --primary: 270 60% 55%;\n\n  --primary-foreground: 270 60% 98%;\n\n  --secondary: 240 25% 18%;\n\n  --secondary-foreground: 0 0% 95%;\n\n  --muted: 240 30% 16%;\n\n  --muted-foreground: 240 15% 50%;\n\n  --accent: 240 35% 15%;\n\n  --accent-foreground: 0 0% 95%;\n\n  --destructive: 0 70% 60%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 240 30% 28%;\n  --ring: 270 60% 55%;\n  --chart-1: 270 60% 65%;\n  --chart-2: 240 70% 60%;\n  --chart-3: 150 60% 50%;\n  --chart-4: 40 90% 60%;\n  --chart-5: 200 65% 58%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(240 80% 5% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(240 80% 5% / 0.30);\n  --shadow-sm: 0px 2px 4px 0px hsl(240 80% 5% / 0.25), 0px 1px 2px -1px hsl(240 80% 5% / 0.20);\n  --shadow: 0px 4px 6px -1px hsl(240 80% 5% / 0.35), 0px 2px 4px -2px hsl(240 80% 5% / 0.25);\n  --shadow-md: 0px 6px 8px -2px hsl(240 80% 5% / 0.40), 0px 4px 6px -2px hsl(240 80% 5% / 0.30);\n  --shadow-lg: 0px 10px 15px -3px hsl(240 80% 5% / 0.45), 0px 4px 6px -4px hsl(240 80% 5% / 0.35);\n  --shadow-xl: 0px 20px 25px -5px hsl(240 80% 5% / 0.50), 0px 8px 10px -6px hsl(240 80% 5% / 0.40);\n  --shadow-2xl: 0px 25px 50px -12px hsl(240 80% 5% / 0.60);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: -1;\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    border-radius: inherit;\n    z-index: 999;\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n\n  /* Gradient animations for Mate music search */\n  @keyframes gradient-shift {\n    0%, 100% {\n      background-position: 0% 50%;\n    }\n    50% {\n      background-position: 100% 50%;\n    }\n  }\n\n  .animate-gradient {\n    background-size: 200% 200%;\n    animation: gradient-shift 8s ease infinite;\n  }\n\n  @keyframes pulse-glow {\n    0%, 100% {\n      box-shadow: 0 0 20px rgba(139, 92, 246, 0.3);\n    }\n    50% {\n      box-shadow: 0 0 40px rgba(139, 92, 246, 0.6);\n    }\n  }\n\n  .animate-pulse-glow {\n    animation: pulse-glow 2s ease-in-out infinite;\n  }\n\n  @keyframes float {\n    0%, 100% {\n      transform: translateY(0px);\n    }\n    50% {\n      transform: translateY(-10px);\n    }\n  }\n\n  .animate-float {\n    animation: float 3s ease-in-out infinite;\n  }\n\n  /* Glass effect utilities */\n  .glass {\n    background: rgba(255, 255, 255, 0.05);\n    backdrop-filter: blur(20px);\n    border: 1px solid rgba(255, 255, 255, 0.1);\n  }\n\n  .glass-elevated {\n    background: rgba(139, 92, 246, 0.15);\n    backdrop-filter: blur(24px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  /* Scrollbar styling */\n  .custom-scrollbar::-webkit-scrollbar {\n    width: 8px;\n    height: 8px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-track {\n    background: rgba(255, 255, 255, 0.05);\n    border-radius: 4px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb {\n    background: rgba(139, 92, 246, 0.5);\n    border-radius: 4px;\n  }\n\n  .custom-scrollbar::-webkit-scrollbar-thumb:hover {\n    background: rgba(139, 92, 246, 0.7);\n  }\n\n  /* Fade in animation for search button */\n  @keyframes fade-in {\n    from {\n      opacity: 0;\n      transform: scale(0.95);\n    }\n    to {\n      opacity: 1;\n      transform: scale(1);\n    }\n  }\n\n  .animate-fade-in {\n    animation: fade-in 0.2s ease-out forwards;\n  }\n\n  /* Loading bar animation */\n  @keyframes loading-bar {\n    0% {\n      transform: translateX(-100%);\n    }\n    100% {\n      transform: translateX(100%);\n    }\n  }\n\n  .animate-loading-bar {\n    animation: loading-bar 1.5s ease-in-out infinite;\n  }\n}","size_bytes":12993},"scripts/seed-d1.sh":{"content":"#!/bin/bash\n\n# Seed Cloudflare D1 database with default user\necho \"Seeding D1 database with default user...\"\n\n# Seed local database\necho \"Seeding local D1...\"\nwrangler d1 execute mate-music-db --local --file=./server/db/seed.sql\n\n# Seed production database\necho \"Seeding production D1...\"\nwrangler d1 execute mate-music-db --file=./server/db/seed.sql\n\necho \"✅ Database seeding complete!\"\n","size_bytes":390},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"server/lib/jamendo.ts":{"content":"import axios from 'axios';\n\nconst JAMENDO_CLIENT_ID = process.env.JAMENDO_CLIENT_ID || 'ecc95144';\n\nexport interface JamendoTrack {\n  id: string;\n  name: string;\n  artist_name: string;\n  album_name: string;\n  duration: number;\n  image: string;\n  audio: string;\n  audiodownload: string;\n  shareurl: string;\n  releasedate: string;\n  popularity: number;\n}\n\nexport interface SearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  downloadUrl?: string;\n  aiScore?: number;\n}\n\nexport async function searchJamendo(query: string, maxResults: number = 20): Promise<SearchResult[]> {\n  try {\n    const response = await axios.get('https://api.jamendo.com/v3.0/tracks/', {\n      params: {\n        client_id: JAMENDO_CLIENT_ID,\n        format: 'json',\n        namesearch: query,\n        limit: maxResults * 2,\n        include: 'musicinfo',\n        audioformat: 'mp32',\n        imagesize: 300,\n      }\n    });\n\n    const tracks: JamendoTrack[] = response.data.results || [];\n    \n    const results = tracks.map(track => ({\n      id: track.id,\n      title: track.name,\n      artist: track.artist_name,\n      thumbnail: track.image || `https://api.jamendo.com/v3.0/albums/artwork/?id=${track.id}&size=300`,\n      duration: formatDuration(track.duration),\n      url: track.shareurl,\n      embedUrl: track.audio,\n      publishedAt: track.releasedate,\n      viewCount: Math.floor(track.popularity * 1000),\n      description: `${track.album_name || 'Single'} by ${track.artist_name}`,\n      platform: 'jamendo',\n      downloadUrl: track.audiodownload,\n      aiScore: calculateAIScore(track, query),\n    }));\n\n    return results\n      .sort((a, b) => (b.aiScore || 0) - (a.aiScore || 0))\n      .slice(0, maxResults);\n  } catch (error) {\n    console.error('Jamendo search error:', error);\n    throw new Error('Failed to search Jamendo');\n  }\n}\n\nfunction calculateAIScore(track: JamendoTrack, query: string): number {\n  let score = track.popularity || 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = track.name.toLowerCase();\n  const artistLower = track.artist_name.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nexport async function getTrendingTracks(limit: number = 20): Promise<SearchResult[]> {\n  try {\n    const response = await axios.get('https://api.jamendo.com/v3.0/tracks/', {\n      params: {\n        client_id: JAMENDO_CLIENT_ID,\n        format: 'json',\n        order: 'popularity_total',\n        limit,\n        include: 'musicinfo',\n        audioformat: 'mp32',\n        imagesize: 300,\n      }\n    });\n\n    const tracks: JamendoTrack[] = response.data.results || [];\n    \n    return tracks.map(track => ({\n      id: track.id,\n      title: track.name,\n      artist: track.artist_name,\n      thumbnail: track.image,\n      duration: formatDuration(track.duration),\n      url: track.shareurl,\n      embedUrl: track.audio,\n      publishedAt: track.releasedate,\n      viewCount: Math.floor(track.popularity * 1000),\n      description: `${track.album_name || 'Single'} by ${track.artist_name}`,\n      platform: 'jamendo',\n      downloadUrl: track.audiodownload,\n    }));\n  } catch (error) {\n    console.error('Jamendo trending error:', error);\n    return [];\n  }\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":3930},"client/src/components/music-player.tsx":{"content":"import { useState, useRef, useEffect } from \"react\";\nimport { Play, Pause, SkipBack, SkipForward, Volume2, X, Heart, Download } from \"lucide-react\";\nimport { SiYoutube, SiSoundcloud } from \"react-icons/si\";\nimport { Button } from \"@/components/ui/button\";\nimport { Slider } from \"@/components/ui/slider\";\nimport { SearchResult } from \"@shared/schema\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\n\ninterface MusicPlayerProps {\n  track: SearchResult;\n  onClose: () => void;\n}\n\ndeclare global {\n  interface Window {\n    YT: any;\n    onYouTubeIframeAPIReady: () => void;\n  }\n}\n\nexport function MusicPlayer({ track, onClose }: MusicPlayerProps) {\n  // Handle direct audio playback for streamUrl\n  useEffect(() => {\n    if (track.streamUrl && audioRef.current) {\n      audioRef.current.volume = volume / 100;\n      if (isPlaying) {\n        audioRef.current.play().catch(() => {});\n      } else {\n        audioRef.current.pause();\n      }\n    }\n    // eslint-disable-next-line\n  }, [track.streamUrl, isPlaying, volume]);\n\n  const [isPlaying, setIsPlaying] = useState(true);\n  const [volume, setVolume] = useState(70);\n  const [isPlayerReady, setIsPlayerReady] = useState(false);\n  const playerRef = useRef<any>(null);\n  const playerContainerRef = useRef<HTMLDivElement>(null);\n  const queryClient = useQueryClient();\n    const audioRef = useRef<HTMLAudioElement>(null);\n\n  const { data: likeStatus } = useQuery<{ isLiked: boolean }>({\n    queryKey: [`/api/songs/${track.id}/is-liked`],\n  });\n\n  const likeMutation = useMutation({\n    mutationFn: async () => {\n      if (likeStatus?.isLiked) {\n        const res = await fetch(`/api/liked-songs/${track.id}`, { method: \"DELETE\" });\n        if (!res.ok) throw new Error(\"Failed to unlike\");\n        return res.json();\n      } else {\n        const res = await fetch(\"/api/liked-songs\", {\n          method: \"POST\",\n          headers: { \"Content-Type\": \"application/json\" },\n          body: JSON.stringify(track),\n        });\n        if (!res.ok) throw new Error(\"Failed to like\");\n        return res.json();\n      }\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [`/api/songs/${track.id}/is-liked`] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/liked-songs\"] });\n    },\n  });\n\n  const handleDownload = () => {\n    if (track.platform.toLowerCase() === \"youtube\") {\n      window.open(`https://ytmp3.as/AOPR/${track.id}`, \"_blank\", \"noopener,noreferrer\");\n    } else {\n      window.open(track.url, \"_blank\", \"noopener,noreferrer\");\n    }\n  };\n\n  // YouTube player setup\n  useEffect(() => {\n    if (track.platform.toLowerCase() === \"youtube\") {\n      if (!window.YT) {\n        const tag = document.createElement('script');\n        tag.src = 'https://www.youtube.com/iframe_api';\n        const firstScriptTag = document.getElementsByTagName('script')[0];\n        firstScriptTag.parentNode?.insertBefore(tag, firstScriptTag);\n      }\n\n      const initPlayer = () => {\n        if (window.YT && window.YT.Player && playerContainerRef.current) {\n          playerRef.current = new window.YT.Player('youtube-player', {\n            videoId: track.id,\n            host: 'https://www.youtube-nocookie.com',\n            playerVars: {\n              autoplay: 1,\n              controls: 0,\n              modestbranding: 1,\n              rel: 0,\n              iv_load_policy: 3,\n              disablekb: 1,\n              fs: 0,\n            },\n            events: {\n              onReady: (event: any) => {\n                setIsPlayerReady(true);\n                event.target.setVolume(volume);\n                event.target.playVideo();\n              },\n              onStateChange: (event: any) => {\n                if (event.data === window.YT.PlayerState.PLAYING) {\n                  setIsPlaying(true);\n                } else if (event.data === window.YT.PlayerState.PAUSED) {\n                  setIsPlaying(false);\n                }\n              },\n            },\n          });\n        }\n      };\n\n      if (window.YT && window.YT.Player) {\n        initPlayer();\n      } else {\n        window.onYouTubeIframeAPIReady = initPlayer;\n      }\n\n      return () => {\n        if (playerRef.current && playerRef.current.destroy) {\n          playerRef.current.destroy();\n        }\n      };\n    }\n  }, [track.id, track.platform]);\n\n  // YouTube volume\n  useEffect(() => {\n    if (track.platform.toLowerCase() === \"youtube\") {\n      if (playerRef.current && isPlayerReady && playerRef.current.setVolume) {\n        playerRef.current.setVolume(volume);\n      }\n    }\n  }, [volume, isPlayerReady, track.platform]);\n\n  // Direct audio playback for streamUrl\n  useEffect(() => {\n    if (track.streamUrl && audioRef.current) {\n      audioRef.current.volume = volume / 100;\n      if (isPlaying) {\n        audioRef.current.play().catch(() => {});\n      } else {\n        audioRef.current.pause();\n      }\n    }\n  }, [track.streamUrl, isPlaying, volume]);\n\n  const togglePlay = () => {\n    if (track.platform.toLowerCase() === \"youtube\") {\n      if (playerRef.current && isPlayerReady) {\n        if (isPlaying) {\n          playerRef.current.pauseVideo();\n        } else {\n          playerRef.current.playVideo();\n        }\n      }\n    } else if (track.streamUrl && audioRef.current) {\n      if (isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        audioRef.current.play().catch(() => {});\n        setIsPlaying(true);\n      }\n    }\n  };\n\n  const handleOpenSource = () => {\n    window.open(track.url, \"_blank\", \"noopener,noreferrer\");\n  };\n\n  return (\n    <div className=\"fixed bottom-0 left-0 right-0 z-50 glass-elevated border-t border-white/20 animate-in slide-in-from-bottom duration-300\">\n      {track.platform.toLowerCase() === \"youtube\" && (\n        <div className=\"absolute w-0 h-0 overflow-hidden opacity-0\">\n          <div ref={playerContainerRef} id=\"youtube-player\" />\n        </div>\n      )}\n      {track.streamUrl && (\n        <audio\n          ref={audioRef}\n          src={track.streamUrl}\n          autoPlay\n          onPlay={() => setIsPlaying(true)}\n          onPause={() => setIsPlaying(false)}\n          onEnded={() => setIsPlaying(false)}\n          style={{ display: 'none' }}\n        />\n      )}\n\n      <div className=\"px-6 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <div className=\"flex items-center gap-4 flex-1 min-w-0\">\n            <img\n              src={track.thumbnail}\n              alt={track.title}\n              className=\"w-16 h-16 rounded-lg object-cover shadow-lg\"\n            />\n            <div className=\"flex-1 min-w-0\">\n              <h3 className=\"font-medium truncate\" data-testid=\"text-player-title\">\n                {track.title}\n              </h3>\n              <p className=\"text-sm text-muted-foreground truncate\" data-testid=\"text-player-artist\">\n                {track.artist}\n              </p>\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled\n              className=\"text-muted-foreground\"\n            >\n              <SkipBack className=\"w-5 h-5\" />\n            </Button>\n            <Button\n              size=\"icon\"\n              onClick={togglePlay}\n              className=\"w-12 h-12 bg-gradient-to-r from-violet-500 to-blue-500 hover:from-violet-600 hover:to-blue-600 shadow-lg shadow-violet-500/50\"\n              data-testid=\"button-play-pause\"\n              disabled={!isPlayerReady && track.platform.toLowerCase() === \"youtube\"}\n            >\n              {isPlaying ? (\n                <Pause className=\"w-6 h-6\" />\n              ) : (\n                <Play className=\"w-6 h-6 ml-0.5\" />\n              )}\n            </Button>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              disabled\n              className=\"text-muted-foreground\"\n            >\n              <SkipForward className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          <div className=\"flex items-center gap-4 flex-1 justify-end\">\n            <div className=\"flex items-center gap-2\">\n              <Volume2 className=\"w-4 h-4 text-muted-foreground\" />\n              <Slider\n                value={[volume]}\n                max={100}\n                step={1}\n                onValueChange={([value]) => setVolume(value)}\n                className=\"w-24\"\n                data-testid=\"slider-volume\"\n              />\n            </div>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => likeMutation.mutate()}\n              className={likeStatus?.isLiked ? \"text-red-400 hover:text-red-300\" : \"text-muted-foreground hover:text-red-400\"}\n              data-testid=\"button-like\"\n              disabled={likeMutation.isPending}\n            >\n              <Heart className={`w-5 h-5 ${likeStatus?.isLiked ? \"fill-current\" : \"\"}`} />\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleDownload}\n              className=\"glass backdrop-blur-xl text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-download\"\n            >\n              <Download className=\"w-5 h-5\" />\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={handleOpenSource}\n              className=\"text-muted-foreground hover:text-foreground\"\n              data-testid=\"button-open-source\"\n            >\n              {track.platform.toLowerCase() === \"youtube\" ? (\n                <SiYoutube className=\"w-5 h-5\" />\n              ) : (\n                <SiSoundcloud className=\"w-5 h-5\" />\n              )}\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              data-testid=\"button-close-player\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10083},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/library-sidebar.tsx":{"content":"import { useState, useEffect, useRef } from \"react\";\nimport { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface LibrarySidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  onOpen?: () => void;\n  onPlayTrack?: (track: SearchResult) => void;\n}\n\n\n\n  // Only sidebar open/close logic remains\n  const sidebarRef = useRef<HTMLDivElement>(null);\n  const [dragOffset, setDragOffset] = useState(0);\n\n\n\n\n\n  return (\n    <>\n      {/* Backdrop */}\n      {isOpen && (\n        <div\n          className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n          onClick={onClose}\n        />\n      )}\n\n      {/* Sidebar */}\n      <div\n        ref={sidebarRef}\n        className={`fixed top-0 left-0 h-full w-80 glass-elevated border-r border-white/20 z-50 transition-transform duration-300 ${\n          isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n        }`}\n        style={{\n          transform: dragOffset !== 0 \n            ? `translateX(${isOpen ? dragOffset : -320 + dragOffset}px)` \n            : undefined,\n          transition: dragOffset !== 0 ? \"none\" : undefined,\n        }}\n      >\n        <div className=\"flex flex-col h-full\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between p-4 border-b border-white/20\">\n            <h2 className=\"text-xl font-semibold\">My Library</h2>\n            <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n              <X className=\"w-5 h-5\" />\n            </Button>\n          return (\n            <>\n              {/* Backdrop */}\n              {isOpen && (\n                <div\n                  className=\"fixed inset-0 bg-black/50 z-40 lg:hidden\"\n                  onClick={onClose}\n                />\n              )}\n              {/* Sidebar */}\n              <div\n                ref={sidebarRef}\n                className={`fixed top-0 left-0 h-full w-80 glass-elevated border-r border-white/20 z-50 transition-transform duration-300 ${\n                  isOpen ? \"translate-x-0\" : \"-translate-x-full\"\n                }`}\n                style={{\n                  transform: dragOffset !== 0 \n                    ? `translateX(${isOpen ? dragOffset : -320 + dragOffset}px)` \n                    : undefined,\n                  transition: dragOffset !== 0 ? \"none\" : undefined,\n                }}\n              >\n                <div className=\"flex flex-col h-full\">\n                  {/* Header */}\n                  <div className=\"flex items-center justify-between p-4 border-b border-white/20\">\n                    <h2 className=\"text-xl font-semibold\">My Library</h2>\n                    <Button variant=\"ghost\" size=\"icon\" onClick={onClose}>\n                      <X className=\"w-5 h-5\" />\n                    </Button>\n                  </div>\n                  <div className=\"flex-1 flex items-center justify-center text-muted-foreground\">\n                    <span>Library features are disabled.</span>\n                  </div>\n                </div>\n              </div>\n            </>\n          );\n                    <p>No playlists yet</p>\n                    <p className=\"text-xs\">Create your first playlist to get started</p>\n                  </div>\n                ) : (\n                  <div className=\"space-y-2\">\n                    {playlists.map((playlist) => (\n                      <div\n                        key={playlist.id}\n                        className=\"flex items-center gap-3 p-3 rounded-lg hover:bg-white/5 transition-colors cursor-pointer group\"\n                        onClick={() => setSelectedPlaylist(playlist.id)}\n                      >\n                        <div className=\"w-10 h-10 rounded bg-gradient-to-br from-violet-500 to-blue-500 flex items-center justify-center flex-shrink-0\">\n                          <ListMusic className=\"w-5 h-5\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <p className=\"font-medium truncate\">{playlist.name}</p>\n                          {playlist.description && (\n                            <p className=\"text-xs text-muted-foreground truncate\">{playlist.description}</p>\n                          )}\n                        </div>\n                        <ChevronRight className=\"w-5 h-5 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity\" />\n                      </div>\n                    ))}\n                  </div>\n                )}\n              </div>\n            )}\n\n            {activeSection === \"playlists\" && selectedPlaylist && (\n              <div className=\"space-y-4\">\n                <div className=\"flex items-center gap-2\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setSelectedPlaylist(null)}\n                  >\n                    ← Back\n                  </Button>\n                  <div className=\"flex-1\" />\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    className=\"text-red-400 hover:text-red-300\"\n                    onClick={() => {\n                      if (confirm(\"Are you sure you want to delete this playlist?\")) {\n                        deletePlaylist.mutate(selectedPlaylist);\n                      }\n                    }}\n                  >\n                    <Trash2 className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n                <Separator className=\"bg-white/20\" />\n                {playlistSongsLoading ? (\n                  <div className=\"text-center text-muted-foreground py-8\">Loading...</div>\n                ) : (\n                  renderSongList(playlistSongs, true, (songId) => {\n                    removeFromPlaylist.mutate({ playlistId: selectedPlaylist, songId });\n                  })\n                )}\n              </div>\n            )}\n\n            {activeSection === \"liked\" && (\n              <div>\n                {likedLoading ? (\n                  <div className=\"text-center text-muted-foreground py-8\">Loading...</div>\n// ...existing code...\n                  renderSongList(likedSongs, true, (songId) => {\n\n                    unlikeSong.mutate(songId);\n","size_bytes":6203},"postcss.config.js":{"content":"module.exports = {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {}\n  }\n};\n","size_bytes":81},"VERCEL_DEPLOY.md":{"content":"# Deploying to Vercel\n\nThis guide explains how to deploy your Mate music search engine to Vercel.\n\n## Prerequisites\n\n1. A Vercel account (sign up at https://vercel.com)\n2. Vercel CLI installed: `npm i -g vercel`\n3. A PostgreSQL database (Vercel Postgres or external like Neon, Supabase, etc.)\n\n## Environment Variables\n\nBefore deploying, set these environment variables in your Vercel project settings:\n\n### Required:\n- `DATABASE_URL` - PostgreSQL connection string\n- `SESSION_SECRET` - Random secret string for sessions (generate with: `openssl rand -base64 32`)\n\n### Optional (for full functionality):\n- `JAMENDO_CLIENT_ID` - Jamendo API client ID (or use default)\n\n### For Replit Auth (if using):\n- `REPLIT_ENV` - Set to \"true\" if using Replit auth\n- `ISSUER_URL` - OIDC issuer URL\n- `REPL_ID` - Your Replit app ID\n- `REPLIT_DOMAINS` - Comma-separated domains\n- `CLIENT_ID` - OAuth client ID\n\n## Deployment Steps\n\n### Option 1: Deploy via Vercel CLI\n\n```bash\n# Login to Vercel\nvercel login\n\n# Deploy\nvercel\n\n# Follow the prompts to:\n# 1. Link to existing project or create new one\n# 2. Configure environment variables\n# 3. Deploy\n```\n\n### Option 2: Deploy via Git Integration\n\n1. Push your code to GitHub/GitLab/Bitbucket\n2. Go to https://vercel.com/new\n3. Import your repository\n4. Configure environment variables in Vercel dashboard\n5. Click \"Deploy\"\n\n## Post-Deployment\n\n1. Run database migrations:\n   ```bash\n   # Set DATABASE_URL locally or in Vercel env vars\n   npm run db:push\n   ```\n\n2. Your app will be available at: `https://your-project.vercel.app`\n\n## Important Notes\n\n- The build command is `vite build` (configured in package.json as `vercel-build`)\n- Static files are served from `dist/public`\n- API routes are in the `api/` directory\n- Sessions are stored in PostgreSQL (requires DATABASE_URL)\n\n## Troubleshooting\n\n### \"Cannot find module\" errors\n- Make sure all dependencies are in `dependencies` not `devDependencies`\n- Run `npm install` locally to verify\n\n### Database connection errors\n- Verify DATABASE_URL is set correctly in Vercel environment variables\n- Check that your database allows connections from Vercel IPs\n- Run `npm run db:push` to ensure tables are created\n\n### API routes not working\n- Check Vercel function logs in the dashboard\n- Verify `api/index.ts` is properly exporting the handler\n- Ensure routes in `vercel.json` are correct\n","size_bytes":2372},"server/routes.ts":{"content":"// ...existing code...\nimport type { Express } from \"express\";\nimport dotenv from \"dotenv\";\ndotenv.config();\nimport { createServer, type Server } from \"http\";\nimport { searchJamendo, getTrendingTracks } from \"./lib/jamendo\";\n// import { analyzeVibeFromAudio, recognizeAudio } from \"./lib/openai-service\";\nimport { searchQuerySchema, vibeMatchRequestSchema, audioRecognitionRequestSchema } from \"@shared/schema\";\nimport { registerLibraryRoutes } from \"./routes/library\";\nlet setupAuth: any = async () => {};\nlet isAuthenticated: any = (_req: any, _res: any, next: any) => next();\ntry {\n  const replitAuth = require(\"./replitAuth\");\n  if (process.env.REPLIT_ENV === \"true\" || (process.env.ISSUER_URL && process.env.REPL_ID && process.env.REPLIT_DOMAINS && process.env.CLIENT_ID)) {\n    setupAuth = replitAuth.setupAuth;\n    isAuthenticated = replitAuth.isAuthenticated;\n  }\n} catch (e) {\n  // Auth not available, fallback to no-op\n}\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Web search endpoint for music information\n  app.get('/api/web-search', async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      \n      if (!query || typeof query !== 'string' || !query.trim()) {\n        return res.status(400).json({ error: 'Missing or invalid query' });\n      }\n\n      // Use DuckDuckGo Instant Answer API for music-related searches\n      const searchUrl = `https://api.duckduckgo.com/?q=${encodeURIComponent(query + ' music')}&format=json&no_html=1&skip_disambig=1`;\n      \n      try {\n        const response = await fetch(searchUrl);\n        const data = await response.json();\n        \n        const results = [];\n        \n        // Add abstract if available\n        if (data.Abstract && data.AbstractURL) {\n          results.push({\n            title: data.Heading || query,\n            url: data.AbstractURL,\n            description: data.Abstract\n          });\n        }\n        \n        // Add related topics\n        if (data.RelatedTopics && Array.isArray(data.RelatedTopics)) {\n          for (const topic of data.RelatedTopics.slice(0, 5)) {\n            if (topic.Text && topic.FirstURL) {\n              results.push({\n                title: topic.Text.split(' - ')[0] || topic.Text,\n                url: topic.FirstURL,\n                description: topic.Text\n              });\n            }\n          }\n        }\n        \n        // If no results, provide a fallback Google search link\n        if (results.length === 0) {\n          results.push({\n            title: `${query} - Music Search`,\n            url: `https://www.google.com/search?q=${encodeURIComponent(query + ' music')}`,\n            description: `Search for music-related information about \"${query}\"`\n          });\n        }\n        \n        res.json(results);\n      } catch (apiError) {\n        console.error('[WEB-SEARCH] API Error:', apiError);\n        // Fallback to Google search link\n        res.json([{\n          title: `${query} - Music Search`,\n          url: `https://www.google.com/search?q=${encodeURIComponent(query + ' music')}`,\n          description: `Search for music-related information about \"${query}\"`\n        }]);\n      }\n    } catch (e) {\n      console.error('[WEB-SEARCH] Error:', e);\n      res.status(500).json({ error: 'Web search failed' });\n    }\n  });\n\n  // Universal music search endpoint with AI filtering\n  app.get('/api/search', async (req, res) => {\n    try {\n      const query = req.query.q as string;\n      const sortBy = (req.query.sortBy as string) || 'relevance';\n      const platformFilter = (req.query.platform as string) || 'all';\n      const aiMode = req.query.aiMode === 'true';\n      \n      if (!query || typeof query !== 'string' || !query.trim()) {\n        return res.status(400).json({ error: 'Missing or invalid query' });\n      }\n\n      // Aggregate results from reliable public API sources in parallel\n      // Note: Each API has its own timeout handling internally\n      const [jamendo, soundcloud, youtube, internetArchive, mixcloud] = await Promise.all([\n        (await import('./lib/jamendo')).searchJamendo(query, 12).catch((err) => { console.error('Jamendo error:', err.message); return []; }),\n        (await import('./lib/soundcloud')).searchSoundCloud(query, 12).catch((err) => { console.error('SoundCloud error:', err.message); return []; }),\n        (await import('./lib/youtube')).searchYouTube(query, 12).catch((err) => { console.error('YouTube error:', err.message); return []; }),\n        (await import('./lib/internet-archive')).searchInternetArchive(query, 12).catch((err) => { console.error('Internet Archive error:', err.message); return []; }),\n        (await import('./lib/mixcloud')).searchMixcloud(query, 12).catch((err) => { console.error('Mixcloud error:', err.message); return []; }),\n      ]);\n      \n      let results = [\n        ...jamendo,\n        ...soundcloud,\n        ...youtube,\n        ...internetArchive,\n        ...mixcloud,\n      ].map(r => {\n        const rec: any = r;\n        return {\n          ...r,\n          platform: rec.platform || rec.source || 'unknown',\n          description: rec.description || '',\n          aiScore: rec.aiScore || 0,\n        };\n      });\n\n      console.log(`[SEARCH] Query: \"${query}\", Results before filtering: ${results.length}, AI Mode: ${aiMode}`);\n\n      // Filter: only valid music results from working platforms\n      let filtered = results.filter((r: any) => {\n        const url = (r.url || '').toLowerCase();\n        const isMusicSite = url.includes('jamendo.com') || url.includes('youtube.com') || url.includes('youtu.be') || url.includes('soundcloud.com') || url.includes('archive.org') || url.includes('mixcloud.com');\n        const isPublic = isMusicSite && !url.includes('login') && !url.includes('signin');\n        return isPublic;\n      });\n\n      // Apply platform filter\n      if (platformFilter !== 'all') {\n        filtered = filtered.filter((r: any) => r.platform === platformFilter);\n      }\n\n      console.log(`[SEARCH] After filtering: ${filtered.length} results, Platform: ${platformFilter}, SortBy: ${sortBy}`);\n\n      // AI Mode: Sort by AI score, get top 3 most accurate, then randomize order\n      if (aiMode) {\n        filtered.sort((a: any, b: any) => (b.aiScore || 0) - (a.aiScore || 0));\n        filtered = filtered.slice(0, 3);\n        // Randomize the order of top 3 results\n        filtered = filtered.sort(() => Math.random() - 0.5);\n        console.log(`[SEARCH] AI Mode: Returning top 3 results in random order with AI scores:`, filtered.map((r: any) => ({ title: r.title, score: r.aiScore })));\n      } else {\n        // Apply normal sorting\n        if (sortBy === 'newest') {\n          filtered.sort((a: any, b: any) => {\n            const dateA = new Date(a.publishedAt || 0).getTime();\n            const dateB = new Date(b.publishedAt || 0).getTime();\n            return dateB - dateA;\n          });\n        } else if (sortBy === 'popularity') {\n          filtered.sort((a: any, b: any) => {\n            const viewsA = a.viewCount || 0;\n            const viewsB = b.viewCount || 0;\n            return viewsB - viewsA;\n          });\n        } else if (sortBy === 'publicDomain') {\n          filtered = filtered.filter((r: any) => r.platform === 'jamendo');\n        } else {\n          // Default relevance sorting by AI score\n          filtered.sort((a: any, b: any) => (b.aiScore || 0) - (a.aiScore || 0));\n        }\n      }\n\n      res.json(filtered);\n    } catch (e) {\n      console.error('[SEARCH] Error:', e);\n      res.status(500).json({ error: 'Search failed' });\n    }\n  });\n  await setupAuth(app);\n\n  app.get('/api/auth/user', isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = req.user.claims.sub;\n      const user = await storage.getUser(userId);\n      res.json(user);\n    } catch (error) {\n      console.error(\"Error fetching user:\", error);\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  registerLibraryRoutes(app);\n  \n  // Song info endpoint for video and lyrics\n  app.use('/api/song-info', (await import('./routes/song-info')).default);\n  \n  // AI music card suggestions after first search\n  app.post(\"/api/ai/suggestions\", async (req, res) => {\n    try {\n      const { userHistory } = req.body;\n      const { getMusicSuggestions } = await import(\"./lib/ai-suggestions\");\n      const suggestions = await getMusicSuggestions(userHistory || []);\n      res.json({ suggestions });\n    } catch (e) {\n      res.status(500).json({ error: \"AI suggestion error\" });\n    }\n  });\n\n  // AI search bar suggestions\n  app.post(\"/api/ai/search-suggestions\", async (req, res) => {\n    try {\n      const { currentInput, userHistory } = req.body;\n      const { getSearchSuggestions } = await import(\"./lib/ai-suggestions\");\n      const suggestions = await getSearchSuggestions(currentInput || \"\", userHistory || []);\n      res.json({ suggestions });\n    } catch (e) {\n      res.status(500).json({ error: \"AI search suggestion error\" });\n    }\n  });\n  // AI Assistant command handler\n  app.post(\"/api/ai/command\", async (req, res) => {\n    try {\n      const { command } = req.body;\n      if (!command || typeof command !== \"string\") {\n        return res.status(400).json({ error: \"Missing command\" });\n      }\n      // Use FreeGPT for music Q&A\n      const { freegptChat } = await import(\"./lib/freegpt\");\n      const prompt = `You are a world-class AI assistant for a music app. You answer ANY question about the music industry, including:\\n\\n- Artist news, biographies, and life stories (past and present)\\n- Music history, genres, and movements (from the 19th century to today)\\n- Songs, albums, and their stories\\n- Record labels, producers, and the business of music\\n- Lyrics, songwriting, and composition\\n- Music technology, instruments, and production\\n- Music awards, charts, and records\\n- Anything factual, creative, or newsworthy about music\\n\\nIf the user asks about anything outside the music world, politely refuse and say you only answer music-related questions. If the user asks for music, search, play, or playlist actions, suggest an action in JSON: { action: '...' }.\\n\\nUser: ${command}`;\n      const reply = await freegptChat({\n        messages: [\n          { role: \"system\", content: \"You are a world-class AI assistant for a music app. You answer ANY question about the music industry, including artist news, biographies, music history, genres, songs, albums, record labels, lyrics, and more. If the user asks about anything outside the music world, politely refuse and say you only answer music-related questions.\" },\n          { role: \"user\", content: prompt },\n        ],\n        max_tokens: 400,\n      });\n      res.json({ reply });\n    } catch (e) {\n      res.status(500).json({ error: \"AI error\" });\n    }\n  });\n// ...existing code...\n\n  // Vibe Match endpoint - text-based, uses FreeGPT\n  app.post(\"/api/vibe-match\", async (req, res) => {\n    try {\n      const { query } = req.body;\n      if (!query || typeof query !== 'string' || !query.trim()) {\n        return res.status(400).json({ error: 'Missing or invalid query' });\n      }\n      const { freegptChat } = await import(\"./lib/freegpt\");\n      const prompt = `You are a music vibe and trend expert. Given the user's search query, suggest:\\n- 3-5 musical vibes that match the query\\n- 5 trending or similar songs (title and artist)\\n\\nReply in JSON:\\n{\\n  \"vibes\": [\"vibe1\", \"vibe2\", ...],\\n  \"trendingSongs\": [{\"title\": \"...\", \"artist\": \"...\"}, ...]\\n}\\n\\nQuery: ${query}`;\n      const text = await freegptChat({\n        messages: [\n          { role: \"system\", content: \"You are a music vibe and trend expert. Suggest vibes and trending songs for a search query.\" },\n          { role: \"user\", content: prompt },\n        ],\n        max_tokens: 400,\n      });\n      let result = { vibes: [], trendingSongs: [] };\n      try {\n        result = JSON.parse(text);\n      } catch (err) {\n        console.error('Vibe match JSON parse error:', err, text);\n      }\n      res.json(result);\n    } catch (error) {\n      console.error(\"Vibe match error:\", error);\n      res.status(500).json({ error: \"Vibe matching failed\" });\n    }\n  });\n\n  // Audio Recognition endpoint - Shazam-like functionality (disabled - requires OpenAI Whisper API)\n  // app.post(\"/api/recognize\", async (req, res) => {\n  //   try {\n  //     const { audioData } = audioRecognitionRequestSchema.parse(req.body);\n  //     const result = await recognizeAudio(audioData);\n  //     res.json(result);\n  //   } catch (error) {\n  //     if (error instanceof z.ZodError) {\n  //       res.status(400).json({ error: \"Invalid request\", details: error.errors });\n  //     } else {\n  //       console.error(\"Audio recognition error:\", error);\n  //       res.status(500).json({ error: \"Audio recognition failed\" });\n  //     }\n  //   }\n  // });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":12941},"server/lib/freegpt.ts":{"content":"// Music AI assistant - Uses AI API from https://github.com/matenations/AI\n// Primary: https://ai-wtsg.onrender.com/chat/\n// Fallback: Free AI APIs\n\nimport fetch from 'node-fetch';\n\n// List of API endpoints to try in order\n// Note: freegpt.cc is a web interface, not an API, so we use similar free AI APIs\nconst AI_ENDPOINTS = [\n  {\n    name: 'Primary API',\n    url: 'https://ai-wtsg.onrender.com/chat/',\n    buildBody: (query: string) => ({ message: query }),\n    extractResponse: (data: any) => data.response || data.answer || data.reply || data.message || data.text,\n    timeout: 45000, // Longer timeout for cold starts on Render\n  },\n  {\n    name: 'Fallback API 1',\n    url: 'https://free-unoficial-gpt4o-mini-api-g70n.onrender.com/chat/',\n    buildBody: (query: string) => ({ message: query }),\n    extractResponse: (data: any) => data.response || data.answer || data.reply || data.message,\n    timeout: 30000,\n  },\n  {\n    name: 'Fallback API 2',\n    url: 'https://chatgpt-api.shn.hk/v1/',\n    buildBody: (query: string) => ({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: query }]\n    }),\n    extractResponse: (data: any) => data.choices?.[0]?.message?.content || data.response || data.answer,\n    timeout: 30000,\n  }\n];\n\nasync function tryEndpoint(endpoint: typeof AI_ENDPOINTS[0], query: string): Promise<string | null> {\n  try {\n    console.log(`[AI] Trying ${endpoint.name}...`);\n    const response = await fetch(endpoint.url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(endpoint.buildBody(query)),\n      signal: AbortSignal.timeout(endpoint.timeout),\n    });\n    \n    if (!response.ok) {\n      console.log(`[AI] ${endpoint.name} returned status ${response.status}`);\n      return null;\n    }\n    \n    const data = await response.json();\n    const aiResponse = endpoint.extractResponse(data);\n    \n    if (aiResponse && typeof aiResponse === 'string' && aiResponse.trim()) {\n      console.log(`[AI] ${endpoint.name} succeeded`);\n      return aiResponse;\n    }\n    \n    return null;\n  } catch (error: any) {\n    console.log(`[AI] ${endpoint.name} failed:`, error.message);\n    return null;\n  }\n}\n\nexport async function freegptChat({ messages, model = 'gpt-3.5-turbo', max_tokens = 400, temperature = 0.7 }) {\n  const userMessage = messages[messages.length - 1]?.content || '';\n  const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n  \n  const query = systemMessage ? `${systemMessage}\\n\\nUser: ${userMessage}` : userMessage;\n  \n  // Try each endpoint in order\n  for (const endpoint of AI_ENDPOINTS) {\n    const result = await tryEndpoint(endpoint, query);\n    if (result) {\n      return result;\n    }\n  }\n  \n  // If all endpoints fail, return a helpful message\n  console.error('[AI] All AI endpoints failed');\n  return \"I'm currently unable to connect to the AI service. The API may be waking up (this can take 30-60 seconds for free services). Please try again in a moment, or ask a specific music question.\";\n}\n","size_bytes":3090},"functions/api/lib/internet-archive.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface InternetArchiveResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchInternetArchive(query: string, maxResults: number = 20): Promise<InternetArchiveResult[]> {\n  try {\n    const url = 'https://archive.org/advancedsearch.php';\n    const params = new URLSearchParams({\n      'q': `collection:audio AND (${query})`,\n      'fl[]': 'identifier,title,creator,date,format,description',\n      'rows': String(maxResults * 2),\n      'page': '1',\n      'output': 'json'\n    });\n\n    const response = await fetch(`${url}?${params.toString()}`);\n    \n    if (!response.ok) {\n      throw new Error(`Internet Archive API error: ${response.status}`);\n    }\n\n    const data: any = await response.json();\n    const docs = data?.response?.docs || [];\n\n    const results: InternetArchiveResult[] = [];\n\n    for (const doc of docs) {\n      const identifier = doc.identifier;\n      const title = doc.title || 'Unknown';\n      const creator = Array.isArray(doc.creator) ? doc.creator[0] : (doc.creator || 'Unknown Artist');\n      const year = doc.date || 'Unknown';\n      const description = doc.description || `${title} by ${creator}`;\n\n      results.push({\n        id: identifier,\n        title: title,\n        artist: creator,\n        thumbnail: `https://archive.org/services/img/${identifier}`,\n        duration: '0:00', // Internet Archive doesn't provide duration in search results\n        url: `https://archive.org/details/${identifier}`,\n        embedUrl: `https://archive.org/embed/${identifier}`,\n        publishedAt: year,\n        viewCount: 0,\n        description: description,\n        platform: 'internet-archive',\n        aiScore: calculateAIScore(title, creator, query)\n      });\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    console.error('Internet Archive search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2754},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"CLOUDFLARE_DEPLOY.md":{"content":"# Deploying Mate Music Search to Cloudflare Pages\n\nThis guide walks you through deploying the Mate music search engine to Cloudflare Pages with full functionality.\n\n## Prerequisites\n\n- Cloudflare account (free tier works)\n- GitHub account\n- Git installed locally\n- Node.js 20+ installed\n\n## Architecture Overview\n\n**What's been converted:**\n- ✅ React frontend → Static site (served by Cloudflare Pages)\n- ✅ Express API → Cloudflare Pages Functions (using Hono framework)\n- ✅ PostgreSQL database → Cloudflare D1 (SQLite-based)\n- ✅ Music search, AI features, library management → All working on Cloudflare\n\n## Step 1: Set Up Cloudflare D1 Database\n\n### 1.1 Install Wrangler CLI\n\n```bash\nnpm install -g wrangler\n```\n\n### 1.2 Login to Cloudflare\n\n```bash\nwrangler login\n```\n\n### 1.3 Create D1 Database\n\n```bash\n# Create the database\nwrangler d1 create mate-music-db\n\n# Copy the database_id from the output and update wrangler.toml\n```\n\nUpdate `wrangler.toml` with your database ID:\n\n```toml\n[[d1_databases]]\nbinding = \"DB\"\ndatabase_name = \"mate-music-db\"\ndatabase_id = \"YOUR_DATABASE_ID_HERE\"  # Replace with actual ID\n```\n\n### 1.4 Create Database Schema\n\nGenerate migrations:\n\n```bash\nnpx drizzle-kit generate --config=drizzle.config.d1.ts\n```\n\nApply migrations locally (for testing):\n\n```bash\nwrangler d1 migrations apply mate-music-db --local\n```\n\nApply migrations to production:\n\n```bash\nwrangler d1 migrations apply mate-music-db\n```\n\n### 1.5 Seed Default User (Required)\n\nThe application requires a default user for library functionality. Seed the database:\n\n```bash\n# Seed both local and production databases\nnpm run db:seed:d1\n```\n\nOr manually:\n\n```bash\n# Seed local database\nwrangler d1 execute mate-music-db --local --file=./server/db/seed.sql\n\n# Seed production database\nwrangler d1 execute mate-music-db --file=./server/db/seed.sql\n```\n\n**Important:** This step is required before the library features (playlists, liked songs, saved songs) will work.\n\n## Step 2: Configure Environment Variables\n\n### 2.1 Optional API Keys\n\nThese API keys enhance functionality but are optional:\n\n- `YOUTUBE_API_KEY` - YouTube Data API v3 (for YouTube search)\n- `SOUNDCLOUD_CLIENT_ID` - SoundCloud API (for SoundCloud search)\n- `OPENAI_API_KEY` - OpenAI API (for premium AI features)\n\nWithout these keys, the app will use:\n- Free music sources: Jamendo, Internet Archive, Mixcloud\n- Free AI APIs for suggestions\n\n### 2.2 Set Environment Variables in Cloudflare\n\nIn Cloudflare Dashboard:\n1. Go to **Workers & Pages** → Your project → **Settings** → **Environment variables**\n2. Add variables for both Production and Preview:\n\n```\nYOUTUBE_API_KEY=your_key_here (optional)\nSOUNDCLOUD_CLIENT_ID=your_key_here (optional)\nOPENAI_API_KEY=your_key_here (optional)\n```\n\n## Step 3: Build and Deploy\n\n### 3.1 Build the Application\n\n```bash\nnpm run build\n```\n\nThis creates:\n- `dist/public/` - Static frontend files\n- `functions/` - API endpoints\n\n### 3.2 Deploy via Wrangler\n\n```bash\nnpm run cf:deploy\n```\n\nOr manually:\n\n```bash\nwrangler pages deploy dist/public --project-name=mate-music-search\n```\n\n### 3.3 Deploy via GitHub (Alternative)\n\n1. Push your code to GitHub:\n\n```bash\ngit add .\ngit commit -m \"Cloudflare deployment ready\"\ngit push origin main\n```\n\n2. In Cloudflare Dashboard:\n   - Go to **Workers & Pages** → **Create application** → **Pages**\n   - Click **Connect to Git**\n   - Select your repository\n   - Configure build settings:\n     - **Build command:** `npm run build`\n     - **Build output directory:** `dist/public`\n     - **Root directory:** (leave empty)\n   - Add environment variables (if any)\n   - Click **Save and Deploy**\n\n3. Bind D1 Database:\n   - Go to **Settings** → **Functions** → **D1 database bindings**\n   - Add binding: `DB` → Select `mate-music-db`\n   - Save\n\n## Step 4: Verify Deployment\n\n### 4.1 Check Your Site\n\nVisit your Cloudflare Pages URL (e.g., `mate-music-search.pages.dev`)\n\n### 4.2 Test Functionality\n\n- ✅ Search for music (try \"lo-fi beats\")\n- ✅ Enable AI mode toggle\n- ✅ Web search (add \"/\" prefix to query)\n- ✅ Create a playlist\n- ✅ Like songs\n- ✅ Save songs for later\n- ✅ View lyrics for songs\n\n### 4.3 Check Functions Logs\n\nIn Cloudflare Dashboard:\n1. Go to your Pages project\n2. Click **Functions** tab\n3. View real-time logs and analytics\n\n## Step 5: Custom Domain (Optional)\n\n### 5.1 Add Custom Domain\n\n1. Go to your Pages project → **Custom domains**\n2. Click **Set up a custom domain**\n3. Enter your domain (e.g., `music.example.com`)\n4. Follow DNS instructions\n\n### 5.2 DNS Configuration\n\nAdd CNAME record:\n```\nmusic.example.com → mate-music-search.pages.dev\n```\n\nSSL certificate is automatically provisioned.\n\n## Local Development\n\n### Using Wrangler Dev\n\n```bash\n# Build frontend first\nnpm run build\n\n# Start local Cloudflare Pages dev server\nnpm run cf:dev\n```\n\nVisit `http://localhost:8788`\n\n### Using Original Dev Server (Replit)\n\n```bash\nnpm run dev\n```\n\nVisit `http://localhost:5000`\n\n## Troubleshooting\n\n### Functions Not Working\n\n**Problem:** API endpoints returning 404\n**Solution:** \n1. Ensure `functions/` directory is in your repository\n2. Check D1 database binding in Cloudflare dashboard\n3. Verify environment variables are set\n\n### Database Errors\n\n**Problem:** \"D1_ERROR: no such table\"\n**Solution:**\n```bash\n# Apply migrations to production\nwrangler d1 migrations apply mate-music-db\n```\n\n### Build Failures\n\n**Problem:** Build fails during deployment\n**Solution:**\n1. Check build logs in Cloudflare Dashboard\n2. Ensure all dependencies are in `package.json`\n3. Try building locally: `npm run build`\n\n### API Keys Not Working\n\n**Problem:** YouTube/SoundCloud not returning results\n**Solution:**\n1. Verify environment variables are set in Cloudflare\n2. Check API key validity\n3. App falls back to free sources (Jamendo, Internet Archive)\n\n## Performance Optimization\n\n### Caching\n\nCloudflare Pages automatically caches static assets. For API responses:\n\n```typescript\n// In your function\nreturn new Response(JSON.stringify(data), {\n  headers: {\n    'Cache-Control': 'public, max-age=300', // 5 minutes\n  },\n});\n```\n\n### Database Query Optimization\n\nD1 queries are fast, but for high traffic:\n1. Use Cloudflare KV for frequently accessed data\n2. Implement request caching in Workers\n3. Use Durable Objects for real-time features\n\n## Cost Estimate\n\nCloudflare Pages is extremely generous:\n\n**Free Tier Includes:**\n- Unlimited requests\n- Unlimited bandwidth\n- 500 builds/month\n- 100,000 D1 reads/day\n- 50,000 D1 writes/day\n\n**Paid Plan ($20/month):**\n- Everything in free tier\n- Unlimited builds\n- Advanced analytics\n- Higher D1 limits\n\n**Typical usage for this app:** Free tier is sufficient for most use cases.\n\n## Migration from Replit\n\nIf you're migrating from Replit to Cloudflare:\n\n1. ✅ Code is already converted\n2. ❌ No need to export PostgreSQL data (fresh D1 database)\n3. ✅ All features work the same way\n4. ✅ Faster global performance (Cloudflare edge network)\n\n## Support\n\n- **Cloudflare Docs:** https://developers.cloudflare.com/pages/\n- **D1 Documentation:** https://developers.cloudflare.com/d1/\n- **Hono Framework:** https://hono.dev/\n\n## Next Steps\n\n- [ ] Set up custom domain\n- [ ] Add analytics tracking\n- [ ] Configure cache headers\n- [ ] Set up staging environment\n- [ ] Add CI/CD pipeline\n- [ ] Monitor D1 usage\n\n---\n\n**Congratulations!** Your music search engine is now running on Cloudflare's global edge network. 🎵\n","size_bytes":7451},"server/db/schema.ts":{"content":"import { pgTable, text, timestamp, integer, primaryKey, uuid, jsonb, varchar, index, sql } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\n\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\n\n// Songs table - stores song metadata\nexport const songs = pgTable(\"songs\", {\n  id: text(\"id\").primaryKey(), // platform-specific ID (e.g., YouTube video ID)\n  title: text(\"title\").notNull(),\n  artist: text(\"artist\").notNull(),\n  thumbnail: text(\"thumbnail\").notNull(),\n  duration: text(\"duration\"),\n  platform: text(\"platform\").notNull(), // \"youtube\" or \"soundcloud\"\n  url: text(\"url\").notNull(),\n  embedUrl: text(\"embed_url\"),\n  publishedAt: text(\"published_at\"),\n  viewCount: integer(\"view_count\"),\n  description: text(\"description\"),\n  metadata: jsonb(\"metadata\"), // Store full SearchResult as JSON\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\nexport const insertSongSchema = createInsertSchema(songs);\nexport const selectSongSchema = createSelectSchema(songs);\n\n// Playlists table\nexport const playlists = pgTable(\"playlists\", {\n  id: uuid(\"id\").defaultRandom().primaryKey(),\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  thumbnail: text(\"thumbnail\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\nexport const insertPlaylistSchema = createInsertSchema(playlists);\nexport const selectPlaylistSchema = createSelectSchema(playlists);\n\n// Playlist songs - many-to-many relationship\nexport const playlistSongs = pgTable(\"playlist_songs\", {\n  playlistId: uuid(\"playlist_id\").references(() => playlists.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  position: integer(\"position\").notNull().default(0), // For ordering songs in playlist\n  addedAt: timestamp(\"added_at\").defaultNow().notNull(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.playlistId, table.songId] }),\n}));\n\nexport const insertPlaylistSongSchema = createInsertSchema(playlistSongs);\nexport const selectPlaylistSongSchema = createSelectSchema(playlistSongs);\n\n// Liked songs table\nexport const likedSongs = pgTable(\"liked_songs\", {\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  likedAt: timestamp(\"liked_at\").defaultNow().notNull(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.userId, table.songId] }),\n}));\n\nexport const insertLikedSongSchema = createInsertSchema(likedSongs);\nexport const selectLikedSongSchema = createSelectSchema(likedSongs);\n\n// Saved songs table (for \"Save for Later\")\nexport const savedSongs = pgTable(\"saved_songs\", {\n  userId: varchar(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  savedAt: timestamp(\"saved_at\").defaultNow().notNull(),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.userId, table.songId] }),\n}));\n\nexport const insertSavedSongSchema = createInsertSchema(savedSongs);\nexport const selectSavedSongSchema = createSelectSchema(savedSongs);\n\n// Type exports\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Song = typeof songs.$inferSelect;\nexport type InsertSong = typeof songs.$inferInsert;\nexport type Playlist = typeof playlists.$inferSelect;\nexport type InsertPlaylist = typeof playlists.$inferInsert;\nexport type PlaylistSong = typeof playlistSongs.$inferSelect;\nexport type InsertPlaylistSong = typeof playlistSongs.$inferInsert;\nexport type LikedSong = typeof likedSongs.$inferSelect;\nexport type InsertLikedSong = typeof likedSongs.$inferInsert;\nexport type SavedSong = typeof savedSongs.$inferSelect;\nexport type InsertSavedSong = typeof savedSongs.$inferInsert;\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  playlists: many(playlists),\n  likedSongs: many(likedSongs),\n  savedSongs: many(savedSongs),\n}));\n\nexport const playlistsRelations = relations(playlists, ({ one, many }) => ({\n  user: one(users, {\n    fields: [playlists.userId],\n    references: [users.id],\n  }),\n  playlistSongs: many(playlistSongs),\n}));\n\nexport const songsRelations = relations(songs, ({ many }) => ({\n  playlistSongs: many(playlistSongs),\n  likedBy: many(likedSongs),\n  savedBy: many(savedSongs),\n}));\n\nexport const playlistSongsRelations = relations(playlistSongs, ({ one }) => ({\n  playlist: one(playlists, {\n    fields: [playlistSongs.playlistId],\n    references: [playlists.id],\n  }),\n  song: one(songs, {\n    fields: [playlistSongs.songId],\n    references: [songs.id],\n  }),\n}));\n\nexport const likedSongsRelations = relations(likedSongs, ({ one }) => ({\n  user: one(users, {\n    fields: [likedSongs.userId],\n    references: [users.id],\n  }),\n  song: one(songs, {\n    fields: [likedSongs.songId],\n    references: [songs.id],\n  }),\n}));\n\nexport const savedSongsRelations = relations(savedSongs, ({ one }) => ({\n  user: one(users, {\n    fields: [savedSongs.userId],\n    references: [users.id],\n  }),\n  song: one(songs, {\n    fields: [savedSongs.songId],\n    references: [songs.id],\n  }),\n}));\n","size_bytes":6083},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}\n","size_bytes":116},"functions/api/lib/soundcloud.ts":{"content":"// SoundCloud search implementation using public API\nimport fetch from 'node-fetch';\n\nexport interface SoundCloudSearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n}\n\nexport async function searchSoundCloud(query: string, maxResults: number = 20): Promise<SoundCloudSearchResult[]> {\n  try {\n    // Try multiple client IDs for better reliability\n    const clientIds = [\n      '2t9loNQH90kzJcsFCODdigxfp325aq4z',\n      'a3e059563d7fd3372b49b37f00a00bcf',\n      'iZIs9mchVcX5lhVRyQGGAYlNPVldzAoX',\n      'c3e059563d7fd3372b49b37f00a00bcf'\n    ];\n    \n    let response;\n    let lastError;\n    \n    // Try each client ID until one works\n    for (const clientId of clientIds) {\n      const url = `https://api-v2.soundcloud.com/search?q=${encodeURIComponent(query)}&limit=${maxResults}&client_id=${clientId}`;\n      \n      try {\n        response = await fetch(url, {\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'Mozilla/5.0'\n          }\n        });\n\n        if (response.ok) {\n          break; // Success! Use this response\n        }\n        lastError = response.status;\n      } catch (err) {\n        lastError = err;\n        continue;\n      }\n    }\n\n    if (!response || !response.ok) {\n      // Return empty array gracefully when API is unavailable\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.collection || [];\n\n    const results: SoundCloudSearchResult[] = [];\n\n    for (const item of tracks) {\n      // Only process tracks, not playlists or users\n      if (item.kind === 'track' && item.id) {\n        const durationMs = item.duration || 0;\n        const duration = formatDuration(durationMs);\n        \n        results.push({\n          id: String(item.id),\n          title: item.title || 'Unknown',\n          artist: item.user?.username || 'Unknown Artist',\n          thumbnail: item.artwork_url || item.user?.avatar_url || '',\n          duration: duration,\n          url: item.permalink_url || `https://soundcloud.com/${item.user?.permalink}/${item.permalink}`,\n          embedUrl: `https://w.soundcloud.com/player/?url=${encodeURIComponent(item.permalink_url || '')}`,\n          publishedAt: item.created_at || new Date().toISOString(),\n          viewCount: item.playback_count || 0,\n          description: item.description || `${item.title} by ${item.user?.username || 'Unknown'}`,\n          platform: 'soundcloud'\n        });\n      }\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    console.error('SoundCloud search error:', error);\n    return [];\n  }\n}\n\n// Helper function to format duration from milliseconds\nexport function formatDuration(ms: number): string {\n  const totalSeconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\n","size_bytes":3053},"functions/api/lib/openai-service.ts":{"content":"// Reference: javascript_openai blueprint\nimport OpenAI from \"openai\";\nimport { VibeMatchResult } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nfunction getOpenAIClient() {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error('OPENAI_API_KEY is required. Please add it to your Replit Secrets.');\n  }\n  return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\nconst MUSICAL_VIBES = [\n  \"energetic\", \"calm\", \"melancholic\", \"upbeat\", \"dreamy\", \"intense\", \"romantic\", \"mysterious\",\n  \"joyful\", \"nostalgic\", \"powerful\", \"gentle\", \"dark\", \"bright\", \"ethereal\", \"groovy\",\n  \"chill\", \"aggressive\", \"soothing\", \"euphoric\", \"ambient\", \"dramatic\", \"playful\", \"epic\",\n  \"funky\", \"moody\", \"triumphant\", \"haunting\", \"sensual\", \"rebellious\", \"peaceful\", \"cinematic\",\n  \"bluesy\", \"jazzy\", \"electronic\", \"acoustic\", \"orchestral\", \"minimalist\", \"maximalist\", \"experimental\",\n  \"retro\", \"futuristic\", \"organic\", \"synthetic\", \"rhythmic\", \"melodic\", \"harmonic\", \"dissonant\",\n  \"uplifting\", \"depressing\", \"hopeful\", \"anxious\", \"confident\", \"vulnerable\", \"angry\", \"loving\",\n  \"spiritual\", \"secular\", \"meditative\", \"chaotic\", \"structured\", \"flowing\", \"staccato\", \"legato\",\n  \"major\", \"minor\", \"chromatic\", \"pentatonic\", \"modal\", \"atonal\", \"tonal\", \"polytonal\",\n  \"fast\", \"slow\", \"moderate\", \"accelerating\", \"decelerating\", \"rubato\", \"steady\", \"syncopated\",\n  \"loud\", \"soft\", \"dynamic\", \"static\", \"crescendo\", \"diminuendo\", \"forte\", \"piano\",\n  \"bright\", \"warm\", \"cold\", \"raw\", \"polished\", \"lo-fi\", \"hi-fi\", \"vintage\",\n  \"danceable\", \"contemplative\", \"hypnotic\", \"catchy\", \"complex\", \"simple\", \"layered\", \"sparse\",\n  \"vocal-heavy\", \"instrumental\", \"a cappella\", \"symphonic\", \"chamber\", \"solo\", \"ensemble\", \"choir\",\n  \"traditional\", \"modern\", \"fusion\", \"crossover\", \"genre-bending\", \"pure\", \"hybrid\", \"eclectic\",\n  \"repetitive\", \"varied\", \"progressive\", \"regressive\", \"circular\", \"linear\", \"cyclical\", \"evolving\",\n  \"tribal\", \"urban\", \"rural\", \"cosmic\", \"earthly\", \"celestial\", \"infernal\", \"neutral\",\n  \"masculine\", \"feminine\", \"androgynous\", \"youthful\", \"mature\", \"timeless\", \"dated\", \"contemporary\",\n  \"commercial\", \"underground\", \"mainstream\", \"niche\", \"accessible\", \"challenging\", \"familiar\", \"novel\",\n  \"emotional\", \"intellectual\", \"physical\", \"spiritual\", \"mental\", \"visceral\", \"cerebral\", \"primal\",\n  \"sociable\", \"solitary\", \"communal\", \"individual\", \"collective\", \"personal\", \"universal\", \"specific\",\n  \"celebratory\", \"mourning\", \"reflective\", \"reactive\", \"proactive\", \"passive\", \"active\", \"interactive\",\n  \"narrative\", \"abstract\", \"literal\", \"metaphorical\", \"symbolic\", \"direct\", \"indirect\", \"implicit\",\n  \"improvised\", \"composed\", \"arranged\", \"produced\", \"raw\", \"refined\", \"rough\", \"smooth\",\n  \"textured\", \"clean\", \"distorted\", \"pure\", \"mixed\", \"blended\", \"separated\", \"unified\",\n  \"organic\", \"mechanical\", \"natural\", \"artificial\", \"analog\", \"digital\", \"hybrid\", \"authentic\",\n  \"imitative\", \"original\", \"derivative\", \"innovative\", \"conventional\", \"unconventional\", \"traditional\", \"revolutionary\"\n];\n\nexport async function analyzeVibeFromAudio(audioBase64: string): Promise<VibeMatchResult> {\n  try {\n    // Convert base64 to buffer for Whisper transcription\n    const audioBuffer = Buffer.from(audioBase64, 'base64');\n    \n    // Save to temporary file for Whisper\n    const fs = await import('fs');\n    const path = await import('path');\n    const os = await import('os');\n    \n    const tempFilePath = path.join(os.tmpdir(), `vibe-${Date.now()}.webm`);\n    fs.writeFileSync(tempFilePath, audioBuffer);\n\n    // Transcribe audio (if there's any humming/singing)\n    let transcription = '';\n    try {\n      const openai = getOpenAIClient();\n      const audioReadStream = fs.createReadStream(tempFilePath);\n      // All OpenAI/Whisper/audio features removed. Only text-based vibe match is supported now.\n      // This file is now a stub for compatibility.\n        model: \"whisper-1\",\n","size_bytes":3984},"client/src/pages/not-found.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Music, Home } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function NotFound() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col items-center justify-center p-6\">\n      <div className=\"text-center space-y-6 max-w-md\">\n        <div className=\"relative\">\n          <div className=\"absolute inset-0 bg-gradient-to-r from-violet-500 to-blue-500 blur-3xl opacity-20 animate-pulse\" />\n          <Music className=\"w-24 h-24 mx-auto text-violet-400 relative\" />\n        </div>\n        \n        <div className=\"space-y-2\">\n          <h1 className=\"text-6xl font-display font-bold text-foreground\">404</h1>\n          <h2 className=\"text-2xl font-display font-semibold\">Page Not Found</h2>\n          <p className=\"text-muted-foreground\">\n            The page you're looking for doesn't exist or has been moved.\n          </p>\n        </div>\n\n        <Button\n          onClick={() => setLocation(\"/\")}\n          className=\"bg-gradient-to-r from-violet-500 to-blue-500 hover:from-violet-600 hover:to-blue-600\"\n          data-testid=\"button-home\"\n        >\n          <Home className=\"w-4 h-4 mr-2\" />\n          Back to Home\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1299},"functions/api/lib/mixcloud.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface MixcloudResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchMixcloud(query: string, maxResults: number = 20): Promise<MixcloudResult[]> {\n  try {\n    // Mixcloud API endpoint\n    const url = `https://api.mixcloud.com/search/?q=${encodeURIComponent(query)}&type=cloudcast&limit=${maxResults}`;\n    \n    const response = await fetch(url);\n    \n    if (!response.ok) {\n      throw new Error(`Mixcloud API error: ${response.status}`);\n    }\n\n    const data: any = await response.json();\n    const cloudcasts = data?.data || [];\n\n    const results: MixcloudResult[] = cloudcasts.map((cast: any) => {\n      const durationSeconds = cast.audio_length || 0;\n      const minutes = Math.floor(durationSeconds / 60);\n      const seconds = durationSeconds % 60;\n      const duration = `${minutes}:${seconds.toString().padStart(2, '0')}`;\n      const title = cast.name || 'Unknown';\n      const artist = cast.user?.name || cast.user?.username || 'Unknown Artist';\n\n      return {\n        id: cast.key || cast.slug,\n        title: title,\n        artist: artist,\n        thumbnail: cast.pictures?.large || cast.pictures?.medium || cast.pictures?.thumbnail || '',\n        duration: duration,\n        url: cast.url || `https://www.mixcloud.com${cast.key}`,\n        embedUrl: `https://www.mixcloud.com/widget/iframe/?hide_cover=1&feed=${encodeURIComponent(cast.key || '')}`,\n        publishedAt: cast.created_time || new Date().toISOString(),\n        viewCount: cast.play_count || 0,\n        description: cast.description || `${title} by ${artist}`,\n        platform: 'mixcloud',\n        aiScore: calculateAIScore(title, artist, query, cast.play_count || 0)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Mixcloud search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string, playCount: number): number {\n  let score = Math.min(playCount / 1000, 20); // Normalize play count to max 20 points\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2793},"functions/api/lib/rapidapi-music.ts":{"content":"import axios from 'axios';\n\nexport interface RapidApiTrack {\n  id: string;\n  title: string;\n  artist: string;\n  album?: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  streamUrl?: string;\n  downloadUrl?: string;\n  publishedAt?: string;\n  viewCount?: number;\n  description?: string;\n  platform: string;\n}\n\n// Example: Deezer API via RapidAPI (replace with your chosen API details)\nexport async function searchRapidApiMusic(query: string, maxResults: number = 20): Promise<RapidApiTrack[]> {\n  const apiKey = process.env.RAPIDAPI_KEY;\n  if (!apiKey) throw new Error('RAPIDAPI_KEY not set');\n\n  // Example endpoint for Deezer via RapidAPI\n  const url = 'https://deezerdevs-deezer.p.rapidapi.com/search';\n  const headers = {\n    'X-RapidAPI-Key': apiKey,\n    'X-RapidAPI-Host': 'deezerdevs-deezer.p.rapidapi.com',\n  };\n\n  const response = await axios.get(url, {\n    params: { q: query },\n    headers,\n  });\n\n  return (response.data.data || []).slice(0, maxResults).map((track: any) => ({\n    id: track.id.toString(),\n    title: track.title,\n    artist: track.artist.name,\n    album: track.album?.title,\n    thumbnail: track.album?.cover_medium || '',\n    duration: `${Math.floor(track.duration / 60)}:${(track.duration % 60).toString().padStart(2, '0')}`,\n    url: track.link,\n    streamUrl: track.preview, // 30s preview\n    downloadUrl: track.link, // Deezer does not provide direct download, but you can use the link\n    publishedAt: undefined,\n    viewCount: undefined,\n    description: track.album?.title,\n    platform: 'deezer',\n  }));\n}\n","size_bytes":1558},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"server/lib/ai-suggestions.ts":{"content":"import { freegptChat } from \"./freegpt\";\n\nexport async function getMusicSuggestions(userHistory: any[]): Promise<any[]> {\n  try {\n    // Compose a prompt based on user history\n    const prompt = `You are a music recommendation AI. Based on the following user actions (searches, plays, likes), suggest 3 music cards (title, description, query) that would be relevant and interesting.\\nUser history: ${JSON.stringify(userHistory)}\\nReply as a JSON array.`;\n    const text = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a music recommendation AI. Suggest 3 music cards based on user history.\" },\n        { role: \"user\", content: prompt }\n      ],\n      max_tokens: 300,\n      temperature: 0.7,\n    });\n    try {\n      const arr = JSON.parse(text);\n      if (Array.isArray(arr)) return arr;\n    } catch (err) {\n      console.error('AI suggestion JSON parse error:', err, text);\n    }\n    return [];\n  } catch (err) {\n    console.error('AI suggestion error:', err);\n    return [];\n  }\n}\n\nexport async function getSearchSuggestions(currentInput: string, userHistory: any[]): Promise<string[]> {\n  try {\n    const prompt = `You are a smart search suggestion AI for a music app. Given the user's current input and history, suggest 3 full-sentence search queries they might want to try.\\nCurrent input: \"${currentInput}\"\\nUser history: ${JSON.stringify(userHistory)}\\nReply as a JSON array of strings.`;\n    const text = await freegptChat({\n      messages: [\n        { role: \"system\", content: \"You are a search suggestion AI for a music app.\" },\n        { role: \"user\", content: prompt }\n      ],\n      max_tokens: 150,\n      temperature: 0.7,\n    });\n    try {\n      const arr = JSON.parse(text);\n      if (Array.isArray(arr)) return arr;\n    } catch (err) {\n      console.error('AI search suggestion JSON parse error:', err, text);\n    }\n    return [];\n  } catch (err) {\n    console.error('AI search suggestion error:', err);\n    return [];\n  }\n}\n","size_bytes":1978},"functions/api/lib/itunes.ts":{"content":"import axios from 'axios';\nimport { SearchResult } from '@shared/schema';\n\nexport async function searchItunes(query: string, maxResults: number = 20): Promise<SearchResult[]> {\n  const url = 'https://itunes.apple.com/search';\n  const response = await axios.get(url, {\n    params: {\n      term: query,\n      media: 'music',\n      limit: maxResults,\n    },\n  });\n  return (response.data.results || []).map((item: any) => ({\n    id: item.trackId ? String(item.trackId) : item.collectionId ? String(item.collectionId) : item.artistId ? String(item.artistId) : item.trackName,\n    title: item.trackName || item.collectionName || item.artistName,\n    artist: item.artistName,\n    thumbnail: item.artworkUrl100 || '',\n    duration: item.trackTimeMillis ? `${Math.floor(item.trackTimeMillis / 60000)}:${((item.trackTimeMillis % 60000) / 1000).toFixed(0).padStart(2, '0')}` : '',\n    url: item.trackViewUrl || item.collectionViewUrl || item.artistViewUrl || '',\n    platform: 'itunes',\n    description: item.collectionName || '',\n    publishedAt: item.releaseDate || '',\n    viewCount: undefined,\n    embedUrl: undefined,\n    streamUrl: undefined,\n    downloadUrl: undefined,\n    aiScore: undefined,\n  }));\n}\n","size_bytes":1200},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"server/lib/jango.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface JangoResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchJango(query: string, maxResults: number = 20): Promise<JangoResult[]> {\n  try {\n    // Jango station search\n    const url = `https://www.jango.com/api/search?q=${encodeURIComponent(query)}&type=artist`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const stations = data.artists || data.results || [];\n\n    const results: JangoResult[] = stations.slice(0, maxResults).map((station: any) => {\n      const artist = station.name || station.artist_name || 'Unknown Artist';\n      const title = `${artist} Radio`;\n      \n      return {\n        id: station.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: station.image || station.artwork_url || 'https://www.jango.com/images/logo.png',\n        duration: 'Live Stream',\n        url: `https://www.jango.com/music/${encodeURIComponent(artist)}`,\n        embedUrl: station.stream_url || '',\n        publishedAt: new Date().toISOString(),\n        viewCount: station.plays || 0,\n        description: `Listen to ${artist} radio on Jango`,\n        platform: 'jango',\n        aiScore: calculateAIScore(artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Jango search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (artistLower.includes(queryLower)) score += 50;\n  if (artistLower === queryLower) score += 100;\n  \n  const artistWords = artistLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => artistWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2266},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"client/src/lib/puter-ai.ts":{"content":"declare global {\n  interface Window {\n    puter: {\n      ai: {\n        chat: (message: string | any, options?: any) => Promise<string>;\n        txt2img: (prompt: string, options?: any) => Promise<HTMLImageElement>;\n      };\n      print: (content: any) => void;\n    };\n  }\n}\n\nexport interface PuterAIOptions {\n  model?: string;\n  temperature?: number;\n  max_tokens?: number;\n  stream?: boolean;\n}\n\nexport interface PuterMessage {\n  role: 'system' | 'user' | 'assistant';\n  content: string;\n}\n\nexport async function puterChat(\n  messages: PuterMessage[],\n  options: PuterAIOptions = {}\n): Promise<string> {\n  if (typeof window === 'undefined' || !window.puter) {\n    throw new Error('Puter.js is not loaded. Make sure the script is included in your HTML.');\n  }\n\n  const {\n    model = 'gpt-5-nano',\n    temperature = 0.7,\n    max_tokens = 400,\n  } = options;\n\n  const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n  const userMessage = messages[messages.length - 1]?.content || '';\n  \n  const fullPrompt = systemMessage \n    ? `${systemMessage}\\n\\nUser: ${userMessage}` \n    : userMessage;\n\n  try {\n    const response = await window.puter.ai.chat(fullPrompt, {\n      model,\n      temperature,\n      max_tokens,\n    });\n\n    return response;\n  } catch (error) {\n    console.error('Puter AI error:', error);\n    throw new Error('Failed to get AI response from Puter');\n  }\n}\n\nexport async function puterChatStreaming(\n  messages: PuterMessage[],\n  onChunk: (text: string) => void,\n  options: PuterAIOptions = {}\n): Promise<void> {\n  if (typeof window === 'undefined' || !window.puter) {\n    throw new Error('Puter.js is not loaded. Make sure the script is included in your HTML.');\n  }\n\n  const {\n    model = 'gpt-5-nano',\n    temperature = 0.7,\n    max_tokens = 400,\n  } = options;\n\n  const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n  const userMessage = messages[messages.length - 1]?.content || '';\n  \n  const fullPrompt = systemMessage \n    ? `${systemMessage}\\n\\nUser: ${userMessage}` \n    : userMessage;\n\n  try {\n    const response = await window.puter.ai.chat(fullPrompt, {\n      model,\n      temperature,\n      max_tokens,\n      stream: true,\n    });\n\n    for await (const part of response as any) {\n      if (part?.text) {\n        onChunk(part.text);\n      }\n    }\n  } catch (error) {\n    console.error('Puter AI streaming error:', error);\n    throw new Error('Failed to stream AI response from Puter');\n  }\n}\n\nexport async function puterGenerateImage(\n  prompt: string,\n  options: { model?: string } = {}\n): Promise<HTMLImageElement> {\n  if (typeof window === 'undefined' || !window.puter) {\n    throw new Error('Puter.js is not loaded. Make sure the script is included in your HTML.');\n  }\n\n  const { model = 'gpt-image-1' } = options;\n\n  try {\n    const imageElement = await window.puter.ai.txt2img(prompt, { model });\n    return imageElement;\n  } catch (error) {\n    console.error('Puter image generation error:', error);\n    throw new Error('Failed to generate image with Puter');\n  }\n}\n\nexport const AVAILABLE_MODELS = {\n  text: [\n    'gpt-5',\n    'gpt-5-mini',\n    'gpt-5-nano',\n    'gpt-5-chat-latest',\n    'gpt-4.1',\n    'gpt-4.1-mini',\n    'gpt-4.1-nano',\n    'gpt-4.5-preview',\n    'gpt-4o',\n    'gpt-4o-mini',\n    'o1',\n    'o1-mini',\n    'o1-pro',\n    'o3',\n    'o3-mini',\n    'o4-mini',\n  ],\n  image: [\n    'gpt-image-1',\n    'dall-e-3',\n    'dall-e-2',\n  ],\n};\n","size_bytes":3437},"design_guidelines.md":{"content":"# Mate Music Search Engine - Design Guidelines\n\n## Design Approach\n**Reference-Based with Custom Innovation**: Drawing inspiration from jeton.com's smooth animations and glassmorphism aesthetic, combined with music platform patterns from Spotify and SoundCloud. The design prioritizes an immersive audio-visual experience while maintaining search utility.\n\n**Design Principles**:\n- Fluid, responsive animations that don't compromise performance\n- Dark, atmospheric interface that puts content first\n- Seamless transitions between search, playback, and AI features\n- Visual feedback for audio interactions\n\n## Core Design Elements\n\n### A. Color Palette\n\n**Dark Mode Primary** (default):\n- Background Base: 230 35% 8% (deep violet-blue)\n- Background Elevated: 235 30% 12% (cards, player)\n- Background Glass: 240 40% 18% with 40% opacity (glassmorphic overlays)\n- Primary Violet: 270 60% 55% (CTAs, active states)\n- Primary Blue: 240 70% 50% (accents, links)\n- Gradient Accent: Linear from 270 60% 55% to 240 70% 50%\n\n**Text Colors**:\n- Primary Text: 0 0% 95%\n- Secondary Text: 240 20% 70%\n- Muted Text: 240 15% 50%\n\n**Functional Colors**:\n- Success/Playing: 150 60% 50%\n- Warning: 40 90% 60%\n- Error: 0 70% 60%\n\n### B. Typography\n\n**Font Families**:\n- Primary: 'Inter' for UI elements and body text (via Google Fonts)\n- Display: 'Poppins' for headings and brand elements (via Google Fonts)\n- Mono: 'JetBrains Mono' for timestamps and technical info\n\n**Type Scale**:\n- Hero/Display: text-6xl (Poppins SemiBold)\n- Page Heading: text-4xl (Poppins Medium)\n- Section Heading: text-2xl (Poppins Medium)\n- Body Large: text-lg (Inter Regular)\n- Body: text-base (Inter Regular)\n- Small: text-sm (Inter Regular)\n- Micro: text-xs (Inter Medium)\n\n### C. Layout System\n\n**Spacing Primitives**: Use Tailwind units of 2, 4, 6, 8, 12, 16, 20 for consistent rhythm\n- Micro spacing: p-2, gap-2\n- Standard spacing: p-4, gap-4, m-4\n- Section spacing: py-12, py-16, py-20\n- Large spacing: p-8, gap-8\n\n**Grid System**:\n- Search results: grid-cols-1 md:grid-cols-2 lg:grid-cols-3\n- Max content width: max-w-7xl\n- Player controls: Flexbox with gap-4\n\n### D. Component Library\n\n**Navigation**:\n- Fixed top bar with glassmorphic background (backdrop-blur-xl)\n- Logo left, search bar center, user actions right\n- Height: h-16 with px-6 padding\n- Sticky behavior with smooth shadow on scroll\n\n**Search Interface**:\n- Prominent search bar: rounded-2xl with glass effect, h-14\n- Search icon left (Heroicons), filter button right\n- Auto-suggest dropdown with blur background\n- Vibe Match button: Gradient fill with microphone icon, pulsing animation when active\n\n**Music Player** (Bottom Fixed):\n- Height: h-24, glassmorphic background with backdrop-blur-2xl\n- Left: Album art (w-20 h-20 rounded-lg), track info\n- Center: Playback controls (previous, play/pause, next, shuffle, repeat)\n- Right: Volume slider, visualizer toggle, external link button\n- Progress bar: Full width above controls, gradient fill\n- Visualizer: Canvas element, h-16, frequency bars with violet-blue gradient\n\n**Search Results Cards**:\n- Card: Glass effect background, rounded-xl, p-4\n- Thumbnail: aspect-video, rounded-lg with hover scale\n- Title: text-lg font-medium, truncate after 2 lines\n- Artist: text-sm text-secondary\n- Platform badge: Small pill (YouTube/SoundCloud) with platform colors\n- Duration overlay on thumbnail: bottom-right, text-xs\n\n**Vibe Match Interface**:\n- Full-screen modal with animated gradient background\n- Center: Animated waveform visualization during listening\n- Microphone icon pulsing with audio input levels\n- Results display with vibe tags and confidence scores\n\n**Filters & Sort Panel**:\n- Slide-in panel from right: w-80\n- Options: Radio buttons with custom styling (violet accent)\n- Quick filters: Chip-style buttons with glass effect\n- Apply button: Gradient fill, sticky at bottom\n\n### E. Animations & Interactions\n\n**Micro-animations** (use sparingly):\n- Button hover: scale-105 transition-transform\n- Card hover: Subtle glow effect, translate-y-1\n- Loading: Spinning gradient border on search\n- Vibe Match: Pulsing microphone icon, waveform visualization\n\n**Transitions**:\n- Page transitions: fade-in with 200ms duration\n- Modal/panel: slide-in from direction, 300ms\n- Player expand: smooth height animation, 400ms\n\n**Performance-First**:\n- Use CSS transforms over position changes\n- RequestAnimationFrame for visualizer\n- Debounce search input (300ms)\n- Lazy load thumbnails with intersection observer\n\n### F. Glassmorphism Implementation\n\n**Glass Cards**:\n```\nBackground: bg-white/10 dark:bg-white/5\nBackdrop: backdrop-blur-xl\nBorder: border border-white/20\nShadow: shadow-2xl with colored glow\n```\n\n**Elevated Glass** (Player, Modals):\n```\nBackground: bg-violet-500/20\nBackdrop: backdrop-blur-2xl\nBorder: border-2 border-white/30\n```\n\n## Images\n\n**Hero Section**: NO traditional hero image. Instead:\n- Animated gradient background with floating music notes (CSS)\n- Centered search bar as primary focal point\n- Subtle animated waveform pattern in background\n\n**Content Images**:\n- Album/Video thumbnails: Aspect ratio 16:9, lazy-loaded\n- Artist images: Circular (rounded-full), w-12 h-12 in results\n- Placeholder: Violet gradient with music note icon\n\n**Icons**:\n- Use Heroicons via CDN (outline style for navigation, solid for actions)\n- Music visualizer: Custom canvas with Web Audio API\n- Platform badges: Use Font Awesome brand icons (YouTube, SoundCloud)\n\n## Accessibility & Performance\n\n- Maintain WCAG AA contrast ratios (violet 270 60% 55% on dark backgrounds passes)\n- Keyboard navigation: Focus rings with violet accent\n- Screen reader labels for all interactive audio elements\n- Reduce motion: Disable animations for prefers-reduced-motion\n- Optimize visualizer with throttled updates (60fps cap)\n- Use CSS containment for scroll performance","size_bytes":5838},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"server/lib/nonoki.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface NonokiResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchNonoki(query: string, maxResults: number = 20): Promise<NonokiResult[]> {\n  try {\n    // Nonoki.com search\n    const url = `https://nonoki.com/api/search?query=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.songs || data.results || [];\n\n    const results: NonokiResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.artist_name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.thumbnail || track.image || track.cover_url || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.url || `https://nonoki.com/song/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.published_at || new Date().toISOString(),\n        viewCount: track.play_count || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'nonoki',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Nonoki search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2668},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ai-assistant.tsx":{"content":"export function AIAssistant({ embedded = false }: { embedded?: boolean }) {\n  return (\n    <div className={embedded ? \"w-full h-full\" : \"w-full h-[500px]\"}>\n      <iframe\n        src=\"https://www.easemate.ai/webapp/chat?from=ai-chat\"\n        className=\"w-full h-full border-0 rounded-lg\"\n        title=\"EaseMate AI Chat\"\n        allow=\"microphone; camera\"\n      />\n    </div>\n  );\n}\n","size_bytes":383},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const resolvedConfig = typeof viteConfig === 'function' \n    ? await viteConfig({ mode: 'development', command: 'serve' })\n    : viteConfig;\n\n  const vite = await createViteServer({\n    ...resolvedConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2411},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"shared/schema.ts":{"content":"import { z } from \"zod\";\n\n// Search result from Jamendo or other platforms\nexport const searchResultSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  artist: z.string(),\n  thumbnail: z.string(),\n  duration: z.string(),\n  platform: z.string(),\n  url: z.string(),\n  embedUrl: z.string().optional(),\n  streamUrl: z.string().optional(),\n  publishedAt: z.string().optional(),\n  viewCount: z.number().optional(),\n  description: z.string().optional(),\n  downloadUrl: z.string().optional(),\n  aiScore: z.number().optional(),\n});\n\nexport type SearchResult = z.infer<typeof searchResultSchema>;\n\n// Search query parameters\nexport const searchQuerySchema = z.object({\n  query: z.string(),\n  sortBy: z.enum([\"relevance\", \"newest\", \"popularity\", \"publicDomain\"]).default(\"relevance\"),\n  platform: z.enum([\"all\", \"jamendo\"]).default(\"all\"),\n});\n\nexport type SearchQuery = z.infer<typeof searchQuerySchema>;\n\n// Vibe matching request\nexport const vibeMatchRequestSchema = z.object({\n  audioData: z.string(), // base64 encoded audio\n  duration: z.number().optional(),\n});\n\nexport type VibeMatchRequest = z.infer<typeof vibeMatchRequestSchema>;\n\n// Vibe matching response\nexport const vibeMatchResultSchema = z.object({\n  vibes: z.array(z.object({\n    name: z.string(),\n    confidence: z.number(),\n    description: z.string().optional(),\n  })),\n  suggestedSearchTerms: z.array(z.string()),\n  mood: z.string().optional(),\n  genre: z.string().optional(),\n  tempo: z.string().optional(),\n});\n\nexport type VibeMatchResult = z.infer<typeof vibeMatchResultSchema>;\n\n// Audio recognition request (Shazam-like)\nexport const audioRecognitionRequestSchema = z.object({\n  audioData: z.string(), // base64 encoded audio\n  duration: z.number(),\n});\n\nexport type AudioRecognitionRequest = z.infer<typeof audioRecognitionRequestSchema>;\n\n// Audio recognition response\nexport const audioRecognitionResultSchema = z.object({\n  recognized: z.boolean(),\n  title: z.string().optional(),\n  artist: z.string().optional(),\n  album: z.string().optional(),\n  releaseDate: z.string().optional(),\n  confidence: z.number().optional(),\n});\n\nexport type AudioRecognitionResult = z.infer<typeof audioRecognitionResultSchema>;\n\n// Currently playing track\nexport const currentTrackSchema = z.object({\n  id: z.string(),\n  title: z.string(),\n  artist: z.string(),\n  thumbnail: z.string(),\n  platform: z.string(),\n  url: z.string(),\n  embedUrl: z.string().optional(),\n  downloadUrl: z.string().optional(),\n  aiScore: z.number().optional(),\n});\n\nexport type CurrentTrack = z.infer<typeof currentTrackSchema>;\n","size_bytes":2566},"VERCEL_SETUP_GUIDE.md":{"content":"# Vercel Deployment Guide for Mate Music Search Engine\n\n## 🚀 Quick Setup\n\n### Vercel Framework Settings\nWhen deploying to Vercel, set the following in your project settings:\n\n**Framework Preset:** `Other` (Do NOT select Vite, React, or Express)\n\n**Build Settings:**\n- Build Command: `npm run build` (or leave empty to use package.json default)\n- Output Directory: `dist/public`\n- Install Command: `npm install`\n\n---\n\n## 📋 Environment Variables\n\nSet these in your Vercel project settings (Settings > Environment Variables):\n\n### ⚠️ CRITICAL - Required for Search to Work:\n```bash\nDATABASE_URL=your_postgresql_connection_string\nNODE_ENV=production\n```\n\n### 🎵 Music Search API Keys (At least ONE required for search results):\nWithout these, search will return **NO RESULTS**. Set at least one:\n\n```bash\n# Option 1: YouTube (Recommended - Best coverage)\nYOUTUBE_API_KEY=your_youtube_api_key\n\n# Option 2: SoundCloud (Good alternative)\nSOUNDCLOUD_CLIENT_ID=your_soundcloud_client_id\n\n# Option 3: RapidAPI (Deezer, Spotify results)\nRAPIDAPI_KEY=your_rapidapi_key\n```\n\n**How to get API keys:**\n- **YouTube API:** [Google Cloud Console](https://console.cloud.google.com/) → Enable YouTube Data API v3\n- **SoundCloud:** [SoundCloud Developers](https://developers.soundcloud.com/)\n- **RapidAPI:** [RapidAPI Deezer](https://rapidapi.com/deezerdevs/api/deezer-1)\n\n### 🤖 AI Features (Optional):\n```bash\nOPENAI_API_KEY=your_openai_api_key        # For AI vibe matching & suggestions\nJAMENDO_CLIENT_ID=your_jamendo_client_id  # Additional music source\nSESSION_SECRET=your_random_secret_string  # For secure sessions\n```\n\n**⚠️ Important Note on AI Features:**\n- AI search suggestions and music recommendations use free external AI APIs\n- These free endpoints are **unreliable** and may not work on Vercel\n- For production AI features, you **must** set `OPENAI_API_KEY`\n- Without OpenAI key: AI suggestions will gracefully fail (returning empty results)\n- The core search functionality works independently of AI features\n\n**Generate SESSION_SECRET:**\n```bash\nopenssl rand -base64 32\n```\n\n### 🚨 Important Notes:\n- **Without music API keys, search won't work on Vercel!**\n- The app uses free APIs as fallbacks (Jamendo, Internet Archive, Mixcloud)\n- For best results, configure at least YouTube or SoundCloud API keys\n\n---\n\n## ⚙️ Configuration Files\n\nYour project is already configured with:\n\n1. **`vercel.json`** - Defines build and routing configuration\n   - Builds the frontend as static site\n   - Builds API routes as serverless functions\n   - Rewrites API calls to `/api/index`\n   - Routes all other requests to `index.html` (SPA routing)\n\n2. **`package.json`** - Has `vercel-build` script that runs `vite build`\n\n3. **`api/index.ts`** - Serverless function for API routes\n\n---\n\n## 🔧 How It Works\n\n### Architecture:\n```\nVercel Deployment\n├── Frontend (Static Site)\n│   └── Built by Vite → dist/public/\n│       ├── index.html\n│       ├── assets/\n│       └── ...\n│\n└── Backend (Serverless Functions)\n    └── api/index.ts\n        ├── Express app\n        └── All /api/* routes\n```\n\n### Request Flow:\n1. **API requests** (`/api/*`) → Routed to `api/index.ts` serverless function\n2. **Static assets** (`/assets/*`) → Served from `dist/public/`\n3. **All other routes** → Served `index.html` (React Router handles routing)\n\n---\n\n## 🚨 Common Issues & Fixes\n\n### Issue 1: Site Shows Raw Code Instead of Rendering\n**Cause:** Wrong framework preset or incorrect vercel.json configuration\n\n**Fix:**\n- Set Framework Preset to **\"Other\"** in Vercel dashboard\n- Ensure `vercel.json` has correct `rewrites` configuration (already done ✅)\n- Verify build output directory is `dist/public`\n\n### Issue 2: API Routes Return 404\n**Cause:** API rewrites not working\n\n**Fix:**\n- Check that `api/index.ts` exists and exports a handler\n- Verify `rewrites` section in `vercel.json` includes `/api/(.*)`\n- Ensure `@vercel/node` is in dependencies (already done ✅)\n\n### Issue 3: SPA Routes Return 404 on Refresh\n**Cause:** Missing catch-all route\n\n**Fix:**\n- Already configured in `vercel.json` with catch-all route to `index.html` ✅\n\n### Issue 4: Database Connection Errors\n**Cause:** DATABASE_URL not set or incorrect\n\n**Fix:**\n1. Add DATABASE_URL to Vercel environment variables\n2. Use PostgreSQL database (Vercel Postgres, Neon, Supabase, etc.)\n3. Run database migrations: `npm run db:push`\n\n### Issue 5: PostCSS Warnings\n**Cause:** Configuration conflict\n\n**Fix:**\n- Keep Tailwind v3 (already configured ✅)\n- Use standard `postcss.config.js` with tailwindcss plugin ✅\n\n### Issue 6: Search Returns No Results on Vercel\n**Cause:** Missing API keys or CORS issues\n\n**Fix:**\n1. **Add at least ONE music API key:**\n   - YouTube API key (recommended) OR\n   - SoundCloud Client ID\n   \n2. **Free APIs that work without keys:**\n   - Jamendo (always works ✅)\n   - Internet Archive (always works ✅)\n   - Mixcloud (always works ✅)\n\n3. **Check Vercel deployment logs:**\n   - Look for API errors or timeout issues\n   - Ensure all environment variables are set\n\n4. **CORS is now configured** - The API handler sets proper CORS headers ✅\n\n---\n\n## 📦 Deployment Steps\n\n### Option 1: GitHub Integration (Recommended)\n\n1. **Push code to GitHub:**\n   ```bash\n   git add .\n   git commit -m \"Configure for Vercel deployment\"\n   git push origin main\n   ```\n\n2. **Import to Vercel:**\n   - Go to https://vercel.com/new\n   - Select your GitHub repository\n   - Set Framework Preset to **\"Other\"**\n   - Add environment variables (DATABASE_URL, etc.)\n   - Click **\"Deploy\"**\n\n3. **Post-deployment:**\n   - Your app will be live at `https://your-project.vercel.app`\n   - Set up database if needed (see below)\n\n### Option 2: Vercel CLI\n\n1. **Install Vercel CLI:**\n   ```bash\n   npm i -g vercel\n   ```\n\n2. **Login:**\n   ```bash\n   vercel login\n   ```\n\n3. **Deploy:**\n   ```bash\n   vercel\n   ```\n\n4. **Follow prompts to configure project**\n\n---\n\n## 🗄️ Database Setup\n\n### Option 1: Vercel Postgres (Easiest)\n\n1. Go to your Vercel project\n2. Click \"Storage\" tab\n3. Click \"Create Database\" → \"Postgres\"\n4. Database URL will be automatically added to environment variables\n5. Push schema: `npm run db:push`\n\n### Option 2: External Database (Neon, Supabase)\n\n1. Create a PostgreSQL database at:\n   - [Neon](https://neon.tech) (recommended - free tier)\n   - [Supabase](https://supabase.com)\n   - [Railway](https://railway.app)\n\n2. Copy the connection string\n\n3. Add to Vercel environment variables:\n   ```\n   DATABASE_URL=postgresql://user:password@host:5432/database?sslmode=require\n   ```\n\n4. Push schema from your local machine:\n   ```bash\n   DATABASE_URL=\"your_connection_string\" npm run db:push\n   ```\n\n---\n\n## ✅ Pre-Deployment Checklist\n\n- [ ] Set Framework Preset to **\"Other\"** in Vercel\n- [ ] Add DATABASE_URL environment variable\n- [ ] Add SESSION_SECRET environment variable\n- [ ] Add API keys (YOUTUBE_API_KEY, OPENAI_API_KEY, etc.)\n- [ ] Verify `vercel.json` configuration\n- [ ] Test build locally: `npm run build`\n- [ ] Push database schema: `npm run db:push`\n\n---\n\n## 🎯 Expected Result\n\nAfter successful deployment:\n\n1. **Frontend:** Beautiful music search interface at `https://your-project.vercel.app`\n2. **API Routes:** Working at `https://your-project.vercel.app/api/*`\n3. **Database:** Connected and tables created\n4. **Features:**\n   - Multi-platform music search ✅\n   - AI mode ✅\n   - Web search with \"/\" prefix ✅\n   - Library management ✅\n   - Lyrics display ✅\n\n---\n\n## 📞 Support\n\nIf you encounter issues:\n\n1. Check Vercel deployment logs in dashboard\n2. Verify all environment variables are set\n3. Test API routes: `https://your-project.vercel.app/api/health`\n4. Check browser console for frontend errors\n\n---\n\n**Remember:** Always set Framework Preset to **\"Other\"** - not Vite, React, or Express!\n","size_bytes":7896},"server/lib/streamsquid.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface StreamSquidResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchStreamSquid(query: string, maxResults: number = 20): Promise<StreamSquidResult[]> {\n  try {\n    // StreamSquid search - using their public search\n    const url = `https://streamsquid.com/api/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.results || data.tracks || [];\n\n    const results: StreamSquidResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.user?.name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.artwork_url || track.thumbnail || track.image || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.permalink_url || track.url || `https://streamsquid.com/track/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.created_at || new Date().toISOString(),\n        viewCount: track.playback_count || track.plays || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'streamsquid',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('StreamSquid search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2776},"server/lib/rapidapi-music.ts":{"content":"import axios from 'axios';\n\nexport interface RapidApiTrack {\n  id: string;\n  title: string;\n  artist: string;\n  album?: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  streamUrl?: string;\n  downloadUrl?: string;\n  publishedAt?: string;\n  viewCount?: number;\n  description?: string;\n  platform: string;\n}\n\n// Example: Deezer API via RapidAPI (replace with your chosen API details)\nexport async function searchRapidApiMusic(query: string, maxResults: number = 20): Promise<RapidApiTrack[]> {\n  const apiKey = process.env.RAPIDAPI_KEY;\n  if (!apiKey) throw new Error('RAPIDAPI_KEY not set');\n\n  // Example endpoint for Deezer via RapidAPI\n  const url = 'https://deezerdevs-deezer.p.rapidapi.com/search';\n  const headers = {\n    'X-RapidAPI-Key': apiKey,\n    'X-RapidAPI-Host': 'deezerdevs-deezer.p.rapidapi.com',\n  };\n\n  const response = await axios.get(url, {\n    params: { q: query },\n    headers,\n  });\n\n  return (response.data.data || []).slice(0, maxResults).map((track: any) => ({\n    id: track.id.toString(),\n    title: track.title,\n    artist: track.artist.name,\n    album: track.album?.title,\n    thumbnail: track.album?.cover_medium || '',\n    duration: `${Math.floor(track.duration / 60)}:${(track.duration % 60).toString().padStart(2, '0')}`,\n    url: track.link,\n    streamUrl: track.preview, // 30s preview\n    downloadUrl: track.link, // Deezer does not provide direct download, but you can use the link\n    publishedAt: undefined,\n    viewCount: undefined,\n    description: track.album?.title,\n    platform: 'deezer',\n  }));\n}\n","size_bytes":1558},"functions/api/lib/freefy.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface FreefyResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchFreefy(query: string, maxResults: number = 20): Promise<FreefyResult[]> {\n  try {\n    // Freefy.app search\n    const url = `https://api.freefy.app/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.tracks || data.results || [];\n\n    const results: FreefyResult[] = tracks.slice(0, maxResults).map((track: any) => {\n      const title = track.title || track.name || 'Unknown';\n      const artist = track.artist || track.artist_name || 'Unknown Artist';\n      \n      return {\n        id: track.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: track.cover || track.thumbnail || track.image || '',\n        duration: formatDuration(track.duration || 0),\n        url: track.url || `https://freefy.app/track/${track.id}`,\n        embedUrl: track.stream_url || track.url || '',\n        publishedAt: track.release_date || new Date().toISOString(),\n        viewCount: track.plays || 0,\n        description: track.description || `${title} by ${artist}`,\n        platform: 'freefy',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('Freefy search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n\nfunction formatDuration(seconds: number): string {\n  const minutes = Math.floor(seconds / 60);\n  const secs = seconds % 60;\n  return `${minutes}:${secs.toString().padStart(2, '0')}`;\n}\n","size_bytes":2657},"server/routes/library.ts":{"content":"import type { Express } from \"express\";\nimport { eq, and, desc } from \"drizzle-orm\";\nimport { getDb, schema } from \"../db\";\nimport { z } from \"zod\";\n\nconst DEFAULT_USER_ID = \"00000000-0000-0000-0000-000000000001\"; // Temporary single-user ID\n\n// Helper to check if database is available\nfunction isDatabaseAvailable() {\n  return !!process.env.DATABASE_URL;\n}\n\nfunction requireDatabase() {\n  if (!isDatabaseAvailable()) {\n    throw new Error(\"Database not configured. Please set up a PostgreSQL database in Replit.\");\n  }\n}\n\n// Playlist endpoints\nexport function registerLibraryRoutes(app: Express) {\n  // Get all playlists\n  app.get(\"/api/playlists\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const playlists = await db.query.playlists.findMany({\n        where: eq(schema.playlists.userId, DEFAULT_USER_ID),\n        orderBy: [desc(schema.playlists.updatedAt)],\n      });\n\n      res.json(playlists);\n    } catch (error: any) {\n      console.error(\"Error fetching playlists:\", error);\n      res.status(500).json({ error: error.message || \"Failed to fetch playlists\" });\n    }\n  });\n\n  // Create playlist\n  app.post(\"/api/playlists\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { name, description } = z.object({\n        name: z.string().min(1).max(100),\n        description: z.string().max(500).optional(),\n      }).parse(req.body);\n\n      const [playlist] = await db.insert(schema.playlists).values({\n        userId: DEFAULT_USER_ID,\n        name,\n        description,\n      }).returning();\n\n      res.json(playlist);\n    } catch (error: any) {\n      console.error(\"Error creating playlist:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid playlist data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: error.message || \"Failed to create playlist\" });\n      }\n    }\n  });\n\n  // Update playlist\n  app.patch(\"/api/playlists/:id\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { id } = req.params;\n      const { name, description } = z.object({\n        name: z.string().min(1).max(100).optional(),\n        description: z.string().max(500).optional(),\n      }).parse(req.body);\n\n      const [playlist] = await db.update(schema.playlists)\n        .set({ name, description, updatedAt: new Date() })\n        .where(and(\n          eq(schema.playlists.id, id),\n          eq(schema.playlists.userId, DEFAULT_USER_ID)\n        ))\n        .returning();\n\n      if (!playlist) {\n        res.status(404).json({ error: \"Playlist not found\" });\n        return;\n      }\n\n      res.json(playlist);\n    } catch (error: any) {\n      console.error(\"Error updating playlist:\", error);\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ error: \"Invalid playlist data\", details: error.errors });\n      } else {\n        res.status(500).json({ error: error.message || \"Failed to update playlist\" });\n      }\n    }\n  });\n\n  // Delete playlist\n  app.delete(\"/api/playlists/:id\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { id } = req.params;\n\n      await db.delete(schema.playlists)\n        .where(and(\n          eq(schema.playlists.id, id),\n          eq(schema.playlists.userId, DEFAULT_USER_ID)\n        ));\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error deleting playlist:\", error);\n      res.status(500).json({ error: error.message || \"Failed to delete playlist\" });\n    }\n  });\n\n  // Get playlist songs\n  app.get(\"/api/playlists/:id/songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { id } = req.params;\n\n      const playlistSongs = await db.query.playlistSongs.findMany({\n        where: eq(schema.playlistSongs.playlistId, id),\n        with: {\n          song: true,\n        },\n        orderBy: [schema.playlistSongs.position],\n      });\n\n      const songs = playlistSongs.map(ps => ps.song);\n      res.json(songs);\n    } catch (error: any) {\n      console.error(\"Error fetching playlist songs:\", error);\n      res.status(500).json({ error: error.message || \"Failed to fetch playlist songs\" });\n    }\n  });\n\n  // Add song to playlist\n  app.post(\"/api/playlists/:id/songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { id } = req.params;\n      const songData = req.body;\n\n      // First, ensure the song exists in songs table\n      const existingSong = await db.query.songs.findFirst({\n        where: eq(schema.songs.id, songData.id),\n      });\n\n      if (!existingSong) {\n        // Insert the song\n        await db.insert(schema.songs).values({\n          id: songData.id,\n          title: songData.title,\n          artist: songData.artist,\n          thumbnail: songData.thumbnail,\n          duration: songData.duration,\n          platform: songData.platform,\n          url: songData.url,\n          embedUrl: songData.embedUrl,\n          publishedAt: songData.publishedAt,\n          viewCount: songData.viewCount,\n          description: songData.description,\n          metadata: songData,\n        }).onConflictDoNothing();\n      }\n\n      // Get current max position\n      const existingPlaylistSongs = await db.query.playlistSongs.findMany({\n        where: eq(schema.playlistSongs.playlistId, id),\n        orderBy: [desc(schema.playlistSongs.position)],\n        limit: 1,\n      });\n\n      const nextPosition = existingPlaylistSongs.length > 0 \n        ? existingPlaylistSongs[0].position + 1 \n        : 0;\n\n      // Add song to playlist\n      await db.insert(schema.playlistSongs).values({\n        playlistId: id,\n        songId: songData.id,\n        position: nextPosition,\n      }).onConflictDoNothing();\n\n      // Update playlist timestamp\n      await db.update(schema.playlists)\n        .set({ updatedAt: new Date() })\n        .where(eq(schema.playlists.id, id));\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error adding song to playlist:\", error);\n      res.status(500).json({ error: error.message || \"Failed to add song to playlist\" });\n    }\n  });\n\n  // Remove song from playlist\n  app.delete(\"/api/playlists/:playlistId/songs/:songId\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { playlistId, songId } = req.params;\n\n      await db.delete(schema.playlistSongs)\n        .where(and(\n          eq(schema.playlistSongs.playlistId, playlistId),\n          eq(schema.playlistSongs.songId, songId)\n        ));\n\n      // Update playlist timestamp\n      await db.update(schema.playlists)\n        .set({ updatedAt: new Date() })\n        .where(eq(schema.playlists.id, playlistId));\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error removing song from playlist:\", error);\n      res.status(500).json({ error: error.message || \"Failed to remove song from playlist\" });\n    }\n  });\n\n  // Get liked songs\n  app.get(\"/api/liked-songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const likedSongs = await db.query.likedSongs.findMany({\n        where: eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n        with: {\n          song: true,\n        },\n        orderBy: [desc(schema.likedSongs.likedAt)],\n      });\n\n      const songs = likedSongs.map(ls => ls.song);\n      res.json(songs);\n    } catch (error: any) {\n      console.error(\"Error fetching liked songs:\", error);\n      res.status(500).json({ error: error.message || \"Failed to fetch liked songs\" });\n    }\n  });\n\n  // Like a song\n  app.post(\"/api/liked-songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const songData = req.body;\n\n      // Ensure song exists\n      const existingSong = await db.query.songs.findFirst({\n        where: eq(schema.songs.id, songData.id),\n      });\n\n      if (!existingSong) {\n        await db.insert(schema.songs).values({\n          id: songData.id,\n          title: songData.title,\n          artist: songData.artist,\n          thumbnail: songData.thumbnail,\n          duration: songData.duration,\n          platform: songData.platform,\n          url: songData.url,\n          embedUrl: songData.embedUrl,\n          publishedAt: songData.publishedAt,\n          viewCount: songData.viewCount,\n          description: songData.description,\n          metadata: songData,\n        }).onConflictDoNothing();\n      }\n\n      // Like the song\n      await db.insert(schema.likedSongs).values({\n        userId: DEFAULT_USER_ID,\n        songId: songData.id,\n      }).onConflictDoNothing();\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error liking song:\", error);\n      res.status(500).json({ error: error.message || \"Failed to like song\" });\n    }\n  });\n\n  // Unlike a song\n  app.delete(\"/api/liked-songs/:songId\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { songId } = req.params;\n\n      await db.delete(schema.likedSongs)\n        .where(and(\n          eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n          eq(schema.likedSongs.songId, songId)\n        ));\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error unliking song:\", error);\n      res.status(500).json({ error: error.message || \"Failed to unlike song\" });\n    }\n  });\n\n  // Get saved songs\n  app.get(\"/api/saved-songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const savedSongs = await db.query.savedSongs.findMany({\n        where: eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n        with: {\n          song: true,\n        },\n        orderBy: [desc(schema.savedSongs.savedAt)],\n      });\n\n      const songs = savedSongs.map(ss => ss.song);\n      res.json(songs);\n    } catch (error: any) {\n      console.error(\"Error fetching saved songs:\", error);\n      res.status(500).json({ error: error.message || \"Failed to fetch saved songs\" });\n    }\n  });\n\n  // Save a song\n  app.post(\"/api/saved-songs\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const songData = req.body;\n\n      // Ensure song exists\n      const existingSong = await db.query.songs.findFirst({\n        where: eq(schema.songs.id, songData.id),\n      });\n\n      if (!existingSong) {\n        await db.insert(schema.songs).values({\n          id: songData.id,\n          title: songData.title,\n          artist: songData.artist,\n          thumbnail: songData.thumbnail,\n          duration: songData.duration,\n          platform: songData.platform,\n          url: songData.url,\n          embedUrl: songData.embedUrl,\n          publishedAt: songData.publishedAt,\n          viewCount: songData.viewCount,\n          description: songData.description,\n          metadata: songData,\n        }).onConflictDoNothing();\n      }\n\n      // Save the song\n      await db.insert(schema.savedSongs).values({\n        userId: DEFAULT_USER_ID,\n        songId: songData.id,\n      }).onConflictDoNothing();\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error saving song:\", error);\n      res.status(500).json({ error: error.message || \"Failed to save song\" });\n    }\n  });\n\n  // Unsave a song\n  app.delete(\"/api/saved-songs/:songId\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { songId } = req.params;\n\n      await db.delete(schema.savedSongs)\n        .where(and(\n          eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n          eq(schema.savedSongs.songId, songId)\n        ));\n\n      res.json({ success: true });\n    } catch (error: any) {\n      console.error(\"Error unsaving song:\", error);\n      res.status(500).json({ error: error.message || \"Failed to unsave song\" });\n    }\n  });\n\n  // Check if song is liked\n  app.get(\"/api/songs/:songId/is-liked\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { songId } = req.params;\n\n      const liked = await db.query.likedSongs.findFirst({\n        where: and(\n          eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n          eq(schema.likedSongs.songId, songId)\n        ),\n      });\n\n      res.json({ isLiked: !!liked });\n    } catch (error: any) {\n      console.error(\"Error checking if song is liked:\", error);\n      res.status(500).json({ error: error.message || \"Failed to check like status\" });\n    }\n  });\n\n  // Check if song is saved\n  app.get(\"/api/songs/:songId/is-saved\", async (req, res) => {\n    try {\n      requireDatabase();\n      const db = getDb();\n      \n      const { songId } = req.params;\n\n      const saved = await db.query.savedSongs.findFirst({\n        where: and(\n          eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n          eq(schema.savedSongs.songId, songId)\n        ),\n      });\n\n      res.json({ isSaved: !!saved });\n    } catch (error: any) {\n      console.error(\"Error checking if song is saved:\", error);\n      res.status(500).json({ error: error.message || \"Failed to check save status\" });\n    }\n  });\n\n  // Get download info for a song\n  app.get(\"/api/songs/:songId/download\", async (req, res) => {\n    try {\n      const { songId } = req.params;\n      const { platform } = req.query;\n\n      // For YouTube, provide the video URL and download instructions\n      if (platform === \"youtube\") {\n        res.json({\n          url: `https://www.youtube.com/watch?v=${songId}`,\n          platform: \"youtube\",\n          instructions: \"Click to open in YouTube. You can download using YouTube Premium or third-party tools.\",\n        });\n      } else if (platform === \"soundcloud\") {\n        res.json({\n          url: `https://soundcloud.com/${songId}`,\n          platform: \"soundcloud\",\n          instructions: \"Click to open in SoundCloud. Download availability depends on the artist's settings.\",\n        });\n      } else {\n        res.status(400).json({ error: \"Invalid platform\" });\n      }\n    } catch (error: any) {\n      console.error(\"Error getting download info:\", error);\n      res.status(500).json({ error: error.message || \"Failed to get download info\" });\n    }\n  });\n}\n","size_bytes":14337},"client/src/components/filter-panel.tsx":{"content":"import { X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Label } from \"@/components/ui/label\";\nimport { RadioGroup, RadioGroupItem } from \"@/components/ui/radio-group\";\n\ninterface FilterPanelProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  sortBy: \"relevance\" | \"newest\" | \"popularity\" | \"publicDomain\";\n  setSortBy: (value: \"relevance\" | \"newest\" | \"popularity\" | \"publicDomain\") => void;\n  platform: \"all\" | \"jamendo\";\n  setPlatform: (value: \"all\" | \"jamendo\") => void;\n}\n\nexport function FilterPanel({ open, onOpenChange, sortBy, setSortBy, platform, setPlatform }: FilterPanelProps) {\n  if (!open) return null;\n\n  return (\n    <>\n      {/* Backdrop */}\n      <div \n        className=\"fixed inset-0 bg-black/60 backdrop-blur-sm z-40 transition-opacity\"\n        onClick={() => onOpenChange(false)}\n      />\n\n      {/* Panel */}\n      <div className=\"fixed right-0 top-0 bottom-0 w-80 glass-elevated border-l border-white/20 z-50 animate-in slide-in-from-right duration-300\">\n        <div className=\"h-full flex flex-col p-6\">\n          {/* Header */}\n          <div className=\"flex items-center justify-between mb-6\">\n            <h2 className=\"text-xl font-display font-semibold\">Filters</h2>\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => onOpenChange(false)}\n              data-testid=\"button-close-filters\"\n            >\n              <X className=\"w-5 h-5\" />\n            </Button>\n          </div>\n\n          {/* Content */}\n          <div className=\"flex-1 space-y-6 overflow-y-auto custom-scrollbar\">\n            {/* Sort by */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium\">Sort By</Label>\n              <RadioGroup value={sortBy} onValueChange={(value) => setSortBy(value as any)}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"relevance\" id=\"relevance\" data-testid=\"radio-relevance\" />\n                  <Label htmlFor=\"relevance\" className=\"font-normal cursor-pointer\">\n                    Most Relevant\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"newest\" id=\"newest\" data-testid=\"radio-newest\" />\n                  <Label htmlFor=\"newest\" className=\"font-normal cursor-pointer\">\n                    Newest First\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"popularity\" id=\"popularity\" data-testid=\"radio-popularity\" />\n                  <Label htmlFor=\"popularity\" className=\"font-normal cursor-pointer\">\n                    Most Popular\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"publicDomain\" id=\"publicDomain\" data-testid=\"radio-public-domain\" />\n                  <Label htmlFor=\"publicDomain\" className=\"font-normal cursor-pointer\">\n                    Public Domain\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n\n            {/* Platform */}\n            <div className=\"space-y-3\">\n              <Label className=\"text-sm font-medium\">Platform</Label>\n              <RadioGroup value={platform} onValueChange={(value) => setPlatform(value as any)}>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"all\" id=\"all\" data-testid=\"radio-all-platforms\" />\n                  <Label htmlFor=\"all\" className=\"font-normal cursor-pointer\">\n                    All Platforms\n                  </Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <RadioGroupItem value=\"jamendo\" id=\"jamendo\" data-testid=\"radio-jamendo\" />\n                  <Label htmlFor=\"jamendo\" className=\"font-normal cursor-pointer\">\n                    Jamendo Only\n                  </Label>\n                </div>\n              </RadioGroup>\n            </div>\n          </div>\n\n          {/* Footer */}\n          <div className=\"pt-6 border-t border-white/10\">\n            <Button\n              onClick={() => onOpenChange(false)}\n              className=\"w-full bg-gradient-to-r from-violet-500 to-blue-500 hover:from-violet-600 hover:to-blue-600\"\n              data-testid=\"button-apply-filters\"\n            >\n              Apply Filters\n            </Button>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n","size_bytes":4612},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"server/lib/playlistsound.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface PlaylistSoundResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchPlaylistSound(query: string, maxResults: number = 20): Promise<PlaylistSoundResult[]> {\n  try {\n    // PlaylistSound.com search\n    const url = `https://playlistsound.com/api/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const playlists = data.playlists || data.results || [];\n\n    const results: PlaylistSoundResult[] = playlists.slice(0, maxResults).map((playlist: any) => {\n      const title = playlist.title || playlist.name || 'Unknown Playlist';\n      const artist = playlist.creator || playlist.user?.name || 'PlaylistSound';\n      \n      return {\n        id: playlist.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: playlist.cover_url || playlist.image || playlist.thumbnail || '',\n        duration: `${playlist.track_count || 0} tracks`,\n        url: playlist.url || `https://playlistsound.com/playlist/${playlist.id}`,\n        embedUrl: playlist.embed_url || playlist.url || '',\n        publishedAt: playlist.created_at || new Date().toISOString(),\n        viewCount: playlist.plays || 0,\n        description: playlist.description || `${title} - Music playlist`,\n        platform: 'playlistsound',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('PlaylistSound search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2609},"server/lib/internet-archive.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface InternetArchiveResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchInternetArchive(query: string, maxResults: number = 20): Promise<InternetArchiveResult[]> {\n  try {\n    const url = 'https://archive.org/advancedsearch.php';\n    const params = new URLSearchParams({\n      'q': `collection:audio AND (${query})`,\n      'fl[]': 'identifier,title,creator,date,format,description',\n      'rows': String(maxResults * 2),\n      'page': '1',\n      'output': 'json'\n    });\n\n    const response = await fetch(`${url}?${params.toString()}`);\n    \n    if (!response.ok) {\n      throw new Error(`Internet Archive API error: ${response.status}`);\n    }\n\n    const data: any = await response.json();\n    const docs = data?.response?.docs || [];\n\n    const results: InternetArchiveResult[] = [];\n\n    for (const doc of docs) {\n      const identifier = doc.identifier;\n      const title = doc.title || 'Unknown';\n      const creator = Array.isArray(doc.creator) ? doc.creator[0] : (doc.creator || 'Unknown Artist');\n      const year = doc.date || 'Unknown';\n      const description = doc.description || `${title} by ${creator}`;\n\n      results.push({\n        id: identifier,\n        title: title,\n        artist: creator,\n        thumbnail: `https://archive.org/services/img/${identifier}`,\n        duration: '0:00', // Internet Archive doesn't provide duration in search results\n        url: `https://archive.org/details/${identifier}`,\n        embedUrl: `https://archive.org/embed/${identifier}`,\n        publishedAt: year,\n        viewCount: 0,\n        description: description,\n        platform: 'internet-archive',\n        aiScore: calculateAIScore(title, creator, query)\n      });\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    console.error('Internet Archive search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2754},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n        display: [\"var(--font-display)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4092},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/search-result-card.tsx":{"content":"import { Play, Pause } from \"lucide-react\";\nimport { SiYoutube, SiSoundcloud } from \"react-icons/si\";\nimport { SearchResult } from \"@shared/schema\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface SearchResultCardProps {\n  result: SearchResult;\n  onPlay: (result: SearchResult) => void;\n  isPlaying?: boolean;\n}\n\nexport function SearchResultCard({ result, onPlay, isPlaying }: SearchResultCardProps) {\n  return (\n    <div \n      className=\"glass rounded-xl overflow-hidden hover-elevate transition-all group\"\n      data-testid={`card-result-${result.id}`}\n    >\n      {/* Thumbnail */}\n      <div className=\"relative aspect-video overflow-hidden\">\n        <img\n          src={result.thumbnail}\n          alt={result.title}\n          className=\"w-full h-full object-cover transition-transform group-hover:scale-105\"\n          loading=\"lazy\"\n        />\n        \n        {/* Duration overlay */}\n        <div className=\"absolute bottom-2 right-2 bg-black/70 backdrop-blur-sm px-2 py-1 rounded text-xs font-mono\">\n          {result.duration}\n        </div>\n\n        {/* Play button overlay */}\n        <div className=\"absolute inset-0 bg-black/40 opacity-0 group-hover:opacity-100 transition-opacity flex items-center justify-center\">\n          <Button\n            size=\"icon\"\n            onClick={() => onPlay(result)}\n            className=\"w-16 h-16 rounded-full bg-violet-500 hover:bg-violet-600 text-white\"\n            data-testid={`button-play-${result.id}`}\n          >\n            {isPlaying ? (\n              <Pause className=\"w-8 h-8\" />\n            ) : (\n              <Play className=\"w-8 h-8 ml-1\" />\n            )}\n          </Button>\n        </div>\n      </div>\n\n      {/* Content */}\n      <div className=\"p-4 space-y-3\">\n        <div className=\"space-y-1\">\n          <h3 \n            className=\"font-medium text-lg line-clamp-2 leading-snug\"\n            data-testid={`text-title-${result.id}`}\n          >\n            {result.title}\n          </h3>\n          <p \n            className=\"text-sm text-muted-foreground\"\n            data-testid={`text-artist-${result.id}`}\n          >\n            {result.artist}\n          </p>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <Badge \n            variant=\"secondary\" \n            className={`${\n              result.platform === \"youtube\" \n                ? \"bg-red-500/20 text-red-400 border-red-500/30\" \n                : \"bg-orange-500/20 text-orange-400 border-orange-500/30\"\n            }`}\n            data-testid={`badge-platform-${result.id}`}\n          >\n            {result.platform === \"youtube\" ? (\n              <SiYoutube className=\"w-3 h-3 mr-1\" />\n            ) : (\n              <SiSoundcloud className=\"w-3 h-3 mr-1\" />\n            )}\n            {result.platform === \"youtube\" ? \"YouTube\" : \"SoundCloud\"}\n          </Badge>\n\n          {result.viewCount && (\n            <span className=\"text-xs text-muted-foreground\">\n              {result.viewCount.toLocaleString()} views\n            </span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3129},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"server/db/schema.d1.ts":{"content":"import { sqliteTable, text, integer, primaryKey, index } from \"drizzle-orm/sqlite-core\";\nimport { relations, sql } from \"drizzle-orm\";\nimport { createInsertSchema, createSelectSchema } from \"drizzle-zod\";\n\nexport const users = sqliteTable(\"users\", {\n  id: text(\"id\").primaryKey(),\n  email: text(\"email\").unique(),\n  firstName: text(\"first_name\"),\n  lastName: text(\"last_name\"),\n  profileImageUrl: text(\"profile_image_url\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const insertUserSchema = createInsertSchema(users);\nexport const selectUserSchema = createSelectSchema(users);\n\nexport const songs = sqliteTable(\"songs\", {\n  id: text(\"id\").primaryKey(),\n  title: text(\"title\").notNull(),\n  artist: text(\"artist\").notNull(),\n  thumbnail: text(\"thumbnail\").notNull(),\n  duration: text(\"duration\"),\n  platform: text(\"platform\").notNull(),\n  url: text(\"url\").notNull(),\n  embedUrl: text(\"embed_url\"),\n  publishedAt: text(\"published_at\"),\n  viewCount: integer(\"view_count\"),\n  description: text(\"description\"),\n  metadata: text(\"metadata\", { mode: \"json\" }),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const insertSongSchema = createInsertSchema(songs);\nexport const selectSongSchema = createSelectSchema(songs);\n\nexport const playlists = sqliteTable(\"playlists\", {\n  id: text(\"id\").primaryKey().$defaultFn(() => crypto.randomUUID()),\n  userId: text(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  name: text(\"name\").notNull(),\n  description: text(\"description\"),\n  thumbnail: text(\"thumbnail\"),\n  createdAt: integer(\"created_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n  updatedAt: integer(\"updated_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n});\n\nexport const insertPlaylistSchema = createInsertSchema(playlists);\nexport const selectPlaylistSchema = createSelectSchema(playlists);\n\nexport const playlistSongs = sqliteTable(\"playlist_songs\", {\n  playlistId: text(\"playlist_id\").references(() => playlists.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  position: integer(\"position\").notNull().default(0),\n  addedAt: integer(\"added_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.playlistId, table.songId] }),\n}));\n\nexport const insertPlaylistSongSchema = createInsertSchema(playlistSongs);\nexport const selectPlaylistSongSchema = createSelectSchema(playlistSongs);\n\nexport const likedSongs = sqliteTable(\"liked_songs\", {\n  userId: text(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  likedAt: integer(\"liked_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.userId, table.songId] }),\n}));\n\nexport const insertLikedSongSchema = createInsertSchema(likedSongs);\nexport const selectLikedSongSchema = createSelectSchema(likedSongs);\n\nexport const savedSongs = sqliteTable(\"saved_songs\", {\n  userId: text(\"user_id\").references(() => users.id, { onDelete: \"cascade\" }).notNull(),\n  songId: text(\"song_id\").references(() => songs.id, { onDelete: \"cascade\" }).notNull(),\n  savedAt: integer(\"saved_at\", { mode: \"timestamp\" }).notNull().default(sql`(unixepoch())`),\n}, (table) => ({\n  pk: primaryKey({ columns: [table.userId, table.songId] }),\n}));\n\nexport const insertSavedSongSchema = createInsertSchema(savedSongs);\nexport const selectSavedSongSchema = createSelectSchema(savedSongs);\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = typeof users.$inferInsert;\nexport type Song = typeof songs.$inferSelect;\nexport type InsertSong = typeof songs.$inferInsert;\nexport type Playlist = typeof playlists.$inferSelect;\nexport type InsertPlaylist = typeof playlists.$inferInsert;\nexport type PlaylistSong = typeof playlistSongs.$inferSelect;\nexport type InsertPlaylistSong = typeof playlistSongs.$inferInsert;\nexport type LikedSong = typeof likedSongs.$inferSelect;\nexport type InsertLikedSong = typeof likedSongs.$inferInsert;\nexport type SavedSong = typeof savedSongs.$inferSelect;\nexport type InsertSavedSong = typeof savedSongs.$inferInsert;\n\nexport const usersRelations = relations(users, ({ many }) => ({\n  playlists: many(playlists),\n  likedSongs: many(likedSongs),\n  savedSongs: many(savedSongs),\n}));\n\nexport const playlistsRelations = relations(playlists, ({ one, many }) => ({\n  user: one(users, {\n    fields: [playlists.userId],\n    references: [users.id],\n  }),\n  playlistSongs: many(playlistSongs),\n}));\n\nexport const songsRelations = relations(songs, ({ many }) => ({\n  playlistSongs: many(playlistSongs),\n  likedBy: many(likedSongs),\n  savedBy: many(savedSongs),\n}));\n\nexport const playlistSongsRelations = relations(playlistSongs, ({ one }) => ({\n  playlist: one(playlists, {\n    fields: [playlistSongs.playlistId],\n    references: [playlists.id],\n  }),\n  song: one(songs, {\n    fields: [playlistSongs.songId],\n    references: [songs.id],\n  }),\n}));\n\nexport const likedSongsRelations = relations(likedSongs, ({ one }) => ({\n  user: one(users, {\n    fields: [likedSongs.userId],\n    references: [users.id],\n  }),\n  song: one(songs, {\n    fields: [likedSongs.songId],\n    references: [songs.id],\n  }),\n}));\n\nexport const savedSongsRelations = relations(savedSongs, ({ one }) => ({\n  user: one(users, {\n    fields: [savedSongs.userId],\n    references: [users.id],\n  }),\n  song: one(songs, {\n    fields: [savedSongs.songId],\n    references: [songs.id],\n  }),\n}));\n","size_bytes":5824},"functions/api/library.ts":{"content":"import { Hono } from 'hono';\nimport { drizzle } from 'drizzle-orm/d1';\nimport { eq, and, desc } from 'drizzle-orm';\nimport * as schema from '../../server/db/schema.d1';\n\ntype Env = {\n  DB: D1Database;\n};\n\nconst app = new Hono<{ Bindings: Env }>();\n\nconst DEFAULT_USER_ID = \"00000000-0000-0000-0000-000000000001\";\n\napp.get(\"/api/playlists\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    \n    const playlists = await db.query.playlists.findMany({\n      where: eq(schema.playlists.userId, DEFAULT_USER_ID),\n      orderBy: [desc(schema.playlists.updatedAt)],\n    });\n\n    return c.json(playlists);\n  } catch (error: any) {\n    console.error(\"Error fetching playlists:\", error);\n    return c.json({ error: error.message || \"Failed to fetch playlists\" }, 500);\n  }\n});\n\napp.post(\"/api/playlists\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const { name, description } = await c.req.json();\n\n    if (!name || typeof name !== 'string' || name.length < 1 || name.length > 100) {\n      return c.json({ error: \"Invalid playlist name\" }, 400);\n    }\n\n    const [playlist] = await db.insert(schema.playlists).values({\n      userId: DEFAULT_USER_ID,\n      name,\n      description: description || null,\n    }).returning();\n\n    return c.json(playlist);\n  } catch (error: any) {\n    console.error(\"Error creating playlist:\", error);\n    return c.json({ error: error.message || \"Failed to create playlist\" }, 500);\n  }\n});\n\napp.patch(\"/api/playlists/:id\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const id = c.req.param('id');\n    const { name, description } = await c.req.json();\n\n    const updateData: any = {};\n    if (name) updateData.name = name;\n    if (description !== undefined) updateData.description = description;\n    updateData.updatedAt = Math.floor(Date.now() / 1000);\n\n    const [playlist] = await db.update(schema.playlists)\n      .set(updateData)\n      .where(and(\n        eq(schema.playlists.id, id),\n        eq(schema.playlists.userId, DEFAULT_USER_ID)\n      ))\n      .returning();\n\n    if (!playlist) {\n      return c.json({ error: \"Playlist not found\" }, 404);\n    }\n\n    return c.json(playlist);\n  } catch (error: any) {\n    console.error(\"Error updating playlist:\", error);\n    return c.json({ error: error.message || \"Failed to update playlist\" }, 500);\n  }\n});\n\napp.delete(\"/api/playlists/:id\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const id = c.req.param('id');\n\n    await db.delete(schema.playlists)\n      .where(and(\n        eq(schema.playlists.id, id),\n        eq(schema.playlists.userId, DEFAULT_USER_ID)\n      ));\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error deleting playlist:\", error);\n    return c.json({ error: error.message || \"Failed to delete playlist\" }, 500);\n  }\n});\n\napp.get(\"/api/playlists/:id/songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const id = c.req.param('id');\n\n    const songs = await db.query.playlistSongs.findMany({\n      where: eq(schema.playlistSongs.playlistId, id),\n      with: {\n        song: true,\n      },\n      orderBy: [schema.playlistSongs.position],\n    });\n\n    return c.json(songs.map(ps => ps.song));\n  } catch (error: any) {\n    console.error(\"Error fetching playlist songs:\", error);\n    return c.json({ error: error.message || \"Failed to fetch playlist songs\" }, 500);\n  }\n});\n\napp.post(\"/api/playlists/:id/songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const id = c.req.param('id');\n    const songData = await c.req.json();\n\n    const existingSong = await db.query.songs.findFirst({\n      where: eq(schema.songs.id, songData.id),\n    });\n\n    if (!existingSong) {\n      await db.insert(schema.songs).values(songData);\n    }\n\n    const existingPlaylistSong = await db.query.playlistSongs.findFirst({\n      where: and(\n        eq(schema.playlistSongs.playlistId, id),\n        eq(schema.playlistSongs.songId, songData.id)\n      ),\n    });\n\n    if (existingPlaylistSong) {\n      return c.json({ error: \"Song already in playlist\" }, 409);\n    }\n\n    const maxPosition = await db.query.playlistSongs.findFirst({\n      where: eq(schema.playlistSongs.playlistId, id),\n      orderBy: [desc(schema.playlistSongs.position)],\n    });\n\n    await db.insert(schema.playlistSongs).values({\n      playlistId: id,\n      songId: songData.id,\n      position: (maxPosition?.position || 0) + 1,\n    });\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error adding song to playlist:\", error);\n    return c.json({ error: error.message || \"Failed to add song to playlist\" }, 500);\n  }\n});\n\napp.delete(\"/api/playlists/:playlistId/songs/:songId\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const playlistId = c.req.param('playlistId');\n    const songId = c.req.param('songId');\n\n    await db.delete(schema.playlistSongs)\n      .where(and(\n        eq(schema.playlistSongs.playlistId, playlistId),\n        eq(schema.playlistSongs.songId, songId)\n      ));\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error removing song from playlist:\", error);\n    return c.json({ error: error.message || \"Failed to remove song from playlist\" }, 500);\n  }\n});\n\napp.get(\"/api/liked-songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    \n    const likedSongs = await db.query.likedSongs.findMany({\n      where: eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n      with: {\n        song: true,\n      },\n      orderBy: [desc(schema.likedSongs.likedAt)],\n    });\n\n    return c.json(likedSongs.map(ls => ls.song));\n  } catch (error: any) {\n    console.error(\"Error fetching liked songs:\", error);\n    return c.json({ error: error.message || \"Failed to fetch liked songs\" }, 500);\n  }\n});\n\napp.post(\"/api/liked-songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const songData = await c.req.json();\n\n    const existingSong = await db.query.songs.findFirst({\n      where: eq(schema.songs.id, songData.id),\n    });\n\n    if (!existingSong) {\n      await db.insert(schema.songs).values(songData);\n    }\n\n    const existingLike = await db.query.likedSongs.findFirst({\n      where: and(\n        eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n        eq(schema.likedSongs.songId, songData.id)\n      ),\n    });\n\n    if (existingLike) {\n      return c.json({ error: \"Song already liked\" }, 409);\n    }\n\n    await db.insert(schema.likedSongs).values({\n      userId: DEFAULT_USER_ID,\n      songId: songData.id,\n    });\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error liking song:\", error);\n    return c.json({ error: error.message || \"Failed to like song\" }, 500);\n  }\n});\n\napp.delete(\"/api/liked-songs/:songId\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const songId = c.req.param('songId');\n\n    await db.delete(schema.likedSongs)\n      .where(and(\n        eq(schema.likedSongs.userId, DEFAULT_USER_ID),\n        eq(schema.likedSongs.songId, songId)\n      ));\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error unliking song:\", error);\n    return c.json({ error: error.message || \"Failed to unlike song\" }, 500);\n  }\n});\n\napp.get(\"/api/saved-songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    \n    const savedSongs = await db.query.savedSongs.findMany({\n      where: eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n      with: {\n        song: true,\n      },\n      orderBy: [desc(schema.savedSongs.savedAt)],\n    });\n\n    return c.json(savedSongs.map(ss => ss.song));\n  } catch (error: any) {\n    console.error(\"Error fetching saved songs:\", error);\n    return c.json({ error: error.message || \"Failed to fetch saved songs\" }, 500);\n  }\n});\n\napp.post(\"/api/saved-songs\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const songData = await c.req.json();\n\n    const existingSong = await db.query.songs.findFirst({\n      where: eq(schema.songs.id, songData.id),\n    });\n\n    if (!existingSong) {\n      await db.insert(schema.songs).values(songData);\n    }\n\n    const existingSave = await db.query.savedSongs.findFirst({\n      where: and(\n        eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n        eq(schema.savedSongs.songId, songData.id)\n      ),\n    });\n\n    if (existingSave) {\n      return c.json({ error: \"Song already saved\" }, 409);\n    }\n\n    await db.insert(schema.savedSongs).values({\n      userId: DEFAULT_USER_ID,\n      songId: songData.id,\n    });\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error saving song:\", error);\n    return c.json({ error: error.message || \"Failed to save song\" }, 500);\n  }\n});\n\napp.delete(\"/api/saved-songs/:songId\", async (c) => {\n  try {\n    const db = drizzle(c.env.DB, { schema });\n    const songId = c.req.param('songId');\n\n    await db.delete(schema.savedSongs)\n      .where(and(\n        eq(schema.savedSongs.userId, DEFAULT_USER_ID),\n        eq(schema.savedSongs.songId, songId)\n      ));\n\n    return c.json({ success: true });\n  } catch (error: any) {\n    console.error(\"Error unsaving song:\", error);\n    return c.json({ error: error.message || \"Failed to unsave song\" }, 500);\n  }\n});\n\nexport const onRequest = app.fetch;\n","size_bytes":9370},"functions/api/lib/youtube.ts":{"content":"// Reference: youtube blueprint integration\nimport { google } from 'googleapis';\n\nlet connectionSettings: any;\n\nasync function getAccessToken() {\n  if (connectionSettings && connectionSettings.settings?.expires_at && new Date(connectionSettings.settings.expires_at).getTime() > Date.now()) {\n    return connectionSettings.settings.access_token;\n  }\n  \n  const hostname = process.env.REPLIT_CONNECTORS_HOSTNAME;\n  const xReplitToken = process.env.REPL_IDENTITY \n    ? 'repl ' + process.env.REPL_IDENTITY \n    : process.env.WEB_REPL_RENEWAL \n    ? 'depl ' + process.env.WEB_REPL_RENEWAL \n    : null;\n\n  if (!xReplitToken) {\n    throw new Error('YouTube connection not available - X_REPLIT_TOKEN not found');\n  }\n\n  if (!hostname) {\n    throw new Error('YouTube connection not available - REPLIT_CONNECTORS_HOSTNAME not found');\n  }\n\n  try {\n    const response = await fetch(\n      'https://' + hostname + '/api/v2/connection?include_secrets=true&connector_names=youtube',\n      {\n        headers: {\n          'Accept': 'application/json',\n          'X_REPLIT_TOKEN': xReplitToken\n        }\n      }\n    );\n\n    if (!response.ok) {\n      throw new Error(`Failed to fetch YouTube connection: ${response.status}`);\n    }\n\n    const data = await response.json();\n    connectionSettings = data.items?.[0];\n\n    if (!connectionSettings) {\n      throw new Error('YouTube connection not configured. Please set up the YouTube connector in Replit.');\n    }\n\n    const accessToken = connectionSettings.settings?.access_token || connectionSettings.settings?.oauth?.credentials?.access_token;\n\n    if (!accessToken) {\n      throw new Error('YouTube access token not available. Please reconnect the YouTube connector.');\n    }\n    \n    return accessToken;\n  } catch (error) {\n    console.error('YouTube connection error:', error);\n    throw error;\n  }\n}\n\n// WARNING: Never cache this client.\n// Access tokens expire, so a new client must be created each time.\n// Always call this function again to get a fresh client.\nexport async function getUncachableYouTubeClient() {\n  const accessToken = await getAccessToken();\n  \n  // Create an OAuth2 client and set the credentials\n  const oauth2Client = new google.auth.OAuth2();\n  oauth2Client.setCredentials({\n    access_token: accessToken\n  });\n  \n  return google.youtube({ \n    version: 'v3', \n    auth: oauth2Client \n  });\n}\n\nexport interface YouTubeSearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n}\n\nexport async function searchYouTube(query: string, maxResults: number = 20): Promise<YouTubeSearchResult[]> {\n  try {\n    const youtube = await getUncachableYouTubeClient();\n    \n    // Search for music videos only\n    const searchResponse = await youtube.search.list({\n      part: ['snippet'],\n      q: query,\n      type: ['video'],\n      videoCategoryId: '10', // Music category\n      maxResults,\n      order: 'relevance',\n    });\n\n    if (!searchResponse.data.items) {\n      return [];\n    }\n\n    const videoIds = searchResponse.data.items\n      .map(item => item.id?.videoId)\n      .filter(Boolean) as string[];\n\n    if (videoIds.length === 0) {\n      return [];\n    }\n\n    // Get video details for duration and statistics\n    const videosResponse = await youtube.videos.list({\n      part: ['snippet', 'contentDetails', 'statistics'],\n      id: videoIds,\n    });\n\n    const results: YouTubeSearchResult[] = [];\n\n    for (const video of videosResponse.data.items || []) {\n      if (!video.id) continue;\n\n      const duration = parseDuration(video.contentDetails?.duration || 'PT0S');\n      const snippet = video.snippet;\n      \n      results.push({\n        id: video.id,\n        title: snippet?.title || 'Unknown',\n        artist: snippet?.channelTitle || 'Unknown Artist',\n        thumbnail: snippet?.thumbnails?.high?.url || snippet?.thumbnails?.default?.url || '',\n        duration,\n        url: `https://www.youtube.com/watch?v=${video.id}`,\n        embedUrl: `https://www.youtube.com/embed/${video.id}`,\n        publishedAt: snippet?.publishedAt || new Date().toISOString(),\n        viewCount: parseInt(video.statistics?.viewCount || '0'),\n        description: snippet?.description || '',\n      });\n    }\n\n    return results;\n  } catch (error) {\n    console.error('YouTube search error:', error);\n    // Return empty array instead of throwing - allows other sources to work\n    return [];\n  }\n}\n\nfunction parseDuration(duration: string): string {\n  const match = duration.match(/PT(?:(\\d+)H)?(?:(\\d+)M)?(?:(\\d+)S)?/);\n  if (!match) return '0:00';\n\n  const hours = parseInt(match[1] || '0');\n  const minutes = parseInt(match[2] || '0');\n  const seconds = parseInt(match[3] || '0');\n\n  if (hours > 0) {\n    return `${hours}:${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;\n  }\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\n","size_bytes":4968},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"server/lib/soundcloud.ts":{"content":"// SoundCloud search implementation using public API\nimport fetch from 'node-fetch';\n\nexport interface SoundCloudSearchResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n}\n\nexport async function searchSoundCloud(query: string, maxResults: number = 20): Promise<SoundCloudSearchResult[]> {\n  try {\n    // Try multiple client IDs for better reliability\n    const clientIds = [\n      '2t9loNQH90kzJcsFCODdigxfp325aq4z',\n      'a3e059563d7fd3372b49b37f00a00bcf',\n      'iZIs9mchVcX5lhVRyQGGAYlNPVldzAoX',\n      'c3e059563d7fd3372b49b37f00a00bcf'\n    ];\n    \n    let response;\n    let lastError;\n    \n    // Try each client ID until one works\n    for (const clientId of clientIds) {\n      const url = `https://api-v2.soundcloud.com/search?q=${encodeURIComponent(query)}&limit=${maxResults}&client_id=${clientId}`;\n      \n      try {\n        response = await fetch(url, {\n          headers: {\n            'Accept': 'application/json',\n            'User-Agent': 'Mozilla/5.0'\n          }\n        });\n\n        if (response.ok) {\n          break; // Success! Use this response\n        }\n        lastError = response.status;\n      } catch (err) {\n        lastError = err;\n        continue;\n      }\n    }\n\n    if (!response || !response.ok) {\n      // Return empty array gracefully when API is unavailable\n      return [];\n    }\n\n    const data: any = await response.json();\n    const tracks = data.collection || [];\n\n    const results: SoundCloudSearchResult[] = [];\n\n    for (const item of tracks) {\n      // Only process tracks, not playlists or users\n      if (item.kind === 'track' && item.id) {\n        const durationMs = item.duration || 0;\n        const duration = formatDuration(durationMs);\n        \n        results.push({\n          id: String(item.id),\n          title: item.title || 'Unknown',\n          artist: item.user?.username || 'Unknown Artist',\n          thumbnail: item.artwork_url || item.user?.avatar_url || '',\n          duration: duration,\n          url: item.permalink_url || `https://soundcloud.com/${item.user?.permalink}/${item.permalink}`,\n          embedUrl: `https://w.soundcloud.com/player/?url=${encodeURIComponent(item.permalink_url || '')}`,\n          publishedAt: item.created_at || new Date().toISOString(),\n          viewCount: item.playback_count || 0,\n          description: item.description || `${item.title} by ${item.user?.username || 'Unknown'}`,\n          platform: 'soundcloud'\n        });\n      }\n    }\n\n    return results.slice(0, maxResults);\n  } catch (error) {\n    console.error('SoundCloud search error:', error);\n    return [];\n  }\n}\n\n// Helper function to format duration from milliseconds\nexport function formatDuration(ms: number): string {\n  const totalSeconds = Math.floor(ms / 1000);\n  const minutes = Math.floor(totalSeconds / 60);\n  const seconds = totalSeconds % 60;\n  return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n}\n","size_bytes":3053},"client/src/pages/home.tsx":{"content":"import { useState, useRef, useCallback, useEffect } from \"react\";\nimport { useLocation } from \"wouter\";\nimport { Search, Mic, Music, Moon, Sun, Info, Mail, Menu } from \"lucide-react\";\nimport { useTheme } from \"next-themes\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { VibeMatchModal } from \"@/components/vibe-match-modal\";\nimport { SearchResult } from \"@shared/schema\";\n\n\nexport default function HomePage() {\n\n  const [, setLocation] = useLocation();\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [aiMode, setAiMode] = useState(() => {\n    if (typeof window !== 'undefined') {\n      return localStorage.getItem('aiMode') === 'true';\n    }\n    return false;\n  });\n  // Sync aiMode to localStorage\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('aiMode', aiMode ? 'true' : 'false');\n    }\n  }, [aiMode]);\n  const [showVibeMatch, setShowVibeMatch] = useState(false);\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [currentTrack, setCurrentTrack] = useState<SearchResult | null>(null);\n  const { theme, setTheme } = useTheme();\n  const [aiSuggestions, setAiSuggestions] = useState<any[]>([]);\n  const [showSuggestions, setShowSuggestions] = useState(false);\n  const userHistory = useRef<any[]>([]);\n  const lastSuggestionQueries = useRef<Set<string>>(new Set());\n\n  // Helper to fetch new AI suggestions\n  const fetchAiSuggestions = useCallback(async () => {\n    try {\n      const res = await fetch(\"/api/ai/suggestions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userHistory: userHistory.current }),\n      });\n      const data = await res.json();\n      // Filter out suggestions that are the same as last time\n      const newSuggestions = (data.suggestions || []).filter((s: any) => !lastSuggestionQueries.current.has(s.query));\n      // If all are new, update; else, just use the new ones\n      setAiSuggestions(newSuggestions.length > 0 ? newSuggestions.slice(0, 3) : (data.suggestions || []).slice(0, 3));\n      lastSuggestionQueries.current = new Set((data.suggestions || []).map((s: any) => s.query));\n    } catch {}\n  }, []);\n\n  const handleSearch = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (searchQuery.trim()) {\n      setIsSearching(true);\n      userHistory.current.push({ type: \"search\", query: searchQuery.trim(), ts: Date.now() });\n      setShowSuggestions(true);\n      await fetchAiSuggestions();\n      // Pass aiMode parameter in URL\n      const params = new URLSearchParams({ q: searchQuery.trim() });\n      if (aiMode) {\n        params.set('aiMode', 'true');\n      }\n      setLocation(`/search?${params.toString()}`);\n    }\n  };\n\n  const handleTrackSelect = async (track: SearchResult) => {\n    setCurrentTrack(track);\n    userHistory.current.push({ type: \"play\", trackId: track.id, ts: Date.now() });\n    if (showSuggestions) await fetchAiSuggestions();\n  };\n\n  return (\n    <>\n\n\n      <div className=\"min-h-screen flex flex-col relative overflow-hidden\">\n        {/* Sidebar toggle button (top left) - always visible */}\n\n\n        {/* Navigation buttons */}\n        <div className=\"fixed top-6 right-6 z-50 flex items-center gap-2\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/about\")}\n            className=\"text-violet-400 hover:text-violet-300 glass\"\n          >\n            <Info className=\"w-4 h-4 mr-2\" />\n            About\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            onClick={() => setLocation(\"/contact\")}\n            className=\"text-violet-400 hover:text-violet-300 glass\"\n          >\n            <Mail className=\"w-4 h-4 mr-2\" />\n            Contact\n          </Button>\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setTheme(theme === \"dark\" ? \"light\" : \"dark\")}\n            className=\"text-violet-400 glass\"\n          >\n            {theme === \"dark\" ? <Sun className=\"w-5 h-5\" /> : <Moon className=\"w-5 h-5\" />}\n          </Button>\n        </div>\n\n        {/* AI suggestion cards after first search */}\n        {showSuggestions && aiSuggestions.length > 0 && (\n          <div className=\"mt-8 grid grid-cols-1 md:grid-cols-3 gap-6\">\n            {aiSuggestions.slice(0, 3).map((s, i) => (\n              <div key={i} className=\"glass-elevated rounded-xl p-6 flex flex-col items-center text-center shadow-lg\">\n                <h3 className=\"font-semibold text-lg mb-2\">{s.title}</h3>\n                <p className=\"text-muted-foreground mb-4\">{s.description}</p>\n                <Button onClick={() => setSearchQuery(s.query)} size=\"sm\" className=\"mt-auto\">Try: {s.query}</Button>\n              </div>\n            ))}\n          </div>\n        )}\n\n        {/* Main content */}\n        <div className=\"flex-1 flex flex-col items-center justify-center\">\n        {/* Animated gradient background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-violet-600/20 via-background to-blue-600/20 animate-gradient\" />\n        \n        {/* Floating music notes animation */}\n        <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\n          <div className=\"absolute top-1/4 left-1/4 text-violet-500/20 animate-float\">\n            <Music className=\"w-16 h-16\" />\n          </div>\n          <div className=\"absolute top-1/3 right-1/4 text-blue-500/20 animate-float\" style={{ animationDelay: \"1s\" }}>\n            <Music className=\"w-12 h-12\" />\n          </div>\n          <div className=\"absolute bottom-1/4 left-1/3 text-violet-500/20 animate-float\" style={{ animationDelay: \"2s\" }}>\n            <Music className=\"w-20 h-20\" />\n          </div>\n        </div>\n\n        {/* Main content */}\n        <div className=\"relative z-10 w-full max-w-4xl px-6 space-y-8\">\n          {/* Logo/Brand */}\n          <div className=\"text-center space-y-4\">\n            <h1 className=\"text-6xl md:text-7xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent\">\n              Mate.\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              Search, discover, and vibe with music\n            </p>\n          </div>\n\n          {/* Search bar */}\n          <form onSubmit={handleSearch} className=\"relative\">\n            <div className=\"glass-elevated rounded-full p-1 animate-pulse-glow\">\n              <div className=\"flex items-center gap-2 px-6 h-14\">\n                <Search className=\"w-5 h-5 text-muted-foreground\" />\n                <Input\n                  type=\"search\"\n                  placeholder=\"Search for songs, artists, or albums...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"flex-1 bg-transparent border-0 focus-visible:ring-0 text-base placeholder:text-muted-foreground\"\n                  data-testid=\"input-search\"\n                />\n                {/* AI toggle button */}\n                <Button\n                  type=\"button\"\n                  size=\"sm\"\n                  variant=\"ghost\"\n                  className={`backdrop-blur-md bg-white/10 border border-white/10 px-4 py-1 rounded-full font-bold text-base select-none focus:outline-none focus:ring-2 focus:ring-violet-400 transition-all duration-200 shadow-md ${aiMode ? \"text-white animate-glow bg-gradient-to-r from-violet-500 to-blue-500 shadow-lg\" : \"text-violet-400\"}`}\n                  style={{\n                    boxShadow: aiMode ? \"0 0 12px 2px var(--theme-accent, #8b5cf6)\" : undefined,\n                    filter: \"blur(0px)\",\n                    color: theme === 'light' && !aiMode ? '#4c1d95' : undefined // dark violet for light mode\n                  }}\n                  onClick={() => setAiMode((v) => !v)}\n                  title={aiMode ? \"AI mode on\" : \"Enable AI mode\"}\n                  tabIndex={0}\n                >\n                  AI\n                </Button>\n                {searchQuery.trim() && (\n                  <Button\n                    type=\"submit\"\n                    size=\"sm\"\n                    disabled={isSearching}\n                    className={`glass bg-gradient-to-r from-violet-500/80 to-blue-500/80 hover:from-violet-600/90 hover:to-blue-600/90 animate-fade-in backdrop-blur-lg ${isSearching ? 'opacity-70 cursor-not-allowed' : ''}`}\n                    style={{ color: theme === 'light' ? '#4c1d95' : undefined }}\n                  >\n                    {isSearching ? (\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin\" />\n                        <span>Searching...</span>\n                      </div>\n                    ) : (\n                      'Search'\n                    )}\n                  </Button>\n                )}\n                <Button\n                  type=\"button\"\n                  size=\"icon\"\n                  variant=\"ghost\"\n                  onClick={() => setShowVibeMatch(true)}\n                  className=\"text-violet-400 hover:text-violet-300\"\n                  data-testid=\"button-vibe-match\"\n                >\n                  <Mic className=\"w-5 h-5\" />\n                </Button>\n              </div>\n            </div>\n          </form>\n        </div>\n        </div>\n      </div>\n\n      <VibeMatchModal \n        open={showVibeMatch} \n        onOpenChange={setShowVibeMatch}\n      />\n    </>\n  );\n}\n","size_bytes":9661},"client/src/pages/contact.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Mail, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function Contact() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <header className=\"sticky top-0 z-40 glass-elevated border-b border-white/10\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"text-violet-400\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <button \n              onClick={() => setLocation(\"/\")}\n              className=\"text-2xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent\"\n            >\n              Mate.\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1 max-w-4xl w-full mx-auto px-6 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <Mail className=\"w-16 h-16 mx-auto text-violet-400\" />\n            <h1 className=\"text-4xl md:text-5xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent\">\n              Contact Us\n            </h1>\n            <p className=\"text-xl text-muted-foreground\">\n              We'd love to hear from you\n            </p>\n          </div>\n\n          <div className=\"glass rounded-2xl p-8 md:p-12 space-y-8\">\n            <div className=\"text-center space-y-4\">\n              <p className=\"text-lg text-muted-foreground\">\n                Have questions, suggestions, or want to collaborate with Mate Nation? \n                Get in touch with us!\n              </p>\n            </div>\n\n            <div className=\"flex flex-col items-center space-y-4\">\n              <div className=\"glass-elevated rounded-xl p-6 w-full max-w-md text-center space-y-4\">\n                <Mail className=\"w-8 h-8 mx-auto text-violet-400\" />\n                <div>\n                  <h3 className=\"font-display font-medium text-lg mb-2\">Email Us</h3>\n                  <a \n                    href=\"mailto:info@matenation.org\"\n                    className=\"text-violet-400 hover:text-violet-300 transition-colors text-lg\"\n                  >\n                    info@matenation.org\n                  </a>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"pt-6 border-t border-white/10\">\n              <p className=\"text-center text-muted-foreground\">\n                Whether you're an artist looking to join Mate Nation, a music enthusiast with feedback, \n                or someone interested in partnering with us, we're here to listen.\n              </p>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":2995},"client/src/lib/lyrist.ts":{"content":"export async function getLyrics(artist: string, title: string): Promise<{ lyrics: string }> {\n  const apis = [\n    {\n      name: 'lyrics.ovh',\n      url: `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(title)}`,\n      transform: (data: any) => data.lyrics\n    },\n    {\n      name: 'some-random-api',\n      url: `https://some-random-api.com/others/lyrics?title=${encodeURIComponent(title + ' ' + artist)}`,\n      transform: (data: any) => data.lyrics\n    }\n  ];\n\n  for (const api of apis) {\n    try {\n      const response = await fetch(api.url, { \n        signal: AbortSignal.timeout(10000)\n      });\n      \n      if (response.ok) {\n        const data = await response.json();\n        const lyrics = api.transform(data);\n        \n        if (lyrics && lyrics.trim()) {\n          return { lyrics };\n        }\n      }\n    } catch (error) {\n      console.warn(`Failed to fetch from ${api.name}:`, error);\n      continue;\n    }\n  }\n  \n  throw new Error(\"No lyrics found from any source\");\n}\n","size_bytes":1016},"client/src/components/layout.tsx":{"content":"import { useState, ReactNode } from \"react\";\nimport { Menu } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { LibrarySidebar } from \"@/components/library-sidebar\";\nimport { MusicPlayer } from \"@/components/music-player\";\nimport { SearchResult } from \"@shared/schema\";\n\ninterface LayoutProps {\n  children: ReactNode;\n  showSidebarButton?: boolean;\n}\n\nlet currentTrack: SearchResult | null = null;\nlet setCurrentTrackGlobal: ((track: SearchResult | null) => void) | null = null;\n\nexport function Layout({ children, showSidebarButton = true }: LayoutProps) {\n  const [isSidebarOpen, setIsSidebarOpen] = useState(false);\n  const [playingTrack, setPlayingTrack] = useState<SearchResult | null>(currentTrack);\n\n  // Store the setter globally so other components can use it\n  if (!setCurrentTrackGlobal) {\n    setCurrentTrackGlobal = setPlayingTrack;\n  }\n\n  const handlePlayTrack = (track: SearchResult) => {\n    setPlayingTrack(track);\n    currentTrack = track;\n  };\n\n  return (\n    <div className=\"relative min-h-screen\">\n      {/* Sidebar toggle button */}\n      {showSidebarButton && (\n        <div className=\"fixed top-6 left-6 z-50\">\n          <Button\n            variant=\"ghost\"\n            size=\"icon\"\n            onClick={() => setIsSidebarOpen(true)}\n            className=\"glass text-violet-400 hover:text-violet-300\"\n          >\n            <Menu className=\"w-5 h-5\" />\n          </Button>\n        </div>\n      )}\n\n      {/* Sidebar */}\n      <LibrarySidebar\n        isOpen={isSidebarOpen}\n        onClose={() => setIsSidebarOpen(false)}\n        onPlayTrack={handlePlayTrack}\n      />\n\n      {/* Main content */}\n      {children}\n\n      {/* Music player */}\n      {playingTrack && (\n        <MusicPlayer\n          track={playingTrack}\n          onClose={() => {\n            setPlayingTrack(null);\n            currentTrack = null;\n          }}\n        />\n      )}\n    </div>\n  );\n}\n\n// Export function to play track from anywhere\nexport function playTrack(track: SearchResult) {\n  if (setCurrentTrackGlobal) {\n    setCurrentTrackGlobal(track);\n    currentTrack = track;\n  }\n}\n","size_bytes":2110},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"server/lib/openai-service.ts":{"content":"// Reference: javascript_openai blueprint\nimport OpenAI from \"openai\";\nimport { VibeMatchResult } from \"@shared/schema\";\n\n// the newest OpenAI model is \"gpt-5\" which was released August 7, 2025. do not change this unless explicitly requested by the user\nfunction getOpenAIClient() {\n  if (!process.env.OPENAI_API_KEY) {\n    throw new Error('OPENAI_API_KEY is required. Please add it to your Replit Secrets.');\n  }\n  return new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n}\n\nconst MUSICAL_VIBES = [\n  \"energetic\", \"calm\", \"melancholic\", \"upbeat\", \"dreamy\", \"intense\", \"romantic\", \"mysterious\",\n  \"joyful\", \"nostalgic\", \"powerful\", \"gentle\", \"dark\", \"bright\", \"ethereal\", \"groovy\",\n  \"chill\", \"aggressive\", \"soothing\", \"euphoric\", \"ambient\", \"dramatic\", \"playful\", \"epic\",\n  \"funky\", \"moody\", \"triumphant\", \"haunting\", \"sensual\", \"rebellious\", \"peaceful\", \"cinematic\",\n  \"bluesy\", \"jazzy\", \"electronic\", \"acoustic\", \"orchestral\", \"minimalist\", \"maximalist\", \"experimental\",\n  \"retro\", \"futuristic\", \"organic\", \"synthetic\", \"rhythmic\", \"melodic\", \"harmonic\", \"dissonant\",\n  \"uplifting\", \"depressing\", \"hopeful\", \"anxious\", \"confident\", \"vulnerable\", \"angry\", \"loving\",\n  \"spiritual\", \"secular\", \"meditative\", \"chaotic\", \"structured\", \"flowing\", \"staccato\", \"legato\",\n  \"major\", \"minor\", \"chromatic\", \"pentatonic\", \"modal\", \"atonal\", \"tonal\", \"polytonal\",\n  \"fast\", \"slow\", \"moderate\", \"accelerating\", \"decelerating\", \"rubato\", \"steady\", \"syncopated\",\n  \"loud\", \"soft\", \"dynamic\", \"static\", \"crescendo\", \"diminuendo\", \"forte\", \"piano\",\n  \"bright\", \"warm\", \"cold\", \"raw\", \"polished\", \"lo-fi\", \"hi-fi\", \"vintage\",\n  \"danceable\", \"contemplative\", \"hypnotic\", \"catchy\", \"complex\", \"simple\", \"layered\", \"sparse\",\n  \"vocal-heavy\", \"instrumental\", \"a cappella\", \"symphonic\", \"chamber\", \"solo\", \"ensemble\", \"choir\",\n  \"traditional\", \"modern\", \"fusion\", \"crossover\", \"genre-bending\", \"pure\", \"hybrid\", \"eclectic\",\n  \"repetitive\", \"varied\", \"progressive\", \"regressive\", \"circular\", \"linear\", \"cyclical\", \"evolving\",\n  \"tribal\", \"urban\", \"rural\", \"cosmic\", \"earthly\", \"celestial\", \"infernal\", \"neutral\",\n  \"masculine\", \"feminine\", \"androgynous\", \"youthful\", \"mature\", \"timeless\", \"dated\", \"contemporary\",\n  \"commercial\", \"underground\", \"mainstream\", \"niche\", \"accessible\", \"challenging\", \"familiar\", \"novel\",\n  \"emotional\", \"intellectual\", \"physical\", \"spiritual\", \"mental\", \"visceral\", \"cerebral\", \"primal\",\n  \"sociable\", \"solitary\", \"communal\", \"individual\", \"collective\", \"personal\", \"universal\", \"specific\",\n  \"celebratory\", \"mourning\", \"reflective\", \"reactive\", \"proactive\", \"passive\", \"active\", \"interactive\",\n  \"narrative\", \"abstract\", \"literal\", \"metaphorical\", \"symbolic\", \"direct\", \"indirect\", \"implicit\",\n  \"improvised\", \"composed\", \"arranged\", \"produced\", \"raw\", \"refined\", \"rough\", \"smooth\",\n  \"textured\", \"clean\", \"distorted\", \"pure\", \"mixed\", \"blended\", \"separated\", \"unified\",\n  \"organic\", \"mechanical\", \"natural\", \"artificial\", \"analog\", \"digital\", \"hybrid\", \"authentic\",\n  \"imitative\", \"original\", \"derivative\", \"innovative\", \"conventional\", \"unconventional\", \"traditional\", \"revolutionary\"\n];\n\nexport async function analyzeVibeFromAudio(audioBase64: string): Promise<VibeMatchResult> {\n  try {\n    // Convert base64 to buffer for Whisper transcription\n    const audioBuffer = Buffer.from(audioBase64, 'base64');\n    \n    // Save to temporary file for Whisper\n    const fs = await import('fs');\n    const path = await import('path');\n    const os = await import('os');\n    \n    const tempFilePath = path.join(os.tmpdir(), `vibe-${Date.now()}.webm`);\n    fs.writeFileSync(tempFilePath, audioBuffer);\n\n    // Transcribe audio (if there's any humming/singing)\n    let transcription = '';\n    try {\n      const openai = getOpenAIClient();\n      const audioReadStream = fs.createReadStream(tempFilePath);\n      // All OpenAI/Whisper/audio features removed. Only text-based vibe match is supported now.\n      // This file is now a stub for compatibility.\n        model: \"whisper-1\",\n","size_bytes":3984},"functions/api/lib/freegpt.ts":{"content":"// Music AI assistant - Uses AI API from https://github.com/matenations/AI\n// Primary: https://ai-wtsg.onrender.com/chat/\n// Fallback: Free AI APIs\n\nimport fetch from 'node-fetch';\n\n// List of API endpoints to try in order\n// Note: freegpt.cc is a web interface, not an API, so we use similar free AI APIs\nconst AI_ENDPOINTS = [\n  {\n    name: 'Primary API',\n    url: 'https://ai-wtsg.onrender.com/chat/',\n    buildBody: (query: string) => ({ message: query }),\n    extractResponse: (data: any) => data.response || data.answer || data.reply || data.message || data.text,\n    timeout: 45000, // Longer timeout for cold starts on Render\n  },\n  {\n    name: 'Fallback API 1',\n    url: 'https://free-unoficial-gpt4o-mini-api-g70n.onrender.com/chat/',\n    buildBody: (query: string) => ({ message: query }),\n    extractResponse: (data: any) => data.response || data.answer || data.reply || data.message,\n    timeout: 30000,\n  },\n  {\n    name: 'Fallback API 2',\n    url: 'https://chatgpt-api.shn.hk/v1/',\n    buildBody: (query: string) => ({\n      model: 'gpt-3.5-turbo',\n      messages: [{ role: 'user', content: query }]\n    }),\n    extractResponse: (data: any) => data.choices?.[0]?.message?.content || data.response || data.answer,\n    timeout: 30000,\n  }\n];\n\nasync function tryEndpoint(endpoint: typeof AI_ENDPOINTS[0], query: string): Promise<string | null> {\n  try {\n    console.log(`[AI] Trying ${endpoint.name}...`);\n    const response = await fetch(endpoint.url, {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(endpoint.buildBody(query)),\n      signal: AbortSignal.timeout(endpoint.timeout),\n    });\n    \n    if (!response.ok) {\n      console.log(`[AI] ${endpoint.name} returned status ${response.status}`);\n      return null;\n    }\n    \n    const data = await response.json();\n    const aiResponse = endpoint.extractResponse(data);\n    \n    if (aiResponse && typeof aiResponse === 'string' && aiResponse.trim()) {\n      console.log(`[AI] ${endpoint.name} succeeded`);\n      return aiResponse;\n    }\n    \n    return null;\n  } catch (error: any) {\n    console.log(`[AI] ${endpoint.name} failed:`, error.message);\n    return null;\n  }\n}\n\nexport async function freegptChat({ messages, model = 'gpt-3.5-turbo', max_tokens = 400, temperature = 0.7 }) {\n  const userMessage = messages[messages.length - 1]?.content || '';\n  const systemMessage = messages.find(m => m.role === 'system')?.content || '';\n  \n  const query = systemMessage ? `${systemMessage}\\n\\nUser: ${userMessage}` : userMessage;\n  \n  // Try each endpoint in order\n  for (const endpoint of AI_ENDPOINTS) {\n    const result = await tryEndpoint(endpoint, query);\n    if (result) {\n      return result;\n    }\n  }\n  \n  // If all endpoints fail, return a helpful message\n  console.error('[AI] All AI endpoints failed');\n  return \"I'm currently unable to connect to the AI service. The API may be waking up (this can take 30-60 seconds for free services). Please try again in a moment, or ask a specific music question.\";\n}\n","size_bytes":3090},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"server/routes/song-info.ts":{"content":"import { Router } from \"express\";\nimport { searchYouTube } from \"../lib/youtube\";\n\nconst router = Router();\n\nasync function searchGeniusAndGetLyrics(query: string): Promise<{ artist: string; track: string; lyrics: string | null }> {\n  try {\n    const searchUrl = `https://some-random-api.com/others/lyrics?title=${encodeURIComponent(query)}`;\n    const response = await fetch(searchUrl);\n    \n    if (response.ok) {\n      const data = await response.json();\n      if (data.lyrics && data.title && data.author) {\n        return {\n          artist: data.author,\n          track: data.title,\n          lyrics: data.lyrics\n        };\n      }\n    }\n    \n    return { artist: \"\", track: \"\", lyrics: null };\n  } catch (error) {\n    console.error(\"Error fetching from some-random-api:\", error);\n    return { artist: \"\", track: \"\", lyrics: null };\n  }\n}\n\nasync function fetchLyrics(artist: string, track: string): Promise<string | null> {\n  try {\n    const lyricsUrl = `https://api.lyrics.ovh/v1/${encodeURIComponent(artist)}/${encodeURIComponent(track)}`;\n    const response = await fetch(lyricsUrl);\n    \n    if (response.ok) {\n      const data = await response.json();\n      if (data.lyrics) {\n        return data.lyrics;\n      }\n    }\n    \n    return null;\n  } catch (error) {\n    console.error(\"Error fetching lyrics from lyrics.ovh:\", error);\n    return null;\n  }\n}\n\nrouter.get(\"/\", async (req, res) => {\n  try {\n    const query = req.query.q as string;\n    \n    if (!query) {\n      return res.status(400).json({ error: \"Query parameter is required\" });\n    }\n\n    const queryParts = query.split(/[-–—]/);\n    let artist = \"\";\n    let track = \"\";\n    let thumbnail = \"\";\n    let duration = \"\";\n    let platform = \"\";\n    let lyrics: string | null = null;\n    \n    if (queryParts.length >= 2) {\n      artist = queryParts[0].trim();\n      track = queryParts[1].trim();\n    } else {\n      track = query.trim();\n    }\n\n    try {\n      const youtubeResults = await searchYouTube(query, 1);\n      if (youtubeResults.length > 0) {\n        const firstResult = youtubeResults[0];\n        if (!artist) artist = firstResult.artist || \"\";\n        if (!track && firstResult.title) track = firstResult.title;\n        thumbnail = firstResult.thumbnail || \"\";\n        duration = firstResult.duration || \"\";\n        platform = firstResult.platform || \"YouTube\";\n      }\n    } catch (error) {\n      console.log(\"YouTube fetch failed, continuing with lyrics only:\", error);\n    }\n\n    if (artist && track) {\n      lyrics = await fetchLyrics(artist, track);\n    }\n    \n    if (!lyrics) {\n      const geniusResult = await searchGeniusAndGetLyrics(query);\n      if (geniusResult.lyrics) {\n        if (!artist) artist = geniusResult.artist;\n        if (!track) track = geniusResult.track;\n        lyrics = geniusResult.lyrics;\n      }\n    }\n\n    res.json({\n      artist: artist || \"Unknown Artist\",\n      track: track || query,\n      thumbnail,\n      duration,\n      platform,\n      lyrics: lyrics || \"Lyrics not available for this song.\",\n    });\n  } catch (error) {\n    console.error(\"Error in song-info route:\", error);\n    res.status(500).json({ error: \"Internal server error\" });\n  }\n});\n\nexport default router;\n","size_bytes":3195},"client/src/pages/about.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { Music, ArrowLeft } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\n\nexport default function About() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"min-h-screen flex flex-col\">\n      <header className=\"sticky top-0 z-40 glass-elevated border-b border-white/10\">\n        <div className=\"max-w-7xl mx-auto px-6 py-4\">\n          <div className=\"flex items-center gap-4\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={() => setLocation(\"/\")}\n              className=\"text-violet-400\"\n            >\n              <ArrowLeft className=\"w-5 h-5\" />\n            </Button>\n            <button \n              onClick={() => setLocation(\"/\")}\n              className=\"text-2xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent\"\n            >\n              Mate.\n            </button>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"flex-1 max-w-4xl w-full mx-auto px-6 py-16\">\n        <div className=\"space-y-8\">\n          <div className=\"text-center space-y-4\">\n            <Music className=\"w-16 h-16 mx-auto text-violet-400\" />\n            <h1 className=\"text-4xl md:text-5xl font-display font-semibold bg-gradient-to-r from-violet-500 to-blue-500 bg-clip-text text-transparent\">\n              About Mate Nation\n            </h1>\n          </div>\n\n          <div className=\"glass rounded-2xl p-8 md:p-12 space-y-6\">\n            <p className=\"text-lg text-muted-foreground leading-relaxed\">\n              \"Mate.\" is more than just a music search engine. We are a forward-thinking record label \n              that believes in the power of diversity and innovation in music.\n            </p>\n\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-display font-semibold text-violet-400\">Our Vision</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We accept all genres and celebrate the unique sounds that make music truly special. \n                Our mission is to bring a change to the music industry by embracing artists who dare \n                to be different and blend styles in unprecedented ways.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-display font-semibold text-blue-400\">What We Do</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                Mate Nation is built on the foundation of musical exploration and discovery. We provide \n                a platform where artists can showcase their unique sounds and music lovers can discover \n                the next big thing, regardless of genre boundaries.\n              </p>\n            </div>\n\n            <div className=\"space-y-4\">\n              <h2 className=\"text-2xl font-display font-semibold text-violet-400\">Our Commitment</h2>\n              <p className=\"text-muted-foreground leading-relaxed\">\n                We are committed to supporting artists who push creative boundaries and create music \n                that resonates with authenticity. Whether you're into electronic, acoustic, experimental, \n                or any blend in between, Mate Nation is here to help you find your sound and share it \n                with the world.\n              </p>\n            </div>\n\n            <div className=\"pt-6 border-t border-white/10 space-y-4\">\n              <p className=\"text-center text-muted-foreground italic\">\n                \"Blending unique sounds, breaking boundaries, changing the music industry.\"\n              </p>\n              <div className=\"text-center\">\n                <a \n                  href=\"https://matenation.org\" \n                  target=\"_blank\" \n                  rel=\"noopener noreferrer\"\n                  className=\"text-violet-400 hover:text-violet-300 transition-colors text-lg font-medium\"\n                >\n                  Visit matenation.org\n                </a>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n    </div>\n  );\n}\n","size_bytes":4173},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"functions/api/lib/playlistsound.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface PlaylistSoundResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchPlaylistSound(query: string, maxResults: number = 20): Promise<PlaylistSoundResult[]> {\n  try {\n    // PlaylistSound.com search\n    const url = `https://playlistsound.com/api/search?q=${encodeURIComponent(query)}&limit=${maxResults}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const playlists = data.playlists || data.results || [];\n\n    const results: PlaylistSoundResult[] = playlists.slice(0, maxResults).map((playlist: any) => {\n      const title = playlist.title || playlist.name || 'Unknown Playlist';\n      const artist = playlist.creator || playlist.user?.name || 'PlaylistSound';\n      \n      return {\n        id: playlist.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: playlist.cover_url || playlist.image || playlist.thumbnail || '',\n        duration: `${playlist.track_count || 0} tracks`,\n        url: playlist.url || `https://playlistsound.com/playlist/${playlist.id}`,\n        embedUrl: playlist.embed_url || playlist.url || '',\n        publishedAt: playlist.created_at || new Date().toISOString(),\n        viewCount: playlist.plays || 0,\n        description: playlist.description || `${title} - Music playlist`,\n        platform: 'playlistsound',\n        aiScore: calculateAIScore(title, artist, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('PlaylistSound search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, artist: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  const artistLower = artist.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (artistLower.includes(queryLower)) score += 30;\n  \n  if (titleLower === queryLower) score += 100;\n  if (artistLower === queryLower) score += 80;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2609},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"functions/api/lib/accuradio.ts":{"content":"import fetch from 'node-fetch';\n\nexport interface AccuRadioResult {\n  id: string;\n  title: string;\n  artist: string;\n  thumbnail: string;\n  duration: string;\n  url: string;\n  embedUrl: string;\n  publishedAt: string;\n  viewCount: number;\n  description: string;\n  platform: string;\n  aiScore?: number;\n}\n\nexport async function searchAccuRadio(query: string, maxResults: number = 20): Promise<AccuRadioResult[]> {\n  try {\n    // AccuRadio channel/station search\n    const url = `https://www.accuradio.com/api/search?query=${encodeURIComponent(query)}`;\n    \n    const response = await fetch(url, {\n      headers: {\n        'Accept': 'application/json',\n        'User-Agent': 'Mozilla/5.0'\n      }\n    });\n\n    if (!response.ok) {\n      return [];\n    }\n\n    const data: any = await response.json();\n    const channels = data.channels || data.results || [];\n\n    const results: AccuRadioResult[] = channels.slice(0, maxResults).map((channel: any) => {\n      const title = channel.name || channel.title || 'Unknown Channel';\n      const artist = 'AccuRadio';\n      \n      return {\n        id: channel.id || String(Math.random()),\n        title: title,\n        artist: artist,\n        thumbnail: channel.image_url || channel.thumbnail || 'https://www.accuradio.com/images/logo.png',\n        duration: 'Live Stream',\n        url: channel.url || `https://www.accuradio.com/${channel.id}`,\n        embedUrl: channel.stream_url || channel.url || '',\n        publishedAt: new Date().toISOString(),\n        viewCount: channel.listeners || 0,\n        description: channel.description || `${title} - Online radio station`,\n        platform: 'accuradio',\n        aiScore: calculateAIScore(title, query)\n      };\n    });\n\n    return results;\n  } catch (error) {\n    console.error('AccuRadio search error:', error);\n    return [];\n  }\n}\n\nfunction calculateAIScore(title: string, query: string): number {\n  let score = 0;\n  \n  const queryLower = query.toLowerCase();\n  const titleLower = title.toLowerCase();\n  \n  if (titleLower.includes(queryLower)) score += 50;\n  if (titleLower === queryLower) score += 100;\n  \n  const titleWords = titleLower.split(' ');\n  const queryWords = queryLower.split(' ');\n  const matchingWords = queryWords.filter(word => titleWords.includes(word)).length;\n  score += matchingWords * 10;\n  \n  return score;\n}\n","size_bytes":2321}},"version":2}